"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[503],{6682:(e,t,s)=>{s.d(t,{I:()=>u});var a=s(5155),i=s(2115),n=s(285),r=s(8668),d=s(7118),l=s(2047),o=s(2732),c=s(8262);function u(e){let{unitId:t}=e,[s,u]=(0,i.useState)(null),[p,m]=(0,i.useState)([]),[g,f]=(0,i.useState)([]),[h,b]=(0,i.useState)([]),[x,v]=(0,i.useState)(null),[y,j]=(0,i.useState)(null),[N,w]=(0,i.useState)(!1),[C,k]=(0,i.useState)(!0),[R,E]=(0,i.useState)(!1),[U,S]=(0,i.useState)({patients:{},nurses:{},pcts:{},staff:{}});(0,i.useEffect)(()=>{(async()=>{if(t)try{k(!0);let e=await (0,o.HW)(t);if(!e.unit)return void(0,c.oR)({title:"Error",description:"Unit not found",variant:"destructive"});if(u(e.unit),m(e.patients),f(e.nurses),b(e.pcts),v(e.chargeNurse),j(e.unitClerk),0===e.patients.length&&0===e.nurses.length){E(!0);let t=await (0,o.ZW)(e.unit);m(t.patients),f(t.nurses),b(t.pcts),v(t.chargeNurse),j(t.unitClerk),E(!1),(0,c.oR)({title:"Unit Initialized",description:"Unit data has been created successfully"})}}catch(e){console.error("Error loading unit data:",e),(0,c.oR)({title:"Error",description:"Failed to load unit data",variant:"destructive"})}finally{k(!1)}})()},[t]);let P=(0,i.useMemo)(()=>p.filter(e=>!e.assigned),[p]),F=(0,i.useCallback)(async(e,t)=>{try{let s=g.find(t=>t.id===e),a=p.find(e=>e.id===t);if(!s||!a)return;let i=[...s.assignedRooms];i.includes(a.roomNumber)||(i.push(a.roomNumber),i.sort((e,t)=>parseInt(e)-parseInt(t))),f(g.map(t=>t.id===e?{...t,assignedRooms:i}:t)),m(p.map(e=>e.id===t?{...e,assigned:!0}:e)),S(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:i}},patients:{...s.patients,[t]:{assigned:!0}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:i}),(0,o.Z6)(t,{assigned:!0})]),S(s=>{let{[e]:a,...i}=s.nurses,{[t]:n,...r}=s.patients;return{...s,nurses:i,patients:r}})}catch(e){console.error("Error assigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[g,p]),M=(0,i.useCallback)(async(e,t)=>{try{let s=g.find(t=>t.id===e),a=p.find(e=>e.roomNumber===t);if(!s||!a)return;let i=s.assignedRooms.filter(e=>e!==t);f(g.map(t=>t.id===e?{...t,assignedRooms:i}:t)),m(p.map(e=>e.roomNumber===t?{...e,assigned:!1}:e)),S(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:i}},patients:{...t.patients,[a.id]:{assigned:!1}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:i}),(0,o.Z6)(a.id,{assigned:!1})]),S(t=>{let{[e]:s,...i}=t.nurses,{[a.id]:n,...r}=t.patients;return{...t,nurses:i,patients:r}})}catch(e){console.error("Error unassigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[g,p]),O=(0,i.useCallback)(async(e,t)=>{try{f(g.map(s=>s.id===e?{...s,...t}:s)),S(s=>({...s,nurses:{...s.nurses,[e]:{...s.nurses[e],...t}}})),await (0,o.Dr)(e,t),S(t=>{let{[e]:s,...a}=t.nurses;return{...t,nurses:a}}),(0,c.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[g]),I=(0,i.useCallback)(async(e,t)=>{try{b(h.map(s=>s.id===e?{...s,...t}:s)),S(s=>({...s,pcts:{...s.pcts,[e]:{...s.pcts[e],...t}}})),await (0,o.B5)(e,t),S(t=>{let{[e]:s,...a}=t.pcts;return{...t,pcts:a}}),(0,c.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,c.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[h]),T=(0,i.useCallback)(async e=>{try{if(!x)return;v({...x,...e}),S(t=>({...t,staff:{...t.staff,[x.id]:{...t.staff[x.id],...e}}})),await (0,o.e4)(x.id,e),S(e=>{let{[x.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[x]),z=(0,i.useCallback)(async e=>{try{if(!y)return;j({...y,...e}),S(t=>({...t,staff:{...t.staff,[y.id]:{...t.staff[y.id],...e}}})),await (0,o.e4)(y.id,e),S(e=>{let{[y.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,c.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[y]),D=(0,i.useCallback)(async()=>{try{let e=Object.entries(U.patients).map(e=>{let[t,s]=e;return{id:t,data:s}});e.length>0&&await (0,o.cT)(e),await Promise.all([...Object.entries(U.nurses).map(e=>{let[t,s]=e;return(0,o.Dr)(t,s)}),...Object.entries(U.pcts).map(e=>{let[t,s]=e;return(0,o.B5)(t,s)}),...Object.entries(U.staff).map(e=>{let[t,s]=e;return(0,o.e4)(t,s)})]),S({patients:{},nurses:{},pcts:{},staff:{}}),w(!1),(0,c.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,c.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[U]),L=(0,i.useMemo)(()=>Object.keys(U.patients).length>0||Object.keys(U.nurses).length>0||Object.keys(U.pcts).length>0||Object.keys(U.staff).length>0,[U]);return C||R?(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,a.jsx)("p",{className:"text-gray-600",children:R?"Initializing unit data...":"Loading..."})]})}):s?(0,a.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,a.jsxs)("h3",{className:"text-xl font-semibold",children:[s.designation," Patient Grid"]}),(0,a.jsxs)("div",{className:"flex gap-2",children:[L&&(0,a.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,a.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,a.jsx)(n.$,{variant:N?"default":"outline",onClick:()=>N?D():w(!0),children:N?"Save Layout":"Edit Layout"})]})]}),(0,a.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,a.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,a.jsxs)("div",{className:"space-y-2",children:[P.map(e=>(0,a.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,a.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,a.jsxs)("span",{className:"px-2 py-1 rounded-full text-xs ".concat(e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:["Acuity ",e.acuity]})]},e.id)),0===P.length&&(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),g.map(e=>(0,a.jsx)(r.c,{nurse:e,patients:p,onAssign:t=>F(e.id,t),onUnassign:t=>M(e.id,t),onUpdate:t=>O(e.id,t),editMode:N},e.id)),h.map(e=>(0,a.jsx)(d.I,{pct:e,onUpdate:t=>I(e.id,t),editMode:N},e.id)),x&&(0,a.jsx)(l.v,{title:"Charge Nurse",staffMember:x,onUpdate:T,editMode:N,size:"small"}),y&&(0,a.jsx)(l.v,{title:"Unit Clerk",staffMember:y,onUpdate:z,editMode:N,size:"small"})]})]}):(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,a.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}},8856:(e,t,s)=>{s.d(t,{E:()=>n});var a=s(5155),i=s(9434);function n(e){let{className:t,...s}=e;return(0,a.jsx)("div",{className:(0,i.cn)("animate-pulse rounded-md bg-gray-200",t),...s})}}}]);
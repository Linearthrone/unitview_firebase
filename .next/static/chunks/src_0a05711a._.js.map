{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,wQACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;QAAK,IAAI;QACjD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/shared/nurse-card.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Nurse, Patient } from '@/lib/firebase';\n\ninterface NurseCardProps {\n  nurse: Nurse;\n  patients: Patient[];\n  onAssign: (patientId: string) => void;\n  onUnassign: (roomNumber: string) => void;\n  onUpdate: (data: Partial<Nurse>) => void;\n  editMode: boolean;\n}\n\nexport function NurseCard({ nurse, patients, onAssign, onUnassign, onUpdate, editMode }: NurseCardProps) {\n  const [isAssigning, setIsAssigning] = useState(false);\n  \n  // Calculate total acuity for this nurse\n  const totalAcuity = nurse.assignedRooms.reduce((sum, roomNumber) => {\n    const patient = patients.find(p => p.roomNumber === roomNumber);\n    return sum + (patient ? patient.acuity : 0);\n  }, 0);\n  \n  // Determine if nurse is overloaded\n  const isOverloaded = totalAcuity > nurse.acuityCapacity;\n  \n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ name: e.target.value });\n  };\n  \n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ spectraNumber: e.target.value });\n  };\n  \n  const handleReliefChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ reliefName: e.target.value });\n  };\n  \n  const handleAcuityCapacityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ acuityCapacity: parseInt(e.target.value, 10) || 0 });\n  };\n  \n  return (\n    <div className={`border rounded-lg p-4 ${isOverloaded ? 'border-red-500 bg-red-50' : 'border-blue-200'}`}>\n      <div className=\"flex justify-between items-start mb-3\">\n        <h4 className=\"font-medium\">Nurse Assignment</h4>\n        {isOverloaded && (\n          <span className=\"bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full\">\n            Acuity Alert\n          </span>\n        )}\n      </div>\n      \n      {/* Nurse Information */}\n      <div className=\"space-y-2 mb-4\">\n        <div>\n          <label className=\"block text-xs text-gray-500\">Name</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={nurse.name}\n              onChange={handleNameChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"font-medium\">{nurse.name || 'Unassigned'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={nurse.spectraNumber}\n              onChange={handleSpectraChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"text-sm\">{nurse.spectraNumber || 'N/A'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Relief</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={nurse.reliefName}\n              onChange={handleReliefChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"text-sm\">{nurse.reliefName || 'None'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Acuity Capacity</label>\n          {editMode ? (\n            <input\n              type=\"number\"\n              value={nurse.acuityCapacity}\n              onChange={handleAcuityCapacityChange}\n              className=\"w-full p-1 border rounded text-sm\"\n              min=\"1\"\n            />\n          ) : (\n            <div className=\"flex items-center\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div \n                  className={`h-2.5 rounded-full ${\n                    isOverloaded ? 'bg-red-600' : 'bg-blue-600'\n                  }`}\n                  style={{ width: `${Math.min(100, (totalAcuity / nurse.acuityCapacity) * 100)}%` }}\n                ></div>\n              </div>\n              <span className=\"ml-2 text-xs font-medium\">\n                {totalAcuity}/{nurse.acuityCapacity}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Patient Assignments */}\n      <div>\n        <div className=\"flex justify-between items-center mb-2\">\n          <label className=\"text-xs text-gray-500\">Patient Assignments</label>\n          {!editMode && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"text-xs py-1 h-auto\"\n              onClick={() => setIsAssigning(!isAssigning)}\n            >\n              {isAssigning ? 'Done' : 'Assign'}\n            </Button>\n          )}\n        </div>\n        \n        {/* Assigned Rooms */}\n        <div className=\"space-y-1 mb-3\">\n          {nurse.assignedRooms.length > 0 ? (\n            nurse.assignedRooms.map(roomNumber => {\n              const patient = patients.find(p => p.roomNumber === roomNumber);\n              return (\n                <div key={roomNumber} className=\"flex justify-between items-center p-1.5 bg-gray-50 rounded border\">\n                  <div className=\"flex items-center\">\n                    <span className=\"font-medium text-sm\">Room {roomNumber}</span>\n                    {patient?.name && <span className=\"ml-2 text-xs\">{patient.name}</span>}\n                  </div>\n                  <div className=\"flex items-center\">\n                    {patient && (\n                      <span className={`px-1.5 py-0.5 rounded-full text-xs mr-2 ${\n                        patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\n                        patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-green-100 text-green-800'\n                      }`}>\n                        {patient.acuity}\n                      </span>\n                    )}\n                    {!editMode && (\n                      <button\n                        onClick={() => onUnassign(roomNumber)}\n                        className=\"text-red-500 text-xs hover:text-red-700\"\n                        aria-label=\"Remove patient assignment\"\n                      >\n                        Ã—\n                      </button>\n                    )}\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            <p className=\"text-sm text-gray-500 italic\">No patients assigned</p>\n          )}\n        </div>\n        \n        {/* Assignment Selector */}\n        {isAssigning && !editMode && (\n          <div className=\"mt-3 border-t pt-2\">\n            <p className=\"text-xs font-medium mb-2\">Select a patient to assign:</p>\n            <div className=\"grid grid-cols-2 gap-1\">\n              {patients\n                .filter(patient => !patient.assigned)\n                .map(patient => (\n                  <button\n                    key={patient.id}\n                    onClick={() => {\n                      onAssign(patient.id);\n                      if (nurse.assignedRooms.length >= 5) {\n                        setIsAssigning(false);\n                      }\n                    }}\n                    className=\"text-xs p-1 border rounded hover:bg-blue-50 flex justify-between items-center\"\n                  >\n                    <span>Room {patient.roomNumber}</span>\n                    <span className={`px-1.5 py-0.5 rounded-full text-xs ${\n                      patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\n                      patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-green-100 text-green-800'\n                    }`}>\n                      {patient.acuity}\n                    </span>\n                  </button>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/shared/pct-card.tsx"],"sourcesContent":["'use client';\n\nimport { PCT } from '@/lib/firebase';\n\ninterface PCTCardProps {\n  pct: PCT;\n  onUpdate: (data: Partial<PCT>) => void;\n  editMode: boolean;\n}\n\nexport function PCTCard({ pct, onUpdate, editMode }: PCTCardProps) {\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ name: e.target.value });\n  };\n  \n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ spectraNumber: e.target.value });\n  };\n  \n  const handleReliefChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ reliefName: e.target.value });\n  };\n  \n  const handleRoomRangeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ roomRange: e.target.value });\n  };\n  \n  return (\n    <div className=\"border border-green-200 rounded-lg p-4\">\n      <h4 className=\"font-medium mb-3\">Patient Care Tech</h4>\n      \n      {/* PCT Information */}\n      <div className=\"space-y-2 mb-4\">\n        <div>\n          <label className=\"block text-xs text-gray-500\">Name</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={pct.name}\n              onChange={handleNameChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"font-medium\">{pct.name || 'Unassigned'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={pct.spectraNumber}\n              onChange={handleSpectraChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"text-sm\">{pct.spectraNumber || 'N/A'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Relief</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={pct.reliefName}\n              onChange={handleReliefChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"text-sm\">{pct.reliefName || 'None'}</p>\n          )}\n        </div>\n      </div>\n      \n      {/* Room Range Assignment */}\n      <div>\n        <label className=\"block text-xs text-gray-500 mb-1\">Room Assignment</label>\n        {editMode ? (\n          <input\n            type=\"text\"\n            value={pct.roomRange}\n            onChange={handleRoomRangeChange}\n            className=\"w-full p-1 border rounded text-sm\"\n            placeholder=\"e.g., 401-412\"\n          />\n        ) : (\n          <div className=\"bg-green-50 border border-green-200 rounded p-2 text-center\">\n            <span className=\"font-medium\">Rooms {pct.roomRange}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;AAUO,SAAS,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAgB;IAC/D,MAAM,mBAAmB,CAAC;QACxB,SAAS;YAAE,MAAM,EAAE,MAAM,CAAC,KAAK;QAAC;IAClC;IAEA,MAAM,sBAAsB,CAAC;QAC3B,SAAS;YAAE,eAAe,EAAE,MAAM,CAAC,KAAK;QAAC;IAC3C;IAEA,MAAM,qBAAqB,CAAC;QAC1B,SAAS;YAAE,YAAY,EAAE,MAAM,CAAC,KAAK;QAAC;IACxC;IAEA,MAAM,wBAAwB,CAAC;QAC7B,SAAS;YAAE,WAAW,EAAE,MAAM,CAAC,KAAK;QAAC;IACvC;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAmB;;;;;;0BAGjC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACC,6LAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,6LAAC;gCACC,MAAK;gCACL,OAAO,IAAI,IAAI;gCACf,UAAU;gCACV,WAAU;;;;;qDAGZ,6LAAC;gCAAE,WAAU;0CAAe,IAAI,IAAI,IAAI;;;;;;;;;;;;kCAI5C,6LAAC;;0CACC,6LAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,6LAAC;gCACC,MAAK;gCACL,OAAO,IAAI,aAAa;gCACxB,UAAU;gCACV,WAAU;;;;;qDAGZ,6LAAC;gCAAE,WAAU;0CAAW,IAAI,aAAa,IAAI;;;;;;;;;;;;kCAIjD,6LAAC;;0CACC,6LAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,6LAAC;gCACC,MAAK;gCACL,OAAO,IAAI,UAAU;gCACrB,UAAU;gCACV,WAAU;;;;;qDAGZ,6LAAC;gCAAE,WAAU;0CAAW,IAAI,UAAU,IAAI;;;;;;;;;;;;;;;;;;0BAMhD,6LAAC;;kCACC,6LAAC;wBAAM,WAAU;kCAAmC;;;;;;oBACnD,yBACC,6LAAC;wBACC,MAAK;wBACL,OAAO,IAAI,SAAS;wBACpB,UAAU;wBACV,WAAU;wBACV,aAAY;;;;;6CAGd,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAK,WAAU;;gCAAc;gCAAO,IAAI,SAAS;;;;;;;;;;;;;;;;;;;;;;;;AAM9D;KArFgB","debugId":null}},
    {"offset": {"line": 714, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/shared/staff-card.tsx"],"sourcesContent":["'use client';\n\nimport { StaffMember } from '@/lib/firebase';\n\ninterface StaffCardProps {\n  title: string;\n  staffMember: StaffMember;\n  onUpdate: (data: Partial<StaffMember>) => void;\n  editMode: boolean;\n  size?: 'small' | 'normal';\n}\n\nexport function StaffCard({ \n  title, \n  staffMember, \n  onUpdate, \n  editMode,\n  size = 'normal'\n}: StaffCardProps) {\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ name: e.target.value });\n  };\n  \n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onUpdate({ spectraNumber: e.target.value });\n  };\n  \n  return (\n    <div className={`border ${\n      title === 'Charge Nurse' ? 'border-purple-200' : 'border-yellow-200'\n    } rounded-lg p-4 ${\n      size === 'small' ? 'col-span-1' : 'col-span-1 md:col-span-2'\n    }`}>\n      <h4 className=\"font-medium mb-3\">{title}</h4>\n      \n      <div className=\"space-y-2\">\n        <div>\n          <label className=\"block text-xs text-gray-500\">Name</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={staffMember.name}\n              onChange={handleNameChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"font-medium\">{staffMember.name || 'Unassigned'}</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\n          {editMode ? (\n            <input\n              type=\"text\"\n              value={staffMember.spectraNumber}\n              onChange={handleSpectraChange}\n              className=\"w-full p-1 border rounded text-sm\"\n            />\n          ) : (\n            <p className=\"text-sm\">{staffMember.spectraNumber || 'N/A'}</p>\n          )}\n        </div>\n      </div>\n      \n      {staffMember.role === 'chargeNurse' && (\n        <div className=\"mt-3 pt-2 border-t border-purple-100\">\n          <span className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full\">\n            Unit Supervisor\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;AAYO,SAAS,UAAU,EACxB,KAAK,EACL,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,QAAQ,EACA;IACf,MAAM,mBAAmB,CAAC;QACxB,SAAS;YAAE,MAAM,EAAE,MAAM,CAAC,KAAK;QAAC;IAClC;IAEA,MAAM,sBAAsB,CAAC;QAC3B,SAAS;YAAE,eAAe,EAAE,MAAM,CAAC,KAAK;QAAC;IAC3C;IAEA,qBACE,6LAAC;QAAI,WAAW,CAAC,OAAO,EACtB,UAAU,iBAAiB,sBAAsB,oBAClD,gBAAgB,EACf,SAAS,UAAU,eAAe,4BAClC;;0BACA,6LAAC;gBAAG,WAAU;0BAAoB;;;;;;0BAElC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACC,6LAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,6LAAC;gCACC,MAAK;gCACL,OAAO,YAAY,IAAI;gCACvB,UAAU;gCACV,WAAU;;;;;qDAGZ,6LAAC;gCAAE,WAAU;0CAAe,YAAY,IAAI,IAAI;;;;;;;;;;;;kCAIpD,6LAAC;;0CACC,6LAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,6LAAC;gCACC,MAAK;gCACL,OAAO,YAAY,aAAa;gCAChC,UAAU;gCACV,WAAU;;;;;qDAGZ,6LAAC;gCAAE,WAAU;0CAAW,YAAY,aAAa,IAAI;;;;;;;;;;;;;;;;;;YAK1D,YAAY,IAAI,KAAK,+BACpB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAK,WAAU;8BAA+D;;;;;;;;;;;;;;;;;AAOzF;KA9DgB","debugId":null}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/lib/firebase-config.ts"],"sourcesContent":["import { initializeApp, getApps } from 'firebase/app';\nimport {\n  getFirestore,\n  enableIndexedDbPersistence,\n  CACHE_SIZE_UNLIMITED,\n  persistentLocalCache,\n  persistentSingleTabManager\n} from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getAuth } from 'firebase/auth';\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyARvbAJtv-NBJnJQ3EdZNU3WsMnXThFzhM\",\n  authDomain: \"unitview.firebaseapp.com\",\n  databaseURL: \"https://unitview-default-rtdb.firebaseio.com\",\n  projectId: \"unitview\",\n  storageBucket: \"unitview.firebasestorage.app\",\n  messagingSenderId: \"185648925766\",\n  appId: \"1:185648925766:web:5ae6271dd4977f6e158e47\"\n};\n\n// Initialize Firebase\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\n\n// Initialize Firestore\nconst db = getFirestore(app);\n\n// Enable offline persistence (will use the cache when offline)\ntry {\n  enableIndexedDbPersistence(db).catch((err) => {\n    console.error(\"Firestore persistence error:\", err);\n  });\n} catch (error) {\n  console.warn(\"Firestore persistence already enabled or not supported\");\n}\n\nconst storage = getStorage(app);\nconst auth = getAuth(app);\n\nexport { app, db, storage, auth };\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;;;;;AAEA,yBAAyB;AACzB,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,mLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,IAAI,CAAA,GAAA,mLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,mLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;AAEjF,uBAAuB;AACvB,MAAM,KAAK,CAAA,GAAA,kKAAA,CAAA,eAAY,AAAD,EAAE;AAExB,+DAA+D;AAC/D,IAAI;IACF,CAAA,GAAA,kKAAA,CAAA,6BAA0B,AAAD,EAAE,IAAI,KAAK,CAAC,CAAC;QACpC,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF,EAAE,OAAO,OAAO;IACd,QAAQ,IAAI,CAAC;AACf;AAEA,MAAM,UAAU,CAAA,GAAA,gKAAA,CAAA,aAAU,AAAD,EAAE;AAC3B,MAAM,OAAO,CAAA,GAAA,qOAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/lib/firebase-optimized.ts"],"sourcesContent":["import { app, db, storage, auth } from './firebase-config';\nimport { collection, doc, setDoc, getDoc, getDocs, updateDoc, deleteDoc, query, where, DocumentData, writeBatch } from 'firebase/firestore';\n\n// Unit Types\nexport interface Unit {\n  id: string;\n  designation: string;\n  roomCount: number;\n  roomRanges: string[];\n  nurseCardCount: number;\n  pctCardCount: number;\n  hasChargeNurse: boolean;\n  hasUnitClerk: boolean;\n  createdAt?: number;\n  updatedAt?: number;\n}\n\n// Patient Types\nexport interface Patient {\n  id: string;\n  unitId: string;\n  roomNumber: string;\n  name: string;\n  acuity: number;\n  assigned: boolean;\n  notes?: string;\n  createdAt?: number;\n  updatedAt?: number;\n}\n\n// Staff Types\nexport interface Nurse {\n  id: string;\n  unitId: string;\n  name: string;\n  spectraNumber: string;\n  reliefName: string;\n  assignedRooms: string[];\n  acuityCapacity: number;\n  createdAt?: number;\n  updatedAt?: number;\n}\n\nexport interface PCT {\n  id: string;\n  unitId: string;\n  name: string;\n  spectraNumber: string;\n  reliefName: string;\n  roomRange: string;\n  createdAt?: number;\n  updatedAt?: number;\n}\n\nexport interface StaffMember {\n  id: string;\n  unitId: string;\n  name: string;\n  spectraNumber: string;\n  role: 'chargeNurse' | 'unitClerk';\n  createdAt?: number;\n  updatedAt?: number;\n}\n\nexport interface Module {\n  id: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  updatedAt?: number;\n}\n\n// Firebase Collection References\nconst unitsCollection = collection(db, 'units');\nconst patientsCollection = collection(db, 'patients');\nconst nursesCollection = collection(db, 'nurses');\nconst pctsCollection = collection(db, 'pcts');\nconst staffCollection = collection(db, 'staff');\nconst modulesCollection = collection(db, 'modules');\n\n// Cache for units data\nlet unitsCache: Unit[] | null = null;\nlet unitDataCache: Map<string, {\n  unit: Unit | null,\n  patients: Patient[],\n  nurses: Nurse[],\n  pcts: PCT[],\n  chargeNurse: StaffMember | null,\n  unitClerk: StaffMember | null\n}> = new Map();\n\n// Unit Functions\nexport async function createUnit(unitData: Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>): Promise<Unit> {\n  const timestamp = Date.now();\n  const unitRef = doc(unitsCollection);\n  const newUnit: Unit = {\n    ...unitData,\n    id: unitRef.id,\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n  \n  await setDoc(unitRef, newUnit);\n  \n  // Update cache\n  if (unitsCache) {\n    unitsCache.push(newUnit);\n  }\n  \n  return newUnit;\n}\n\nexport async function getUnits(): Promise<Unit[]> {\n  // Return from cache if available\n  if (unitsCache) {\n    return unitsCache;\n  }\n  \n  const snapshot = await getDocs(unitsCollection);\n  const units = snapshot.docs.map(doc => doc.data() as Unit);\n  \n  // Update cache\n  unitsCache = units;\n  \n  return units;\n}\n\nexport async function getUnit(unitId: string): Promise<Unit | null> {\n  // Check cache first\n  const cachedData = unitDataCache.get(unitId);\n  if (cachedData?.unit) {\n    return cachedData.unit;\n  }\n  \n  const unitRef = doc(unitsCollection, unitId);\n  const unitSnap = await getDoc(unitRef);\n  \n  if (unitSnap.exists()) {\n    const unit = unitSnap.data() as Unit;\n    \n    // Update cache\n    if (!unitDataCache.has(unitId)) {\n      unitDataCache.set(unitId, {\n        unit,\n        patients: [],\n        nurses: [],\n        pcts: [],\n        chargeNurse: null,\n        unitClerk: null\n      });\n    } else {\n      unitDataCache.get(unitId)!.unit = unit;\n    }\n    \n    return unit;\n  }\n  \n  return null;\n}\n\nexport async function updateUnit(unitId: string, data: Partial<Unit>): Promise<void> {\n  const unitRef = doc(unitsCollection, unitId);\n  const updateData = {\n    ...data,\n    updatedAt: Date.now()\n  };\n  \n  await updateDoc(unitRef, updateData);\n  \n  // Update cache\n  if (unitsCache) {\n    const index = unitsCache.findIndex(u => u.id === unitId);\n    if (index !== -1) {\n      unitsCache[index] = { ...unitsCache[index], ...updateData };\n    }\n  }\n  \n  if (unitDataCache.has(unitId) && unitDataCache.get(unitId)!.unit) {\n    unitDataCache.get(unitId)!.unit = { \n      ...unitDataCache.get(unitId)!.unit!, \n      ...updateData \n    };\n  }\n}\n\nexport async function deleteUnit(unitId: string): Promise<void> {\n  const unitRef = doc(unitsCollection, unitId);\n  await deleteDoc(unitRef);\n  \n  // Delete related data\n  await deleteUnitPatients(unitId);\n  await deleteUnitNurses(unitId);\n  await deleteUnitPCTs(unitId);\n  await deleteUnitStaff(unitId);\n  \n  // Update cache\n  if (unitsCache) {\n    unitsCache = unitsCache.filter(u => u.id !== unitId);\n  }\n  \n  unitDataCache.delete(unitId);\n}\n\n// Patient Functions\nexport async function createPatient(patientData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {\n  const timestamp = Date.now();\n  const patientRef = doc(patientsCollection);\n  const newPatient: Patient = {\n    ...patientData,\n    id: patientRef.id,\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n  \n  await setDoc(patientRef, newPatient);\n  \n  // Update cache\n  if (unitDataCache.has(patientData.unitId)) {\n    unitDataCache.get(patientData.unitId)!.patients.push(newPatient);\n  }\n  \n  return newPatient;\n}\n\n// Batch create patients for better performance\nexport async function batchCreatePatients(patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Patient[]> {\n  const timestamp = Date.now();\n  const batch = writeBatch(db);\n  const newPatients: Patient[] = [];\n  \n  for (const patientData of patientsData) {\n    const patientRef = doc(patientsCollection);\n    const newPatient: Patient = {\n      ...patientData,\n      id: patientRef.id,\n      createdAt: timestamp,\n      updatedAt: timestamp\n    };\n    \n    batch.set(patientRef, newPatient);\n    newPatients.push(newPatient);\n    \n    // Update cache\n    if (unitDataCache.has(patientData.unitId)) {\n      unitDataCache.get(patientData.unitId)!.patients.push(newPatient);\n    }\n  }\n  \n  await batch.commit();\n  return newPatients;\n}\n\nexport async function getPatientsByUnit(unitId: string): Promise<Patient[]> {\n  // Check cache first\n  const cachedData = unitDataCache.get(unitId);\n  if (cachedData?.patients.length > 0) {\n    return cachedData.patients;\n  }\n  \n  const q = query(patientsCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  const patients = snapshot.docs.map(doc => doc.data() as Patient);\n  \n  // Update cache\n  if (!unitDataCache.has(unitId)) {\n    unitDataCache.set(unitId, {\n      unit: null,\n      patients,\n      nurses: [],\n      pcts: [],\n      chargeNurse: null,\n      unitClerk: null\n    });\n  } else {\n    unitDataCache.get(unitId)!.patients = patients;\n  }\n  \n  return patients;\n}\n\nexport async function updatePatient(patientId: string, data: Partial<Patient>): Promise<void> {\n  const patientRef = doc(patientsCollection, patientId);\n  const updateData = {\n    ...data,\n    updatedAt: Date.now()\n  };\n  \n  await updateDoc(patientRef, updateData);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    const index = cachedData.patients.findIndex(p => p.id === patientId);\n    if (index !== -1) {\n      cachedData.patients[index] = { ...cachedData.patients[index], ...updateData };\n      break;\n    }\n  }\n}\n\n// Batch update patients for better performance\nexport async function batchUpdatePatients(updates: { id: string, data: Partial<Patient> }[]): Promise<void> {\n  const batch = writeBatch(db);\n  const timestamp = Date.now();\n  \n  for (const { id, data } of updates) {\n    const patientRef = doc(patientsCollection, id);\n    batch.update(patientRef, { ...data, updatedAt: timestamp });\n    \n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()) {\n      const index = cachedData.patients.findIndex(p => p.id === id);\n      if (index !== -1) {\n        cachedData.patients[index] = { \n          ...cachedData.patients[index], \n          ...data,\n          updatedAt: timestamp\n        };\n        break;\n      }\n    }\n  }\n  \n  await batch.commit();\n}\n\nexport async function deletePatient(patientId: string): Promise<void> {\n  const patientRef = doc(patientsCollection, patientId);\n  await deleteDoc(patientRef);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    cachedData.patients = cachedData.patients.filter(p => p.id !== patientId);\n  }\n}\n\nexport async function deleteUnitPatients(unitId: string): Promise<void> {\n  const q = query(patientsCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  \n  const batch = writeBatch(db);\n  snapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  \n  await batch.commit();\n  \n  // Update cache\n  if (unitDataCache.has(unitId)) {\n    unitDataCache.get(unitId)!.patients = [];\n  }\n}\n\n// Nurse Functions\nexport async function createNurse(nurseData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>): Promise<Nurse> {\n  const timestamp = Date.now();\n  const nurseRef = doc(nursesCollection);\n  const newNurse: Nurse = {\n    ...nurseData,\n    id: nurseRef.id,\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n  \n  await setDoc(nurseRef, newNurse);\n  \n  // Update cache\n  if (unitDataCache.has(nurseData.unitId)) {\n    unitDataCache.get(nurseData.unitId)!.nurses.push(newNurse);\n  }\n  \n  return newNurse;\n}\n\n// Batch create nurses for better performance\nexport async function batchCreateNurses(nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Nurse[]> {\n  const timestamp = Date.now();\n  const batch = writeBatch(db);\n  const newNurses: Nurse[] = [];\n  \n  for (const nurseData of nursesData) {\n    const nurseRef = doc(nursesCollection);\n    const newNurse: Nurse = {\n      ...nurseData,\n      id: nurseRef.id,\n      createdAt: timestamp,\n      updatedAt: timestamp\n    };\n    \n    batch.set(nurseRef, newNurse);\n    newNurses.push(newNurse);\n    \n    // Update cache\n    if (unitDataCache.has(nurseData.unitId)) {\n      unitDataCache.get(nurseData.unitId)!.nurses.push(newNurse);\n    }\n  }\n  \n  await batch.commit();\n  return newNurses;\n}\n\nexport async function getNursesByUnit(unitId: string): Promise<Nurse[]> {\n  // Check cache first\n  const cachedData = unitDataCache.get(unitId);\n  if (cachedData?.nurses.length > 0) {\n    return cachedData.nurses;\n  }\n  \n  const q = query(nursesCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  const nurses = snapshot.docs.map(doc => doc.data() as Nurse);\n  \n  // Update cache\n  if (!unitDataCache.has(unitId)) {\n    unitDataCache.set(unitId, {\n      unit: null,\n      patients: [],\n      nurses,\n      pcts: [],\n      chargeNurse: null,\n      unitClerk: null\n    });\n  } else {\n    unitDataCache.get(unitId)!.nurses = nurses;\n  }\n  \n  return nurses;\n}\n\nexport async function updateNurse(nurseId: string, data: Partial<Nurse>): Promise<void> {\n  const nurseRef = doc(nursesCollection, nurseId);\n  const updateData = {\n    ...data,\n    updatedAt: Date.now()\n  };\n  \n  await updateDoc(nurseRef, updateData);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    const index = cachedData.nurses.findIndex(n => n.id === nurseId);\n    if (index !== -1) {\n      cachedData.nurses[index] = { ...cachedData.nurses[index], ...updateData };\n      break;\n    }\n  }\n}\n\nexport async function deleteNurse(nurseId: string): Promise<void> {\n  const nurseRef = doc(nursesCollection, nurseId);\n  await deleteDoc(nurseRef);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    cachedData.nurses = cachedData.nurses.filter(n => n.id !== nurseId);\n  }\n}\n\nexport async function deleteUnitNurses(unitId: string): Promise<void> {\n  const q = query(nursesCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  \n  const batch = writeBatch(db);\n  snapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  \n  await batch.commit();\n  \n  // Update cache\n  if (unitDataCache.has(unitId)) {\n    unitDataCache.get(unitId)!.nurses = [];\n  }\n}\n\n// PCT Functions\nexport async function createPCT(pctData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>): Promise<PCT> {\n  const timestamp = Date.now();\n  const pctRef = doc(pctsCollection);\n  const newPCT: PCT = {\n    ...pctData,\n    id: pctRef.id,\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n  \n  await setDoc(pctRef, newPCT);\n  \n  // Update cache\n  if (unitDataCache.has(pctData.unitId)) {\n    unitDataCache.get(pctData.unitId)!.pcts.push(newPCT);\n  }\n  \n  return newPCT;\n}\n\n// Batch create PCTs for better performance\nexport async function batchCreatePCTs(pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<PCT[]> {\n  const timestamp = Date.now();\n  const batch = writeBatch(db);\n  const newPCTs: PCT[] = [];\n  \n  for (const pctData of pctsData) {\n    const pctRef = doc(pctsCollection);\n    const newPCT: PCT = {\n      ...pctData,\n      id: pctRef.id,\n      createdAt: timestamp,\n      updatedAt: timestamp\n    };\n    \n    batch.set(pctRef, newPCT);\n    newPCTs.push(newPCT);\n    \n    // Update cache\n    if (unitDataCache.has(pctData.unitId)) {\n      unitDataCache.get(pctData.unitId)!.pcts.push(newPCT);\n    }\n  }\n  \n  await batch.commit();\n  return newPCTs;\n}\n\nexport async function getPCTsByUnit(unitId: string): Promise<PCT[]> {\n  // Check cache first\n  const cachedData = unitDataCache.get(unitId);\n  if (cachedData?.pcts.length > 0) {\n    return cachedData.pcts;\n  }\n  \n  const q = query(pctsCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  const pcts = snapshot.docs.map(doc => doc.data() as PCT);\n  \n  // Update cache\n  if (!unitDataCache.has(unitId)) {\n    unitDataCache.set(unitId, {\n      unit: null,\n      patients: [],\n      nurses: [],\n      pcts,\n      chargeNurse: null,\n      unitClerk: null\n    });\n  } else {\n    unitDataCache.get(unitId)!.pcts = pcts;\n  }\n  \n  return pcts;\n}\n\nexport async function updatePCT(pctId: string, data: Partial<PCT>): Promise<void> {\n  const pctRef = doc(pctsCollection, pctId);\n  const updateData = {\n    ...data,\n    updatedAt: Date.now()\n  };\n  \n  await updateDoc(pctRef, updateData);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    const index = cachedData.pcts.findIndex(p => p.id === pctId);\n    if (index !== -1) {\n      cachedData.pcts[index] = { ...cachedData.pcts[index], ...updateData };\n      break;\n    }\n  }\n}\n\nexport async function deletePCT(pctId: string): Promise<void> {\n  const pctRef = doc(pctsCollection, pctId);\n  await deleteDoc(pctRef);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    cachedData.pcts = cachedData.pcts.filter(p => p.id !== pctId);\n  }\n}\n\nexport async function deleteUnitPCTs(unitId: string): Promise<void> {\n  const q = query(pctsCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  \n  const batch = writeBatch(db);\n  snapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  \n  await batch.commit();\n  \n  // Update cache\n  if (unitDataCache.has(unitId)) {\n    unitDataCache.get(unitId)!.pcts = [];\n  }\n}\n\n// Staff Functions\nexport async function createStaffMember(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>): Promise<StaffMember> {\n  const timestamp = Date.now();\n  const staffRef = doc(staffCollection);\n  const newStaff: StaffMember = {\n    ...staffData,\n    id: staffRef.id,\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n  \n  await setDoc(staffRef, newStaff);\n  \n  // Update cache\n  if (unitDataCache.has(staffData.unitId)) {\n    if (staffData.role === 'chargeNurse') {\n      unitDataCache.get(staffData.unitId)!.chargeNurse = newStaff;\n    } else if (staffData.role === 'unitClerk') {\n      unitDataCache.get(staffData.unitId)!.unitClerk = newStaff;\n    }\n  }\n  \n  return newStaff;\n}\n\n// Batch create staff members for better performance\nexport async function batchCreateStaffMembers(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<StaffMember[]> {\n  const timestamp = Date.now();\n  const batch = writeBatch(db);\n  const newStaffMembers: StaffMember[] = [];\n  \n  for (const staffMemberData of staffData) {\n    const staffRef = doc(staffCollection);\n    const newStaff: StaffMember = {\n      ...staffMemberData,\n      id: staffRef.id,\n      createdAt: timestamp,\n      updatedAt: timestamp\n    };\n    \n    batch.set(staffRef, newStaff);\n    newStaffMembers.push(newStaff);\n    \n    // Update cache\n    if (unitDataCache.has(staffMemberData.unitId)) {\n      if (staffMemberData.role === 'chargeNurse') {\n        unitDataCache.get(staffMemberData.unitId)!.chargeNurse = newStaff;\n      } else if (staffMemberData.role === 'unitClerk') {\n        unitDataCache.get(staffMemberData.unitId)!.unitClerk = newStaff;\n      }\n    }\n  }\n  \n  await batch.commit();\n  return newStaffMembers;\n}\n\nexport async function getStaffByUnit(unitId: string): Promise<StaffMember[]> {\n  const q = query(staffCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  return snapshot.docs.map(doc => doc.data() as StaffMember);\n}\n\nexport async function getStaffByUnitAndRole(unitId: string, role: 'chargeNurse' | 'unitClerk'): Promise<StaffMember | null> {\n  // Check cache first\n  const cachedData = unitDataCache.get(unitId);\n  if (role === 'chargeNurse' && cachedData?.chargeNurse) {\n    return cachedData.chargeNurse;\n  } else if (role === 'unitClerk' && cachedData?.unitClerk) {\n    return cachedData.unitClerk;\n  }\n  \n  const q = query(staffCollection, where('unitId', '==', unitId), where('role', '==', role));\n  const snapshot = await getDocs(q);\n  \n  if (snapshot.empty) {\n    return null;\n  }\n  \n  const staffMember = snapshot.docs[0].data() as StaffMember;\n  \n  // Update cache\n  if (!unitDataCache.has(unitId)) {\n    unitDataCache.set(unitId, {\n      unit: null,\n      patients: [],\n      nurses: [],\n      pcts: [],\n      chargeNurse: role === 'chargeNurse' ? staffMember : null,\n      unitClerk: role === 'unitClerk' ? staffMember : null\n    });\n  } else {\n    if (role === 'chargeNurse') {\n      unitDataCache.get(unitId)!.chargeNurse = staffMember;\n    } else if (role === 'unitClerk') {\n      unitDataCache.get(unitId)!.unitClerk = staffMember;\n    }\n  }\n  \n  return staffMember;\n}\n\nexport async function updateStaffMember(staffId: string, data: Partial<StaffMember>): Promise<void> {\n  const staffRef = doc(staffCollection, staffId);\n  const updateData = {\n    ...data,\n    updatedAt: Date.now()\n  };\n  \n  await updateDoc(staffRef, updateData);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    if (cachedData.chargeNurse?.id === staffId) {\n      cachedData.chargeNurse = { ...cachedData.chargeNurse, ...updateData };\n    } else if (cachedData.unitClerk?.id === staffId) {\n      cachedData.unitClerk = { ...cachedData.unitClerk, ...updateData };\n    }\n  }\n}\n\nexport async function deleteStaffMember(staffId: string): Promise<void> {\n  const staffRef = doc(staffCollection, staffId);\n  await deleteDoc(staffRef);\n  \n  // Update cache\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\n    if (cachedData.chargeNurse?.id === staffId) {\n      cachedData.chargeNurse = null;\n    } else if (cachedData.unitClerk?.id === staffId) {\n      cachedData.unitClerk = null;\n    }\n  }\n}\n\nexport async function deleteUnitStaff(unitId: string): Promise<void> {\n  const q = query(staffCollection, where('unitId', '==', unitId));\n  const snapshot = await getDocs(q);\n  \n  const batch = writeBatch(db);\n  snapshot.docs.forEach(doc => {\n    batch.delete(doc.ref);\n  });\n  \n  await batch.commit();\n  \n  // Update cache\n  if (unitDataCache.has(unitId)) {\n    unitDataCache.get(unitId)!.chargeNurse = null;\n    unitDataCache.get(unitId)!.unitClerk = null;\n  }\n}\n\n// Module Functions\nexport async function getModules(): Promise<Module[]> {\n  const snapshot = await getDocs(modulesCollection);\n  return snapshot.docs.map(doc => doc.data() as Module);\n}\n\nexport async function updateModule(moduleId: string, enabled: boolean): Promise<void> {\n  const moduleRef = doc(modulesCollection, moduleId);\n  await updateDoc(moduleRef, {\n    enabled,\n    updatedAt: Date.now()\n  });\n}\n\nexport async function initializeModules(modules: Omit<Module, 'updatedAt'>[]): Promise<void> {\n  const timestamp = Date.now();\n  const batch = writeBatch(db);\n  \n  for (const module of modules) {\n    const moduleRef = doc(modulesCollection, module.id);\n    const moduleSnap = await getDoc(moduleRef);\n    \n    if (!moduleSnap.exists()) {\n      batch.set(moduleRef, {\n        ...module,\n        updatedAt: timestamp\n      });\n    }\n  }\n  \n  await batch.commit();\n}\n\n// Initialize default modules if they don't exist\nexport async function setupDefaultModules(): Promise<void> {\n  const defaultModules: Omit<Module, 'updatedAt'>[] = [\n    { id: 'mock-patient', name: 'Mock Patient Data', description: 'Generate mock patient data for testing', enabled: true },\n    { id: 'spectra-pool', name: 'Spectra Pool Management', description: 'Manage spectra pool assignments', enabled: false },\n    { id: 'acuity-tracking', name: 'Acuity Tracking', description: 'Track and manage patient acuity levels', enabled: true },\n    { id: 'bed-management', name: 'Bed Management', description: 'Track bed availability and assignments', enabled: true },\n    { id: 'staff-messaging', name: 'Staff Messaging', description: 'Internal messaging system for staff', enabled: false }\n  ];\n  \n  await initializeModules(defaultModules);\n}\n\n// Optimized function to load all unit data at once\nexport async function loadUnitData(unitId: string): Promise<{\n  unit: Unit | null,\n  patients: Patient[],\n  nurses: Nurse[],\n  pcts: PCT[],\n  chargeNurse: StaffMember | null,\n  unitClerk: StaffMember | null\n}> {\n  // Check cache first\n  if (unitDataCache.has(unitId)) {\n    const cachedData = unitDataCache.get(unitId)!;\n    \n    // If we have complete data in cache, return it\n    if (cachedData.unit && \n        (cachedData.patients.length > 0 || \n         cachedData.nurses.length > 0 || \n         cachedData.pcts.length > 0)) {\n      return cachedData;\n    }\n  }\n  \n  // Load all data in parallel\n  const [unit, patients, nurses, pcts, staffMembers] = await Promise.all([\n    getUnit(unitId),\n    getPatientsByUnit(unitId),\n    getNursesByUnit(unitId),\n    getPCTsByUnit(unitId),\n    getStaffByUnit(unitId)\n  ]);\n  \n  // Process staff members\n  let chargeNurse: StaffMember | null = null;\n  let unitClerk: StaffMember | null = null;\n  \n  for (const staff of staffMembers) {\n    if (staff.role === 'chargeNurse') {\n      chargeNurse = staff;\n    } else if (staff.role === 'unitClerk') {\n      unitClerk = staff;\n    }\n  }\n  \n  // Update cache\n  const unitData = {\n    unit,\n    patients,\n    nurses,\n    pcts,\n    chargeNurse,\n    unitClerk\n  };\n  \n  unitDataCache.set(unitId, unitData);\n  \n  return unitData;\n}\n\n// Optimized function to initialize unit data with batch operations\nexport async function initializeUnitData(unit: Unit): Promise<{\n  patients: Patient[],\n  nurses: Nurse[],\n  pcts: PCT[],\n  chargeNurse: StaffMember | null,\n  unitClerk: StaffMember | null\n}> {\n  // Generate all the data first\n  const patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n  const nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n  const pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n  const staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[] = [];\n  \n  // Generate patient data\n  for (const range of unit.roomRanges) {\n    const [start, end] = range.split('-').map(num => parseInt(num, 10));\n    for (let roomNum = start; roomNum <= end; roomNum++) {\n      patientsData.push({\n        unitId: unit.id,\n        roomNumber: roomNum.toString(),\n        name: '',\n        acuity: Math.floor(Math.random() * 5) + 1, // Random acuity 1-5\n        assigned: false\n      });\n    }\n  }\n  \n  // Generate nurse data\n  for (let i = 0; i < unit.nurseCardCount; i++) {\n    nursesData.push({\n      unitId: unit.id,\n      name: `Nurse ${i + 1}`,\n      spectraNumber: `SN${10000 + i}`,\n      reliefName: '',\n      assignedRooms: [],\n      acuityCapacity: 12\n    });\n  }\n  \n  // Generate PCT data\n  for (let i = 0; i < unit.pctCardCount; i++) {\n    // Divide room ranges among PCTs\n    const rangeIndex = i % unit.roomRanges.length;\n    const [start, end] = unit.roomRanges[rangeIndex].split('-').map(num => parseInt(num, 10));\n    const rangeSize = end - start + 1;\n    const pctRangeSize = Math.ceil(rangeSize / unit.pctCardCount);\n    \n    const pctStart = start + (i * pctRangeSize);\n    const pctEnd = Math.min(pctStart + pctRangeSize - 1, end);\n    \n    pctsData.push({\n      unitId: unit.id,\n      name: `PCT ${i + 1}`,\n      spectraNumber: `PCT${10000 + i}`,\n      reliefName: '',\n      roomRange: `${pctStart}-${pctEnd}`\n    });\n  }\n  \n  // Generate staff data\n  if (unit.hasChargeNurse) {\n    staffData.push({\n      unitId: unit.id,\n      name: '',\n      spectraNumber: '',\n      role: 'chargeNurse'\n    });\n  }\n  \n  if (unit.hasUnitClerk) {\n    staffData.push({\n      unitId: unit.id,\n      name: '',\n      spectraNumber: '',\n      role: 'unitClerk'\n    });\n  }\n  \n  // Create all data in parallel using batch operations\n  const [patients, nurses, pcts, staffMembers] = await Promise.all([\n    batchCreatePatients(patientsData),\n    batchCreateNurses(nursesData),\n    batchCreatePCTs(pctsData),\n    batchCreateStaffMembers(staffData)\n  ]);\n  \n  // Process staff members\n  let chargeNurse: StaffMember | null = null;\n  let unitClerk: StaffMember | null = null;\n  \n  for (const staff of staffMembers) {\n    if (staff.role === 'chargeNurse') {\n      chargeNurse = staff;\n    } else if (staff.role === 'unitClerk') {\n      unitClerk = staff;\n    }\n  }\n  \n  return {\n    patients,\n    nurses,\n    pcts,\n    chargeNurse,\n    unitClerk\n  };\n}\n\n// Clear cache (useful for testing or when user logs out)\nexport function clearCache(): void {\n  unitsCache = null;\n  unitDataCache.clear();\n}\n\nexport { app, db, storage, auth };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/shared/patient-grid-optimized.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { NurseCard } from '@/components/shared/nurse-card';\nimport { PCTCard } from '@/components/shared/pct-card';\nimport { StaffCard } from '@/components/shared/staff-card';\nimport { \n  loadUnitData,\n  initializeUnitData,\n  updatePatient,\n  updateNurse,\n  updatePCT,\n  updateStaffMember,\n  batchUpdatePatients,\n  Unit,\n  Patient,\n  Nurse,\n  PCT,\n  StaffMember\n} from '@/lib/firebase-optimized';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface PatientGridProps {\n  unitId: string;\n}\n\nexport function PatientGrid({ unitId }: PatientGridProps) {\n  const [unit, setUnit] = useState<Unit | null>(null);\n  const [patients, setPatients] = useState<Patient[]>([]);\n  const [nurses, setNurses] = useState<Nurse[]>([]);\n  const [pcts, setPCTs] = useState<PCT[]>([]);\n  const [chargeNurse, setChargeNurse] = useState<StaffMember | null>(null);\n  const [unitClerk, setUnitClerk] = useState<StaffMember | null>(null);\n  const [editMode, setEditMode] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [initializing, setInitializing] = useState(false);\n  const [pendingChanges, setPendingChanges] = useState<{\n    patients: { [id: string]: Partial<Patient> },\n    nurses: { [id: string]: Partial<Nurse> },\n    pcts: { [id: string]: Partial<PCT> },\n    staff: { [id: string]: Partial<StaffMember> }\n  }>({\n    patients: {},\n    nurses: {},\n    pcts: {},\n    staff: {}\n  });\n  \n  // Load unit data and associated staff/patients\n  useEffect(() => {\n    const loadData = async () => {\n      if (!unitId) return;\n      \n      try {\n        setLoading(true);\n        \n        // Load all unit data at once using the optimized function\n        const unitData = await loadUnitData(unitId);\n        \n        if (!unitData.unit) {\n          toast({\n            title: 'Error',\n            description: 'Unit not found',\n            variant: 'destructive',\n          });\n          return;\n        }\n        \n        setUnit(unitData.unit);\n        setPatients(unitData.patients);\n        setNurses(unitData.nurses);\n        setPCTs(unitData.pcts);\n        setChargeNurse(unitData.chargeNurse);\n        setUnitClerk(unitData.unitClerk);\n        \n        // If no data exists yet, we need to initialize the unit\n        if (unitData.patients.length === 0 && unitData.nurses.length === 0) {\n          setInitializing(true);\n          const initializedData = await initializeUnitData(unitData.unit);\n          setPatients(initializedData.patients);\n          setNurses(initializedData.nurses);\n          setPCTs(initializedData.pcts);\n          setChargeNurse(initializedData.chargeNurse);\n          setUnitClerk(initializedData.unitClerk);\n          setInitializing(false);\n          \n          toast({\n            title: 'Unit Initialized',\n            description: 'Unit data has been created successfully',\n          });\n        }\n      } catch (error) {\n        console.error('Error loading unit data:', error);\n        toast({\n          title: 'Error',\n          description: 'Failed to load unit data',\n          variant: 'destructive',\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [unitId]);\n  \n  // Memoized list of unassigned patients for better performance\n  const unassignedPatients = useMemo(() => {\n    return patients.filter(p => !p.assigned);\n  }, [patients]);\n  \n  // Optimistic UI update for patient assignment\n  const handleAssignPatient = useCallback(async (nurseId: string, patientId: string) => {\n    try {\n      // Find the nurse and patient\n      const nurse = nurses.find(n => n.id === nurseId);\n      const patient = patients.find(p => p.id === patientId);\n      \n      if (!nurse || !patient) return;\n      \n      // Update nurse assignments (optimistic update)\n      const updatedAssignedRooms = [...nurse.assignedRooms];\n      if (!updatedAssignedRooms.includes(patient.roomNumber)) {\n        updatedAssignedRooms.push(patient.roomNumber);\n        updatedAssignedRooms.sort((a, b) => parseInt(a) - parseInt(b));\n      }\n      \n      // Update local state immediately (optimistic update)\n      setNurses(nurses.map(n => \n        n.id === nurseId ? { ...n, assignedRooms: updatedAssignedRooms } : n\n      ));\n      \n      setPatients(patients.map(p => \n        p.id === patientId ? { ...p, assigned: true } : p\n      ));\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        nurses: {\n          ...prev.nurses,\n          [nurseId]: { assignedRooms: updatedAssignedRooms }\n        },\n        patients: {\n          ...prev.patients,\n          [patientId]: { assigned: true }\n        }\n      }));\n      \n      // Update in database\n      await Promise.all([\n        updateNurse(nurseId, { assignedRooms: updatedAssignedRooms }),\n        updatePatient(patientId, { assigned: true })\n      ]);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\n        const { [patientId]: __, ...remainingPatients } = prev.patients;\n        return {\n          ...prev,\n          nurses: remainingNurses,\n          patients: remainingPatients\n        };\n      });\n    } catch (error) {\n      console.error('Error assigning patient:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to assign patient. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [nurses, patients]);\n  \n  // Optimistic UI update for patient unassignment\n  const handleUnassignPatient = useCallback(async (nurseId: string, roomNumber: string) => {\n    try {\n      // Find the nurse and patient\n      const nurse = nurses.find(n => n.id === nurseId);\n      const patient = patients.find(p => p.roomNumber === roomNumber);\n      \n      if (!nurse || !patient) return;\n      \n      // Update nurse assignments (optimistic update)\n      const updatedAssignedRooms = nurse.assignedRooms.filter(room => room !== roomNumber);\n      \n      // Update local state immediately (optimistic update)\n      setNurses(nurses.map(n => \n        n.id === nurseId ? { ...n, assignedRooms: updatedAssignedRooms } : n\n      ));\n      \n      setPatients(patients.map(p => \n        p.roomNumber === roomNumber ? { ...p, assigned: false } : p\n      ));\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        nurses: {\n          ...prev.nurses,\n          [nurseId]: { assignedRooms: updatedAssignedRooms }\n        },\n        patients: {\n          ...prev.patients,\n          [patient.id]: { assigned: false }\n        }\n      }));\n      \n      // Update in database\n      await Promise.all([\n        updateNurse(nurseId, { assignedRooms: updatedAssignedRooms }),\n        updatePatient(patient.id, { assigned: false })\n      ]);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\n        const { [patient.id]: __, ...remainingPatients } = prev.patients;\n        return {\n          ...prev,\n          nurses: remainingNurses,\n          patients: remainingPatients\n        };\n      });\n    } catch (error) {\n      console.error('Error unassigning patient:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to unassign patient. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [nurses, patients]);\n  \n  // Optimistic UI update for nurse information\n  const handleUpdateNurse = useCallback(async (nurseId: string, data: Partial<Nurse>) => {\n    try {\n      // Update local state immediately (optimistic update)\n      setNurses(nurses.map(nurse => \n        nurse.id === nurseId ? { ...nurse, ...data } : nurse\n      ));\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        nurses: {\n          ...prev.nurses,\n          [nurseId]: { ...prev.nurses[nurseId], ...data }\n        }\n      }));\n      \n      // Update in database\n      await updateNurse(nurseId, data);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\n        return {\n          ...prev,\n          nurses: remainingNurses\n        };\n      });\n      \n      toast({\n        title: 'Nurse Updated',\n        description: 'Nurse information has been updated',\n      });\n    } catch (error) {\n      console.error('Error updating nurse:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update nurse information. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [nurses]);\n  \n  // Optimistic UI update for PCT information\n  const handleUpdatePCT = useCallback(async (pctId: string, data: Partial<PCT>) => {\n    try {\n      // Update local state immediately (optimistic update)\n      setPCTs(pcts.map(pct => \n        pct.id === pctId ? { ...pct, ...data } : pct\n      ));\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        pcts: {\n          ...prev.pcts,\n          [pctId]: { ...prev.pcts[pctId], ...data }\n        }\n      }));\n      \n      // Update in database\n      await updatePCT(pctId, data);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [pctId]: _, ...remainingPCTs } = prev.pcts;\n        return {\n          ...prev,\n          pcts: remainingPCTs\n        };\n      });\n      \n      toast({\n        title: 'PCT Updated',\n        description: 'PCT information has been updated',\n      });\n    } catch (error) {\n      console.error('Error updating PCT:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update PCT information. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [pcts]);\n  \n  // Optimistic UI update for charge nurse information\n  const handleUpdateChargeNurse = useCallback(async (data: Partial<StaffMember>) => {\n    try {\n      if (!chargeNurse) return;\n      \n      // Update local state immediately (optimistic update)\n      setChargeNurse({ ...chargeNurse, ...data });\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        staff: {\n          ...prev.staff,\n          [chargeNurse.id]: { ...prev.staff[chargeNurse.id], ...data }\n        }\n      }));\n      \n      // Update in database\n      await updateStaffMember(chargeNurse.id, data);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [chargeNurse.id]: _, ...remainingStaff } = prev.staff;\n        return {\n          ...prev,\n          staff: remainingStaff\n        };\n      });\n      \n      toast({\n        title: 'Charge Nurse Updated',\n        description: 'Charge nurse information has been updated',\n      });\n    } catch (error) {\n      console.error('Error updating charge nurse:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update charge nurse information. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [chargeNurse]);\n  \n  // Optimistic UI update for unit clerk information\n  const handleUpdateUnitClerk = useCallback(async (data: Partial<StaffMember>) => {\n    try {\n      if (!unitClerk) return;\n      \n      // Update local state immediately (optimistic update)\n      setUnitClerk({ ...unitClerk, ...data });\n      \n      // Add to pending changes\n      setPendingChanges(prev => ({\n        ...prev,\n        staff: {\n          ...prev.staff,\n          [unitClerk.id]: { ...prev.staff[unitClerk.id], ...data }\n        }\n      }));\n      \n      // Update in database\n      await updateStaffMember(unitClerk.id, data);\n      \n      // Clear from pending changes after successful update\n      setPendingChanges(prev => {\n        const { [unitClerk.id]: _, ...remainingStaff } = prev.staff;\n        return {\n          ...prev,\n          staff: remainingStaff\n        };\n      });\n      \n      toast({\n        title: 'Unit Clerk Updated',\n        description: 'Unit clerk information has been updated',\n      });\n    } catch (error) {\n      console.error('Error updating unit clerk:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update unit clerk information. Changes will be saved when connection is restored.',\n        variant: 'destructive',\n      });\n    }\n  }, [unitClerk]);\n  \n  // Save all pending changes at once\n  const handleSaveLayout = useCallback(async () => {\n    try {\n      // Prepare batch updates\n      const patientUpdates = Object.entries(pendingChanges.patients).map(([id, data]) => ({\n        id,\n        data\n      }));\n      \n      // Apply all pending changes\n      if (patientUpdates.length > 0) {\n        await batchUpdatePatients(patientUpdates);\n      }\n      \n      // Apply individual updates for nurses, PCTs, and staff\n      await Promise.all([\n        ...Object.entries(pendingChanges.nurses).map(([id, data]) => \n          updateNurse(id, data)\n        ),\n        ...Object.entries(pendingChanges.pcts).map(([id, data]) => \n          updatePCT(id, data)\n        ),\n        ...Object.entries(pendingChanges.staff).map(([id, data]) => \n          updateStaffMember(id, data)\n        )\n      ]);\n      \n      // Clear all pending changes\n      setPendingChanges({\n        patients: {},\n        nurses: {},\n        pcts: {},\n        staff: {}\n      });\n      \n      setEditMode(false);\n      toast({\n        title: 'Layout Saved',\n        description: 'Unit layout has been saved successfully',\n      });\n    } catch (error) {\n      console.error('Error saving layout:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to save some changes. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  }, [pendingChanges]);\n  \n  // Check if there are any pending changes\n  const hasPendingChanges = useMemo(() => {\n    return Object.keys(pendingChanges.patients).length > 0 ||\n           Object.keys(pendingChanges.nurses).length > 0 ||\n           Object.keys(pendingChanges.pcts).length > 0 ||\n           Object.keys(pendingChanges.staff).length > 0;\n  }, [pendingChanges]);\n  \n  if (loading || initializing) {\n    return (\n      <div className=\"bg-white rounded-lg border p-4 flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3\"></div>\n          <p className=\"text-gray-600\">{initializing ? 'Initializing unit data...' : 'Loading...'}</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!unit) {\n    return (\n      <div className=\"bg-white rounded-lg border p-4\">\n        <p className=\"text-center text-gray-500\">Unit not found</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"bg-white rounded-lg border p-4\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-xl font-semibold\">{unit.designation} Patient Grid</h3>\n        <div className=\"flex gap-2\">\n          {hasPendingChanges && (\n            <div className=\"text-amber-600 text-sm flex items-center\">\n              <span className=\"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1\"></span>\n              Unsaved changes\n            </div>\n          )}\n          <Button \n            variant={editMode ? \"default\" : \"outline\"} \n            onClick={() => editMode ? handleSaveLayout() : setEditMode(true)}\n          >\n            {editMode ? \"Save Layout\" : \"Edit Layout\"}\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {/* Unassigned Patients */}\n        <div className=\"border rounded-lg p-4\">\n          <h4 className=\"font-medium mb-3\">Unassigned Patients</h4>\n          <div className=\"space-y-2\">\n            {unassignedPatients.map(patient => (\n              <div key={patient.id} className=\"flex justify-between items-center p-2 border rounded bg-gray-50\">\n                <div>\n                  <span className=\"font-medium\">Room {patient.roomNumber}</span>\n                  {patient.name && <span className=\"ml-2 text-sm\">{patient.name}</span>}\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs ${\n                  patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\n                  patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\n                  'bg-green-100 text-green-800'\n                }`}>\n                  Acuity {patient.acuity}\n                </span>\n              </div>\n            ))}\n            {unassignedPatients.length === 0 && (\n              <p className=\"text-sm text-gray-500 italic\">All patients assigned</p>\n            )}\n          </div>\n        </div>\n        \n        {/* Nurse Cards */}\n        {nurses.map(nurse => (\n          <NurseCard\n            key={nurse.id}\n            nurse={nurse}\n            patients={patients}\n            onAssign={(patientId) => handleAssignPatient(nurse.id, patientId)}\n            onUnassign={(roomNumber) => handleUnassignPatient(nurse.id, roomNumber)}\n            onUpdate={(data) => handleUpdateNurse(nurse.id, data)}\n            editMode={editMode}\n          />\n        ))}\n        \n        {/* PCT Cards */}\n        {pcts.map(pct => (\n          <PCTCard\n            key={pct.id}\n            pct={pct}\n            onUpdate={(data) => handleUpdatePCT(pct.id, data)}\n            editMode={editMode}\n          />\n        ))}\n        \n        {/* Charge Nurse Card */}\n        {chargeNurse && (\n          <StaffCard\n            title=\"Charge Nurse\"\n            staffMember={chargeNurse}\n            onUpdate={handleUpdateChargeNurse}\n            editMode={editMode}\n            size=\"small\"\n          />\n        )}\n        \n        {/* Unit Clerk Card */}\n        {unitClerk && (\n          <StaffCard\n            title=\"Unit Clerk\"\n            staffMember={unitClerk}\n            onUpdate={handleUpdateUnitClerk}\n            editMode={editMode}\n            size=\"small\"\n          />\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2524, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-gray-200\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,wCAAwC;QACrD,GAAG,KAAK;;;;;;AAGf;KAVS","debugId":null}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/unitview_firebase/src/app/unitview/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, Suspense } from 'react';\nimport { PatientGrid } from '@/components/shared/patient-grid-optimized';\nimport { getUnits, Unit } from '@/lib/firebase-optimized';\nimport { toast } from '@/components/ui/use-toast';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Loading skeleton component\nfunction UnitViewSkeleton() {\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-6\">\n        <Skeleton className=\"h-8 w-48 mb-2\" />\n        <Skeleton className=\"h-4 w-96\" />\n      </div>\n      \n      <Skeleton className=\"h-10 w-full max-w-xs mb-6\" />\n      \n      <div className=\"bg-white rounded-lg shadow p-8\">\n        <div className=\"flex items-center justify-center h-[50vh]\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading units...</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// No units component\nfunction NoUnits() {\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n        <h1 className=\"text-3xl font-bold mb-4\">UnitView</h1>\n        <p className=\"text-gray-600 mb-6\">\n          No units have been created yet. Please go to Facility Setup to create a unit.\n        </p>\n        <a \n          href=\"/facility-setup\" \n          className=\"inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors\"\n        >\n          Go to Facility Setup\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default function UnitViewPage() {\n  const [units, setUnits] = useState<Unit[]>([]);\n  const [selectedUnit, setSelectedUnit] = useState<Unit | null>(null);\n  const [loading, setLoading] = useState(true);\n  \n  // Load units on component mount\n  useEffect(() => {\n    const loadUnits = async () => {\n      try {\n        setLoading(true);\n        const unitData = await getUnits();\n        setUnits(unitData);\n        \n        // Set selected unit to the first unit if available\n        if (unitData.length > 0 && !selectedUnit) {\n          setSelectedUnit(unitData[0]);\n        }\n      } catch (error) {\n        console.error('Error loading units:', error);\n        toast({\n          title: 'Error',\n          description: 'Failed to load units. Please try again.',\n          variant: 'destructive',\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadUnits();\n  }, []);\n  \n  if (loading) {\n    return <UnitViewSkeleton />;\n  }\n  \n  if (units.length === 0) {\n    return <NoUnits />;\n  }\n  \n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-4\">UnitView</h1>\n        <p className=\"text-gray-600\">\n          View and manage patient assignments for nursing units.\n        </p>\n      </div>\n      \n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium mb-2\">Select Unit</label>\n        <select \n          className=\"border rounded-md p-2 w-full max-w-xs\"\n          value={selectedUnit?.id || ''}\n          onChange={(e) => {\n            const unit = units.find(u => u.id === e.target.value);\n            if (unit) setSelectedUnit(unit);\n          }}\n        >\n          {units.map(unit => (\n            <option key={unit.id} value={unit.id}>\n              {unit.designation}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      <div className=\"bg-white rounded-lg shadow\">\n        <Suspense fallback={\n          <div className=\"p-8 flex items-center justify-center\">\n            <div className=\"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin\"></div>\n          </div>\n        }>\n          {selectedUnit ? (\n            <PatientGrid unitId={selectedUnit.id} />\n          ) : (\n            <div className=\"p-8 text-center\">\n              <p className=\"text-gray-500\">Please select a unit to view</p>\n            </div>\n          )}\n        </Suspense>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
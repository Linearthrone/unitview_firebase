(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[170],{1471:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>S});var a=s(5155),i=s(2115),r=s(285),n=s(8668),l=s(7118),d=s(2047),o=s(2732),c=s(8262);function u(e){let{unitId:t}=e,[s,u]=(0,i.useState)(null),[m,h]=(0,i.useState)([]),[p,g]=(0,i.useState)([]),[x,b]=(0,i.useState)([]),[f,v]=(0,i.useState)(null),[j,y]=(0,i.useState)(null),[N,w]=(0,i.useState)(!1),[C,k]=(0,i.useState)(!0),[E,R]=(0,i.useState)(!1),[S,U]=(0,i.useState)({patients:{},nurses:{},pcts:{},staff:{}});(0,i.useEffect)(()=>{(async()=>{if(t)try{k(!0);let e=await (0,o.HW)(t);if(!e.unit)return void(0,c.oR)({title:"Error",description:"Unit not found",variant:"destructive"});if(u(e.unit),h(e.patients),g(e.nurses),b(e.pcts),v(e.chargeNurse),y(e.unitClerk),0===e.patients.length&&0===e.nurses.length){R(!0);let t=await (0,o.ZW)(e.unit);h(t.patients),g(t.nurses),b(t.pcts),v(t.chargeNurse),y(t.unitClerk),R(!1),(0,c.oR)({title:"Unit Initialized",description:"Unit data has been created successfully"})}}catch(e){console.error("Error loading unit data:",e),(0,c.oR)({title:"Error",description:"Failed to load unit data",variant:"destructive"})}finally{k(!1)}})()},[t]);let P=(0,i.useMemo)(()=>m.filter(e=>!e.assigned),[m]),M=(0,i.useCallback)(async(e,t)=>{try{let s=p.find(t=>t.id===e),a=m.find(e=>e.id===t);if(!s||!a)return;let i=[...s.assignedRooms];i.includes(a.roomNumber)||(i.push(a.roomNumber),i.sort((e,t)=>parseInt(e)-parseInt(t))),g(p.map(t=>t.id===e?{...t,assignedRooms:i}:t)),h(m.map(e=>e.id===t?{...e,assigned:!0}:e)),U(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:i}},patients:{...s.patients,[t]:{assigned:!0}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:i}),(0,o.Z6)(t,{assigned:!0})]),U(s=>{let{[e]:a,...i}=s.nurses,{[t]:r,...n}=s.patients;return{...s,nurses:i,patients:n}})}catch(e){console.error("Error assigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[p,m]),A=(0,i.useCallback)(async(e,t)=>{try{let s=p.find(t=>t.id===e),a=m.find(e=>e.roomNumber===t);if(!s||!a)return;let i=s.assignedRooms.filter(e=>e!==t);g(p.map(t=>t.id===e?{...t,assignedRooms:i}:t)),h(m.map(e=>e.roomNumber===t?{...e,assigned:!1}:e)),U(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:i}},patients:{...t.patients,[a.id]:{assigned:!1}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:i}),(0,o.Z6)(a.id,{assigned:!1})]),U(t=>{let{[e]:s,...i}=t.nurses,{[a.id]:r,...n}=t.patients;return{...t,nurses:i,patients:n}})}catch(e){console.error("Error unassigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[p,m]),F=(0,i.useCallback)(async(e,t)=>{try{g(p.map(s=>s.id===e?{...s,...t}:s)),U(s=>({...s,nurses:{...s.nurses,[e]:{...s.nurses[e],...t}}})),await (0,o.Dr)(e,t),U(t=>{let{[e]:s,...a}=t.nurses;return{...t,nurses:a}}),(0,c.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[p]),B=(0,i.useCallback)(async(e,t)=>{try{b(x.map(s=>s.id===e?{...s,...t}:s)),U(s=>({...s,pcts:{...s.pcts,[e]:{...s.pcts[e],...t}}})),await (0,o.B5)(e,t),U(t=>{let{[e]:s,...a}=t.pcts;return{...t,pcts:a}}),(0,c.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,c.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[x]),I=(0,i.useCallback)(async e=>{try{if(!f)return;v({...f,...e}),U(t=>({...t,staff:{...t.staff,[f.id]:{...t.staff[f.id],...e}}})),await (0,o.e4)(f.id,e),U(e=>{let{[f.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[f]),D=(0,i.useCallback)(async e=>{try{if(!j)return;y({...j,...e}),U(t=>({...t,staff:{...t.staff,[j.id]:{...t.staff[j.id],...e}}})),await (0,o.e4)(j.id,e),U(e=>{let{[j.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,c.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[j]),O=(0,i.useCallback)(async()=>{try{let e=Object.entries(S.patients).map(e=>{let[t,s]=e;return{id:t,data:s}});e.length>0&&await (0,o.cT)(e),await Promise.all([...Object.entries(S.nurses).map(e=>{let[t,s]=e;return(0,o.Dr)(t,s)}),...Object.entries(S.pcts).map(e=>{let[t,s]=e;return(0,o.B5)(t,s)}),...Object.entries(S.staff).map(e=>{let[t,s]=e;return(0,o.e4)(t,s)})]),U({patients:{},nurses:{},pcts:{},staff:{}}),w(!1),(0,c.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,c.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[S]),J=(0,i.useMemo)(()=>Object.keys(S.patients).length>0||Object.keys(S.nurses).length>0||Object.keys(S.pcts).length>0||Object.keys(S.staff).length>0,[S]);return C||E?(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,a.jsx)("p",{className:"text-gray-600",children:E?"Initializing unit data...":"Loading..."})]})}):s?(0,a.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,a.jsxs)("h3",{className:"text-xl font-semibold",children:[s.designation," Patient Grid"]}),(0,a.jsxs)("div",{className:"flex gap-2",children:[J&&(0,a.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,a.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,a.jsx)(r.$,{variant:N?"default":"outline",onClick:()=>N?O():w(!0),children:N?"Save Layout":"Edit Layout"})]})]}),(0,a.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,a.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,a.jsxs)("div",{className:"space-y-2",children:[P.map(e=>(0,a.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,a.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,a.jsxs)("span",{className:"px-2 py-1 rounded-full text-xs ".concat(e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:["Acuity ",e.acuity]})]},e.id)),0===P.length&&(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),p.map(e=>(0,a.jsx)(n.c,{nurse:e,patients:m,onAssign:t=>M(e.id,t),onUnassign:t=>A(e.id,t),onUpdate:t=>F(e.id,t),editMode:N},e.id)),x.map(e=>(0,a.jsx)(l.I,{pct:e,onUpdate:t=>B(e.id,t),editMode:N},e.id)),f&&(0,a.jsx)(d.v,{title:"Charge Nurse",staffMember:f,onUpdate:I,editMode:N,size:"small"}),j&&(0,a.jsx)(d.v,{title:"Unit Clerk",staffMember:j,onUpdate:D,editMode:N,size:"small"})]})]}):(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,a.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}var m=s(3915),h=s(5317),p=s(7505),g=s(4903);let x=0===(0,m.Dk)().length?(0,m.Wp)({apiKey:"AIzaSyARvbAJtv-NBJnJQ3EdZNU3WsMnXThFzhM",authDomain:"unitview.firebaseapp.com",databaseURL:"https://unitview-default-rtdb.firebaseio.com",projectId:"unitview",storageBucket:"unitview.firebasestorage.app",messagingSenderId:"185648925766",appId:"1:185648925766:web:5ae6271dd4977f6e158e47"}):(0,m.Dk)()[0],b=(0,h._A)(x,{localCache:(0,h.vK)({cacheSizeBytes:h.H6,tabManager:(0,h.cY)()})});try{(0,h.ol)(b).catch(e=>{console.error("Firestore persistence error:",e)})}catch(e){console.warn("Firestore persistence already enabled or not supported")}(0,p.c7)(x),(0,g.xI)(x);let f=(0,h.rJ)(b,"units"),v=(0,h.rJ)(b,"patients"),j=(0,h.rJ)(b,"nurses"),y=(0,h.rJ)(b,"pcts"),N=(0,h.rJ)(b,"staff"),w=(0,h.rJ)(b,"modules"),C=null,k=new Map;async function E(){if(C)return C;let e=(await (0,h.GG)(f)).docs.map(e=>e.data());return C=e,e}async function R(e){let t=k.get(e);if((null==t?void 0:t.patients.length)>0)return t.patients;let s=(0,h.P)(v,(0,h._M)("unitId","==",e)),a=(await (0,h.GG)(s)).docs.map(e=>e.data());return k.has(e)?k.get(e).patients=a:k.set(e,{unit:null,patients:a,nurses:[],pcts:[],chargeNurse:null,unitClerk:null}),a}function S(){let[e,t]=(0,i.useState)([]),[s,n]=(0,i.useState)(null),[l,d]=(0,i.useState)(!0),[o,m]=(0,i.useState)({totalBeds:0,occupiedBeds:0,availableBeds:0,pendingAdmissions:0,pendingDischarges:0,highAcuityPatients:0});return((0,i.useEffect)(()=>{(async()=>{try{d(!0);let e=await E();t(e),e.length>0&&!s&&n(e[0])}catch(e){console.error("Error loading units:",e),(0,c.oR)({title:"Error",description:"Failed to load units. Please try again.",variant:"destructive"})}finally{d(!1)}})()},[]),(0,i.useEffect)(()=>{(async()=>{if(s)try{let e=await R(s.id),t=s.roomCount,a=e.filter(e=>e.assigned).length,i=Math.floor(3*Math.random()),r=Math.floor(4*Math.random()),n=e.filter(e=>e.acuity>=4).length;m({totalBeds:t,occupiedBeds:a,availableBeds:t-a,pendingAdmissions:i,pendingDischarges:r,highAcuityPatients:n})}catch(e){console.error("Error loading unit metrics:",e),(0,c.oR)({title:"Error",description:"Failed to load unit metrics",variant:"destructive"})}})()},[s]),l)?(0,a.jsx)("div",{className:"container mx-auto p-6 flex items-center justify-center h-[50vh]",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-16 h-16 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-4"}),(0,a.jsx)("p",{className:"text-gray-600",children:"Loading units..."})]})}):0===e.length?(0,a.jsx)("div",{className:"container mx-auto p-6",children:(0,a.jsxs)("div",{className:"bg-white rounded-lg shadow p-8 text-center",children:[(0,a.jsx)("h1",{className:"text-3xl font-bold mb-4",children:"ChargeView"}),(0,a.jsx)("p",{className:"text-gray-600 mb-6",children:"No units have been created yet. Please go to Facility Setup to create a unit."}),(0,a.jsx)("a",{href:"/facility-setup",className:"inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors",children:"Go to Facility Setup"})]})}):(0,a.jsxs)("div",{className:"container mx-auto p-6",children:[(0,a.jsxs)("div",{className:"mb-6",children:[(0,a.jsx)("h1",{className:"text-3xl font-bold mb-4",children:"ChargeView"}),(0,a.jsx)("p",{className:"text-gray-600",children:"Comprehensive view for charge nurses to manage unit operations."})]}),(0,a.jsxs)("div",{className:"mb-6",children:[(0,a.jsx)("label",{className:"block text-sm font-medium mb-2",children:"Select Unit"}),(0,a.jsx)("select",{className:"border rounded-md p-2 w-full max-w-xs",value:(null==s?void 0:s.id)||"",onChange:t=>{let s=e.find(e=>e.id===t.target.value);s&&n(s)},children:e.map(e=>(0,a.jsx)("option",{value:e.id,children:e.designation},e.id))})]}),s&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"bg-white rounded-lg shadow p-6 mb-6",children:[(0,a.jsxs)("h2",{className:"text-xl font-semibold mb-4",children:[s.designation," Metrics"]}),(0,a.jsxs)("div",{className:"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4",children:[(0,a.jsxs)("div",{className:"bg-blue-50 border border-blue-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-blue-700",children:o.totalBeds}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"Total Beds"})]}),(0,a.jsxs)("div",{className:"bg-green-50 border border-green-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-green-700",children:o.occupiedBeds}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"Occupied"})]}),(0,a.jsxs)("div",{className:"bg-purple-50 border border-purple-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-purple-700",children:o.availableBeds}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"Available"})]}),(0,a.jsxs)("div",{className:"bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-yellow-700",children:o.pendingAdmissions}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"Pending Admits"})]}),(0,a.jsxs)("div",{className:"bg-indigo-50 border border-indigo-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-indigo-700",children:o.pendingDischarges}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"Pending Discharges"})]}),(0,a.jsxs)("div",{className:"bg-red-50 border border-red-200 rounded-lg p-3 text-center",children:[(0,a.jsx)("div",{className:"text-2xl font-bold text-red-700",children:o.highAcuityPatients}),(0,a.jsx)("div",{className:"text-sm text-gray-600",children:"High Acuity"})]})]})]}),(0,a.jsxs)("div",{className:"flex flex-wrap gap-3 mb-6",children:[(0,a.jsx)(r.$,{children:"Assign Patients"}),(0,a.jsx)(r.$,{variant:"outline",children:"Print Assignments"}),(0,a.jsx)(r.$,{variant:"outline",children:"Generate Report"}),(0,a.jsx)(r.$,{variant:"outline",children:"Staff Directory"})]}),(0,a.jsx)("div",{className:"bg-white rounded-lg shadow",children:(0,a.jsx)(u,{unitId:s.id})})]})]})}},9414:(e,t,s)=>{Promise.resolve().then(s.bind(s,1471))}},e=>{var t=t=>e(e.s=t);e.O(0,[135,210,3,377,937,441,684,358],()=>t(9414)),_N_E=e.O()}]);
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[170],{6248:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>h});var i=s(5155),a=s(2115),r=s(285),n=s(8668),d=s(7118),l=s(2047),o=s(2732),c=s(8262);function u(e){let{unitId:t}=e,[s,u]=(0,a.useState)(null),[m,h]=(0,a.useState)([]),[g,x]=(0,a.useState)([]),[p,b]=(0,a.useState)([]),[f,v]=(0,a.useState)(null),[j,N]=(0,a.useState)(null),[y,w]=(0,a.useState)(!1),[C,E]=(0,a.useState)(!0),[R,k]=(0,a.useState)(!1),[U,S]=(0,a.useState)({patients:{},nurses:{},pcts:{},staff:{}});(0,a.useEffect)(()=>{(async()=>{if(t)try{E(!0);let e=await (0,o.HW)(t);if(!e.unit)return void(0,c.oR)({title:"Error",description:"Unit not found",variant:"destructive"});if(u(e.unit),h(e.patients),x(e.nurses),b(e.pcts),v(e.chargeNurse),N(e.unitClerk),0===e.patients.length&&0===e.nurses.length){k(!0);let t=await (0,o.ZW)(e.unit);h(t.patients),x(t.nurses),b(t.pcts),v(t.chargeNurse),N(t.unitClerk),k(!1),(0,c.oR)({title:"Unit Initialized",description:"Unit data has been created successfully"})}}catch(e){console.error("Error loading unit data:",e),(0,c.oR)({title:"Error",description:"Failed to load unit data",variant:"destructive"})}finally{E(!1)}})()},[t]);let P=(0,a.useMemo)(()=>m.filter(e=>!e.assigned),[m]),F=(0,a.useCallback)(async(e,t)=>{try{let s=g.find(t=>t.id===e),i=m.find(e=>e.id===t);if(!s||!i)return;let a=[...s.assignedRooms];a.includes(i.roomNumber)||(a.push(i.roomNumber),a.sort((e,t)=>parseInt(e)-parseInt(t))),x(g.map(t=>t.id===e?{...t,assignedRooms:a}:t)),h(m.map(e=>e.id===t?{...e,assigned:!0}:e)),S(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:a}},patients:{...s.patients,[t]:{assigned:!0}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:a}),(0,o.Z6)(t,{assigned:!0})]),S(s=>{let{[e]:i,...a}=s.nurses,{[t]:r,...n}=s.patients;return{...s,nurses:a,patients:n}})}catch(e){console.error("Error assigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[g,m]),M=(0,a.useCallback)(async(e,t)=>{try{let s=g.find(t=>t.id===e),i=m.find(e=>e.roomNumber===t);if(!s||!i)return;let a=s.assignedRooms.filter(e=>e!==t);x(g.map(t=>t.id===e?{...t,assignedRooms:a}:t)),h(m.map(e=>e.roomNumber===t?{...e,assigned:!1}:e)),S(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:a}},patients:{...t.patients,[i.id]:{assigned:!1}}})),await Promise.all([(0,o.Dr)(e,{assignedRooms:a}),(0,o.Z6)(i.id,{assigned:!1})]),S(t=>{let{[e]:s,...a}=t.nurses,{[i.id]:r,...n}=t.patients;return{...t,nurses:a,patients:n}})}catch(e){console.error("Error unassigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[g,m]),A=(0,a.useCallback)(async(e,t)=>{try{x(g.map(s=>s.id===e?{...s,...t}:s)),S(s=>({...s,nurses:{...s.nurses,[e]:{...s.nurses[e],...t}}})),await (0,o.Dr)(e,t),S(t=>{let{[e]:s,...i}=t.nurses;return{...t,nurses:i}}),(0,c.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[g]),O=(0,a.useCallback)(async(e,t)=>{try{b(p.map(s=>s.id===e?{...s,...t}:s)),S(s=>({...s,pcts:{...s.pcts,[e]:{...s.pcts[e],...t}}})),await (0,o.B5)(e,t),S(t=>{let{[e]:s,...i}=t.pcts;return{...t,pcts:i}}),(0,c.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,c.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[p]),B=(0,a.useCallback)(async e=>{try{if(!f)return;v({...f,...e}),S(t=>({...t,staff:{...t.staff,[f.id]:{...t.staff[f.id],...e}}})),await (0,o.e4)(f.id,e),S(e=>{let{[f.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[f]),D=(0,a.useCallback)(async e=>{try{if(!j)return;N({...j,...e}),S(t=>({...t,staff:{...t.staff,[j.id]:{...t.staff[j.id],...e}}})),await (0,o.e4)(j.id,e),S(e=>{let{[j.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,c.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[j]),I=(0,a.useCallback)(async()=>{try{let e=Object.entries(U.patients).map(e=>{let[t,s]=e;return{id:t,data:s}});e.length>0&&await (0,o.cT)(e),await Promise.all([...Object.entries(U.nurses).map(e=>{let[t,s]=e;return(0,o.Dr)(t,s)}),...Object.entries(U.pcts).map(e=>{let[t,s]=e;return(0,o.B5)(t,s)}),...Object.entries(U.staff).map(e=>{let[t,s]=e;return(0,o.e4)(t,s)})]),S({patients:{},nurses:{},pcts:{},staff:{}}),w(!1),(0,c.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,c.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[U]),T=(0,a.useMemo)(()=>Object.keys(U.patients).length>0||Object.keys(U.nurses).length>0||Object.keys(U.pcts).length>0||Object.keys(U.staff).length>0,[U]);return C||R?(0,i.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,i.jsxs)("div",{className:"text-center",children:[(0,i.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,i.jsx)("p",{className:"text-gray-600",children:R?"Initializing unit data...":"Loading..."})]})}):s?(0,i.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,i.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,i.jsxs)("h3",{className:"text-xl font-semibold",children:[s.designation," Patient Grid"]}),(0,i.jsxs)("div",{className:"flex gap-2",children:[T&&(0,i.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,i.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,i.jsx)(r.$,{variant:y?"default":"outline",onClick:()=>y?I():w(!0),children:y?"Save Layout":"Edit Layout"})]})]}),(0,i.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,i.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,i.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,i.jsxs)("div",{className:"space-y-2",children:[P.map(e=>(0,i.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,i.jsxs)("div",{children:[(0,i.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,i.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,i.jsxs)("span",{className:"px-2 py-1 rounded-full text-xs ".concat(e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:["Acuity ",e.acuity]})]},e.id)),0===P.length&&(0,i.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),g.map(e=>(0,i.jsx)(n.c,{nurse:e,patients:m,onAssign:t=>F(e.id,t),onUnassign:t=>M(e.id,t),onUpdate:t=>A(e.id,t),editMode:y},e.id)),p.map(e=>(0,i.jsx)(d.I,{pct:e,onUpdate:t=>O(e.id,t),editMode:y},e.id)),f&&(0,i.jsx)(l.v,{title:"Charge Nurse",staffMember:f,onUpdate:B,editMode:y,size:"small"}),j&&(0,i.jsx)(l.v,{title:"Unit Clerk",staffMember:j,onUpdate:D,editMode:y,size:"small"})]})]}):(0,i.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,i.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}var m=s(6104);function h(){let[e,t]=(0,a.useState)([]),[s,n]=(0,a.useState)(null),[d,l]=(0,a.useState)(!0),[o,h]=(0,a.useState)({totalBeds:0,occupiedBeds:0,availableBeds:0,pendingAdmissions:0,pendingDischarges:0,highAcuityPatients:0});return((0,a.useEffect)(()=>{(async()=>{try{l(!0);let e=await (0,m.YU)();t(e),e.length>0&&!s&&n(e[0])}catch(e){console.error("Error loading units:",e),(0,c.oR)({title:"Error",description:"Failed to load units. Please try again.",variant:"destructive"})}finally{l(!1)}})()},[]),(0,a.useEffect)(()=>{(async()=>{if(s)try{let e=await (0,m.QC)(s.id),t=s.roomCount,i=e.filter(e=>e.assigned).length,a=Math.floor(3*Math.random()),r=Math.floor(4*Math.random()),n=e.filter(e=>e.acuity>=4).length;h({totalBeds:t,occupiedBeds:i,availableBeds:t-i,pendingAdmissions:a,pendingDischarges:r,highAcuityPatients:n})}catch(e){console.error("Error loading unit metrics:",e),(0,c.oR)({title:"Error",description:"Failed to load unit metrics",variant:"destructive"})}})()},[s]),d)?(0,i.jsx)("div",{className:"container mx-auto p-6 flex items-center justify-center h-[50vh]",children:(0,i.jsxs)("div",{className:"text-center",children:[(0,i.jsx)("div",{className:"w-16 h-16 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-4"}),(0,i.jsx)("p",{className:"text-gray-600",children:"Loading units..."})]})}):0===e.length?(0,i.jsx)("div",{className:"container mx-auto p-6",children:(0,i.jsxs)("div",{className:"bg-white rounded-lg shadow p-8 text-center",children:[(0,i.jsx)("h1",{className:"text-3xl font-bold mb-4",children:"ChargeView"}),(0,i.jsx)("p",{className:"text-gray-600 mb-6",children:"No units have been created yet. Please go to Facility Setup to create a unit."}),(0,i.jsx)("a",{href:"/facility-setup",className:"inline-block bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors",children:"Go to Facility Setup"})]})}):(0,i.jsxs)("div",{className:"container mx-auto p-6",children:[(0,i.jsxs)("div",{className:"mb-6",children:[(0,i.jsx)("h1",{className:"text-3xl font-bold mb-4",children:"ChargeView"}),(0,i.jsx)("p",{className:"text-gray-600",children:"Comprehensive view for charge nurses to manage unit operations."})]}),(0,i.jsxs)("div",{className:"mb-6",children:[(0,i.jsx)("label",{className:"block text-sm font-medium mb-2",children:"Select Unit"}),(0,i.jsx)("select",{className:"border rounded-md p-2 w-full max-w-xs",value:(null==s?void 0:s.id)||"",onChange:t=>{let s=e.find(e=>e.id===t.target.value);s&&n(s)},children:e.map(e=>(0,i.jsx)("option",{value:e.id,children:e.designation},e.id))})]}),s&&(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("div",{className:"bg-white rounded-lg shadow p-6 mb-6",children:[(0,i.jsxs)("h2",{className:"text-xl font-semibold mb-4",children:[s.designation," Metrics"]}),(0,i.jsxs)("div",{className:"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4",children:[(0,i.jsxs)("div",{className:"bg-blue-50 border border-blue-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-blue-700",children:o.totalBeds}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"Total Beds"})]}),(0,i.jsxs)("div",{className:"bg-green-50 border border-green-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-green-700",children:o.occupiedBeds}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"Occupied"})]}),(0,i.jsxs)("div",{className:"bg-purple-50 border border-purple-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-purple-700",children:o.availableBeds}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"Available"})]}),(0,i.jsxs)("div",{className:"bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-yellow-700",children:o.pendingAdmissions}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"Pending Admits"})]}),(0,i.jsxs)("div",{className:"bg-indigo-50 border border-indigo-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-indigo-700",children:o.pendingDischarges}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"Pending Discharges"})]}),(0,i.jsxs)("div",{className:"bg-red-50 border border-red-200 rounded-lg p-3 text-center",children:[(0,i.jsx)("div",{className:"text-2xl font-bold text-red-700",children:o.highAcuityPatients}),(0,i.jsx)("div",{className:"text-sm text-gray-600",children:"High Acuity"})]})]})]}),(0,i.jsxs)("div",{className:"flex flex-wrap gap-3 mb-6",children:[(0,i.jsx)(r.$,{children:"Assign Patients"}),(0,i.jsx)(r.$,{variant:"outline",children:"Print Assignments"}),(0,i.jsx)(r.$,{variant:"outline",children:"Generate Report"}),(0,i.jsx)(r.$,{variant:"outline",children:"Staff Directory"})]}),(0,i.jsx)("div",{className:"bg-white rounded-lg shadow",children:(0,i.jsx)(u,{unitId:s.id})})]})]})}},9209:(e,t,s)=>{Promise.resolve().then(s.bind(s,6248))}},e=>{var t=t=>e(e.s=t);e.O(0,[135,210,3,377,937,104,441,684,358],()=>t(9209)),_N_E=e.O()}]);
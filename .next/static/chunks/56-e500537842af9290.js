"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[56],{285:(e,t,s)=>{s.d(t,{$:()=>d});var a=s(5155),n=s(2115),r=s(2085),i=s(9434);let l=(0,r.F)("inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),d=n.forwardRef((e,t)=>{let{className:s,variant:n,size:r,asChild:d=!1,...o}=e;return(0,a.jsx)("button",{className:(0,i.cn)(l({variant:n,size:r}),s),ref:t,...o})});d.displayName="Button"},5813:(e,t,s)=>{s.d(t,{db:()=>d,j2:()=>o});var a=s(3915),n=s(5317),r=s(7505),i=s(4903);let l=0===(0,a.Dk)().length?(0,a.Wp)({apiKey:"AIzaSyARvbAJtv-NBJnJQ3EdZNU3WsMnXThFzhM",authDomain:"unitview.firebaseapp.com",databaseURL:"https://unitview-default-rtdb.firebaseio.com",projectId:"unitview",storageBucket:"unitview.firebasestorage.app",messagingSenderId:"185648925766",appId:"1:185648925766:web:5ae6271dd4977f6e158e47"}):(0,a.Dk)()[0],d=(0,n.aU)(l);try{(0,n.ol)(d).catch(e=>{console.error("Firestore persistence error:",e)})}catch(e){console.warn("Firestore persistence already enabled or not supported")}(0,r.c7)(l);let o=(0,i.xI)(l)},6104:(e,t,s)=>{s.d(t,{Dq:()=>h,QC:()=>y,WL:()=>x,WM:()=>w,YB:()=>v,YU:()=>b,eI:()=>N,ym:()=>g});var a=s(5813),n=s(5317);let r=(0,n.rJ)(a.db,"facilities"),i=(0,n.rJ)(a.db,"units"),l=(0,n.rJ)(a.db,"patients"),d=(0,n.rJ)(a.db,"nurses"),o=(0,n.rJ)(a.db,"pcts"),c=(0,n.rJ)(a.db,"staff"),u=(0,n.rJ)(a.db,"modules"),m=null,p=new Map,f=new Map;async function g(e){let t=Date.now(),s=(0,n.H9)(r),a={id:s.id,...e,createdAt:t};return await (0,n.BN)(s,a),m&&m.push(a),a}async function x(){if(m)return m;let e=(await (0,n.GG)(r)).docs.map(e=>({id:e.id,...e.data()}));return m=e,e}async function h(e){let t=Date.now(),s=(0,n.H9)(i),a={...e,id:s.id,createdAt:t,updatedAt:t};await (0,n.BN)(s,a);let r=p.get(a.facilityId)||[];return p.set(a.facilityId,[...r,a]),a}async function b(e){if(!e)return[];if(p.has(e))return p.get(e);let t=(0,n.P)(i,(0,n._M)("facilityId","==",e)),s=(await (0,n.GG)(t)).docs.map(e=>({id:e.id,...e.data()}));return p.set(e,s),s}async function y(e){if(!e)return[];let t=f.get(e);if((null==t?void 0:t.patients.length)>0)return t.patients;let s=(0,n.P)(l,(0,n._M)("unitId","==",e)),a=(await (0,n.GG)(s)).docs.map(e=>({id:e.id,...e.data()}));return f.has(e)?f.get(e).patients=a:f.set(e,{unit:null,patients:a,nurses:[],pcts:[],chargeNurse:null,unitClerk:null}),a}async function N(){return(await (0,n.GG)(u)).docs.map(e=>({id:e.id,...e.data()}))}async function v(e,t){let s=(0,n.H9)(u,e);await (0,n.mZ)(s,{enabled:t,updatedAt:Date.now()})}async function j(e){let t=Date.now(),s=(0,n.wP)(a.db);for(let a of e){let e=(0,n.H9)(u,a.id);(await (0,n.x7)(e)).exists()||s.set(e,{...a,updatedAt:t})}await s.commit()}async function w(){await j([{id:"mock-patient",name:"Mock Patient Data",description:"Generate mock patient data for testing",enabled:!0},{id:"spectra-pool",name:"Spectra Pool Management",description:"Manage spectra pool assignments",enabled:!1},{id:"acuity-tracking",name:"Acuity Tracking",description:"Track and manage patient acuity levels",enabled:!0},{id:"bed-management",name:"Bed Management",description:"Track bed availability and assignments",enabled:!0},{id:"staff-messaging",name:"Staff Messaging",description:"Internal messaging system for staff",enabled:!1}])}},8262:(e,t,s)=>{s.d(t,{dj:()=>m,oR:()=>u});var a=s(2115);let n=0,r=new Map,i=e=>{if(r.has(e))return;let t=setTimeout(()=>{r.delete(e),c({type:"REMOVE_TOAST",toastId:e})},5e3);r.set(e,t)},l=(e,t)=>{switch(t.type){case"ADD_TOAST":return{...e,toasts:[t.toast,...e.toasts].slice(0,5)};case"UPDATE_TOAST":return{...e,toasts:e.toasts.map(e=>e.id===t.toast.id?{...e,...t.toast}:e)};case"DISMISS_TOAST":{let{toastId:s}=t;return s?i(s):e.toasts.forEach(e=>{i(e.id)}),{...e,toasts:e.toasts.map(e=>e.id===s||void 0===s?{...e,open:!1}:e)}}case"REMOVE_TOAST":if(void 0===t.toastId)return{...e,toasts:[]};return{...e,toasts:e.toasts.filter(e=>e.id!==t.toastId)}}},d=[],o={toasts:[]};function c(e){o=l(o,e),d.forEach(e=>{e(o)})}function u(e){let{...t}=e,s=(n=(n+1)%Number.MAX_SAFE_INTEGER).toString(),a=()=>c({type:"DISMISS_TOAST",toastId:s});return c({type:"ADD_TOAST",toast:{...t,id:s,open:!0,onOpenChange:e=>{e||a()}}}),{id:s,dismiss:a,update:e=>c({type:"UPDATE_TOAST",toast:{...e,id:s}})}}function m(){let[e,t]=a.useState(o);return a.useEffect(()=>(d.push(t),()=>{let e=d.indexOf(t);e>-1&&d.splice(e,1)}),[e]),{...e,toast:u,dismiss:e=>c({type:"DISMISS_TOAST",toastId:e})}}},9434:(e,t,s)=>{s.d(t,{cn:()=>r});var a=s(2596),n=s(9688);function r(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];return(0,n.QP)((0,a.$)(t))}},9561:(e,t,s)=>{s.d(t,{I:()=>D});var a=s(5155),n=s(2115),r=s(285);function i(e){let{nurse:t,patients:s,onAssign:i,onUnassign:l,onUpdate:d,editMode:o}=e,[c,u]=(0,n.useState)(!1),m=t.assignedRooms.reduce((e,t)=>{let a=s.find(e=>e.roomNumber===t);return e+(a?a.acuity:0)},0),p=m>t.acuityCapacity;return(0,a.jsxs)("div",{className:"border rounded-lg p-4 ".concat(p?"border-red-500 bg-red-50":"border-blue-200"),children:[(0,a.jsxs)("div",{className:"flex justify-between items-start mb-3",children:[(0,a.jsx)("h4",{className:"font-medium",children:"Nurse Assignment"}),p&&(0,a.jsx)("span",{className:"bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full",children:"Acuity Alert"})]}),(0,a.jsxs)("div",{className:"space-y-2 mb-4",children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Name"}),o?(0,a.jsx)("input",{type:"text",value:t.name,onChange:e=>{d({name:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"font-medium",children:t.name||"Unassigned"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Spectra #"}),o?(0,a.jsx)("input",{type:"text",value:t.spectraNumber,onChange:e=>{d({spectraNumber:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"text-sm",children:t.spectraNumber||"N/A"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Relief"}),o?(0,a.jsx)("input",{type:"text",value:t.reliefName,onChange:e=>{d({reliefName:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"text-sm",children:t.reliefName||"None"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Acuity Capacity"}),o?(0,a.jsx)("input",{type:"number",value:t.acuityCapacity,onChange:e=>{d({acuityCapacity:parseInt(e.target.value,10)||0})},className:"w-full p-1 border rounded text-sm",min:"1"}):(0,a.jsxs)("div",{className:"flex items-center",children:[(0,a.jsx)("div",{className:"w-full bg-gray-200 rounded-full h-2.5",children:(0,a.jsx)("div",{className:"h-2.5 rounded-full ".concat(p?"bg-red-600":"bg-blue-600"),style:{width:"".concat(Math.min(100,m/t.acuityCapacity*100),"%")}})}),(0,a.jsxs)("span",{className:"ml-2 text-xs font-medium",children:[m,"/",t.acuityCapacity]})]})]})]}),(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-2",children:[(0,a.jsx)("label",{className:"text-xs text-gray-500",children:"Patient Assignments"}),!o&&(0,a.jsx)(r.$,{variant:"outline",size:"sm",className:"text-xs py-1 h-auto",onClick:()=>u(!c),children:c?"Done":"Assign"})]}),(0,a.jsx)("div",{className:"space-y-1 mb-3",children:t.assignedRooms.length>0?t.assignedRooms.map(e=>{let t=s.find(t=>t.roomNumber===e);return(0,a.jsxs)("div",{className:"flex justify-between items-center p-1.5 bg-gray-50 rounded border",children:[(0,a.jsxs)("div",{className:"flex items-center",children:[(0,a.jsxs)("span",{className:"font-medium text-sm",children:["Room ",e]}),(null==t?void 0:t.name)&&(0,a.jsx)("span",{className:"ml-2 text-xs",children:t.name})]}),(0,a.jsxs)("div",{className:"flex items-center",children:[t&&(0,a.jsx)("span",{className:"px-1.5 py-0.5 rounded-full text-xs mr-2 ".concat(t.acuity>=4?"bg-red-100 text-red-800":t.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:t.acuity}),!o&&(0,a.jsx)("button",{onClick:()=>l(e),className:"text-red-500 text-xs hover:text-red-700","aria-label":"Remove patient assignment",children:"\xd7"})]})]},e)}):(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"No patients assigned"})}),c&&!o&&(0,a.jsxs)("div",{className:"mt-3 border-t pt-2",children:[(0,a.jsx)("p",{className:"text-xs font-medium mb-2",children:"Select a patient to assign:"}),(0,a.jsx)("div",{className:"grid grid-cols-2 gap-1",children:s.filter(e=>!e.assigned).map(e=>(0,a.jsxs)("button",{onClick:()=>{i(e.id),t.assignedRooms.length>=5&&u(!1)},className:"text-xs p-1 border rounded hover:bg-blue-50 flex justify-between items-center",children:[(0,a.jsxs)("span",{children:["Room ",e.roomNumber]}),(0,a.jsx)("span",{className:"px-1.5 py-0.5 rounded-full text-xs ".concat(e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:e.acuity})]},e.id))})]})]})]})}function l(e){let{pct:t,onUpdate:s,editMode:n}=e;return(0,a.jsxs)("div",{className:"border border-green-200 rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Patient Care Tech"}),(0,a.jsxs)("div",{className:"space-y-2 mb-4",children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Name"}),n?(0,a.jsx)("input",{type:"text",value:t.name,onChange:e=>{s({name:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"font-medium",children:t.name||"Unassigned"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Spectra #"}),n?(0,a.jsx)("input",{type:"text",value:t.spectraNumber,onChange:e=>{s({spectraNumber:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"text-sm",children:t.spectraNumber||"N/A"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Relief"}),n?(0,a.jsx)("input",{type:"text",value:t.reliefName,onChange:e=>{s({reliefName:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"text-sm",children:t.reliefName||"None"})]})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500 mb-1",children:"Room Assignment"}),n?(0,a.jsx)("input",{type:"text",value:t.roomRange,onChange:e=>{s({roomRange:e.target.value})},className:"w-full p-1 border rounded text-sm",placeholder:"e.g., 401-412"}):(0,a.jsx)("div",{className:"bg-green-50 border border-green-200 rounded p-2 text-center",children:(0,a.jsxs)("span",{className:"font-medium",children:["Rooms ",t.roomRange]})})]})]})}function d(e){let{title:t,staffMember:s,onUpdate:n,editMode:r,size:i="normal"}=e;return(0,a.jsxs)("div",{className:"border ".concat("Charge Nurse"===t?"border-purple-200":"border-yellow-200"," rounded-lg p-4 ").concat("small"===i?"col-span-1":"col-span-1 md:col-span-2"),children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:t}),(0,a.jsxs)("div",{className:"space-y-2",children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Name"}),r?(0,a.jsx)("input",{type:"text",value:s.name,onChange:e=>{n({name:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"font-medium",children:s.name||"Unassigned"})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{className:"block text-xs text-gray-500",children:"Spectra #"}),r?(0,a.jsx)("input",{type:"text",value:s.spectraNumber,onChange:e=>{n({spectraNumber:e.target.value})},className:"w-full p-1 border rounded text-sm"}):(0,a.jsx)("p",{className:"text-sm",children:s.spectraNumber||"N/A"})]})]}),"chargeNurse"===s.role&&(0,a.jsx)("div",{className:"mt-3 pt-2 border-t border-purple-100",children:(0,a.jsx)("span",{className:"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full",children:"Unit Supervisor"})})]})}var o=s(5813),c=s(5317);let u=(0,c.rJ)(o.db,"units"),m=(0,c.rJ)(o.db,"patients"),p=(0,c.rJ)(o.db,"nurses"),f=(0,c.rJ)(o.db,"pcts"),g=(0,c.rJ)(o.db,"staff"),x=(0,c.rJ)(o.db,"modules"),h=new Map;async function b(e){let t=h.get(e);if(null==t?void 0:t.unit)return t.unit;let s=(0,c.H9)(u,e),a=await (0,c.x7)(s);if(a.exists()){let t=a.data();return h.has(e)?h.get(e).unit=t:h.set(e,{unit:t,patients:[],nurses:[],pcts:[],chargeNurse:null,unitClerk:null}),t}return null}async function y(e){let t=Date.now(),s=(0,c.wP)(o.db),a=[];for(let n of e){let e=(0,c.H9)(m),r={...n,id:e.id,createdAt:t,updatedAt:t};s.set(e,r),a.push(r),h.has(n.unitId)&&h.get(n.unitId).patients.push(r)}return await s.commit(),a}async function N(e){let t=h.get(e);if((null==t?void 0:t.patients.length)>0)return t.patients;let s=(0,c.P)(m,(0,c._M)("unitId","==",e)),a=(await (0,c.GG)(s)).docs.map(e=>e.data());return h.has(e)?h.get(e).patients=a:h.set(e,{unit:null,patients:a,nurses:[],pcts:[],chargeNurse:null,unitClerk:null}),a}async function v(e,t){let s=(0,c.H9)(m,e),a={...t,updatedAt:Date.now()};for(let[t,n]of(await (0,c.mZ)(s,a),h.entries())){let t=n.patients.findIndex(t=>t.id===e);if(-1!==t){n.patients[t]={...n.patients[t],...a};break}}}async function j(e){let t=(0,c.wP)(o.db),s=Date.now();for(let{id:a,data:n}of e){let e=(0,c.H9)(m,a);for(let[r,i]of(t.update(e,{...n,updatedAt:s}),h.entries())){let e=i.patients.findIndex(e=>e.id===a);if(-1!==e){i.patients[e]={...i.patients[e],...n,updatedAt:s};break}}}await t.commit()}async function w(e){let t=Date.now(),s=(0,c.wP)(o.db),a=[];for(let n of e){let e=(0,c.H9)(p),r={...n,id:e.id,createdAt:t,updatedAt:t};s.set(e,r),a.push(r),h.has(n.unitId)&&h.get(n.unitId).nurses.push(r)}return await s.commit(),a}async function C(e){let t=h.get(e);if((null==t?void 0:t.nurses.length)>0)return t.nurses;let s=(0,c.P)(p,(0,c._M)("unitId","==",e)),a=(await (0,c.GG)(s)).docs.map(e=>e.data());return h.has(e)?h.get(e).nurses=a:h.set(e,{unit:null,patients:[],nurses:a,pcts:[],chargeNurse:null,unitClerk:null}),a}async function k(e,t){let s=(0,c.H9)(p,e),a={...t,updatedAt:Date.now()};for(let[t,n]of(await (0,c.mZ)(s,a),h.entries())){let t=n.nurses.findIndex(t=>t.id===e);if(-1!==t){n.nurses[t]={...n.nurses[t],...a};break}}}async function A(e){let t=Date.now(),s=(0,c.wP)(o.db),a=[];for(let n of e){let e=(0,c.H9)(f),r={...n,id:e.id,createdAt:t,updatedAt:t};s.set(e,r),a.push(r),h.has(n.unitId)&&h.get(n.unitId).pcts.push(r)}return await s.commit(),a}async function I(e){let t=h.get(e);if((null==t?void 0:t.pcts.length)>0)return t.pcts;let s=(0,c.P)(f,(0,c._M)("unitId","==",e)),a=(await (0,c.GG)(s)).docs.map(e=>e.data());return h.has(e)?h.get(e).pcts=a:h.set(e,{unit:null,patients:[],nurses:[],pcts:a,chargeNurse:null,unitClerk:null}),a}async function R(e,t){let s=(0,c.H9)(f,e),a={...t,updatedAt:Date.now()};for(let[t,n]of(await (0,c.mZ)(s,a),h.entries())){let t=n.pcts.findIndex(t=>t.id===e);if(-1!==t){n.pcts[t]={...n.pcts[t],...a};break}}}async function S(e){let t=Date.now(),s=(0,c.wP)(o.db),a=[];for(let n of e){let e=(0,c.H9)(g),r={...n,id:e.id,createdAt:t,updatedAt:t};s.set(e,r),a.push(r),h.has(n.unitId)&&("chargeNurse"===n.role?h.get(n.unitId).chargeNurse=r:"unitClerk"===n.role&&(h.get(n.unitId).unitClerk=r))}return await s.commit(),a}async function M(e){let t=(0,c.P)(g,(0,c._M)("unitId","==",e));return(await (0,c.GG)(t)).docs.map(e=>e.data())}async function E(e,t){let s=(0,c.H9)(g,e),a={...t,updatedAt:Date.now()};for(let[t,i]of(await (0,c.mZ)(s,a),h.entries())){var n,r;(null==(n=i.chargeNurse)?void 0:n.id)===e?i.chargeNurse={...i.chargeNurse,...a}:(null==(r=i.unitClerk)?void 0:r.id)===e&&(i.unitClerk={...i.unitClerk,...a})}}async function P(e){if(h.has(e)){let t=h.get(e);if(t.unit&&(t.patients.length>0||t.nurses.length>0||t.pcts.length>0))return t}let[t,s,a,n,r]=await Promise.all([b(e),N(e),C(e),I(e),M(e)]),i=null,l=null;for(let e of r)"chargeNurse"===e.role?i=e:"unitClerk"===e.role&&(l=e);let d={unit:t,patients:s,nurses:a,pcts:n,chargeNurse:i,unitClerk:l};return h.set(e,d),d}async function T(e){let t=[],s=[],a=[],n=[];for(let s of e.roomRanges){let[a,n]=s.split("-").map(e=>parseInt(e,10));for(let s=a;s<=n;s++)t.push({unitId:e.id,roomNumber:s.toString(),name:"",acuity:Math.floor(5*Math.random())+1,assigned:!1})}for(let t=0;t<e.nurseCardCount;t++)s.push({unitId:e.id,name:"Nurse ".concat(t+1),spectraNumber:"SN".concat(1e4+t),reliefName:"",assignedRooms:[],acuityCapacity:12});for(let t=0;t<e.pctCardCount;t++){let s=t%e.roomRanges.length,[n,r]=e.roomRanges[s].split("-").map(e=>parseInt(e,10)),i=Math.ceil((r-n+1)/e.pctCardCount),l=n+t*i,d=Math.min(l+i-1,r);a.push({unitId:e.id,name:"PCT ".concat(t+1),spectraNumber:"PCT".concat(1e4+t),reliefName:"",roomRange:"".concat(l,"-").concat(d)})}e.hasChargeNurse&&n.push({unitId:e.id,name:"",spectraNumber:"",role:"chargeNurse"}),e.hasUnitClerk&&n.push({unitId:e.id,name:"",spectraNumber:"",role:"unitClerk"});let[r,i,l,d]=await Promise.all([y(t),w(s),A(a),S(n)]),o=null,c=null;for(let e of d)"chargeNurse"===e.role?o=e:"unitClerk"===e.role&&(c=e);return{patients:r,nurses:i,pcts:l,chargeNurse:o,unitClerk:c}}var U=s(8262);function D(e){let{unitId:t}=e,[s,o]=(0,n.useState)(null),[c,u]=(0,n.useState)([]),[m,p]=(0,n.useState)([]),[f,g]=(0,n.useState)([]),[x,h]=(0,n.useState)(null),[b,y]=(0,n.useState)(null),[N,w]=(0,n.useState)(!1),[C,A]=(0,n.useState)(!0),[I,S]=(0,n.useState)(!1),[M,D]=(0,n.useState)({patients:{},nurses:{},pcts:{},staff:{}});(0,n.useEffect)(()=>{(async()=>{if(t)try{A(!0);let e=await P(t);if(!e.unit)return void(0,U.oR)({title:"Error",description:"Unit not found",variant:"destructive"});if(o(e.unit),u(e.patients),p(e.nurses),g(e.pcts),h(e.chargeNurse),y(e.unitClerk),0===e.patients.length&&0===e.nurses.length){S(!0);let t=await T(e.unit);u(t.patients),p(t.nurses),g(t.pcts),h(t.chargeNurse),y(t.unitClerk),S(!1),(0,U.oR)({title:"Unit Initialized",description:"Unit data has been created successfully"})}}catch(e){console.error("Error loading unit data:",e),(0,U.oR)({title:"Error",description:"Failed to load unit data",variant:"destructive"})}finally{A(!1)}})()},[t]);let O=(0,n.useMemo)(()=>c.filter(e=>!e.assigned),[c]),_=(0,n.useCallback)(async(e,t)=>{try{let s=m.find(t=>t.id===e),a=c.find(e=>e.id===t);if(!s||!a)return;let n=[...s.assignedRooms];n.includes(a.roomNumber)||(n.push(a.roomNumber),n.sort((e,t)=>parseInt(e)-parseInt(t))),p(m.map(t=>t.id===e?{...t,assignedRooms:n}:t)),u(c.map(e=>e.id===t?{...e,assigned:!0}:e)),D(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:n}},patients:{...s.patients,[t]:{assigned:!0}}})),await Promise.all([k(e,{assignedRooms:n}),v(t,{assigned:!0})]),D(s=>{let{[e]:a,...n}=s.nurses,{[t]:r,...i}=s.patients;return{...s,nurses:n,patients:i}})}catch(e){console.error("Error assigning patient:",e),(0,U.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[m,c]),G=(0,n.useCallback)(async(e,t)=>{try{let s=m.find(t=>t.id===e),a=c.find(e=>e.roomNumber===t);if(!s||!a)return;let n=s.assignedRooms.filter(e=>e!==t);p(m.map(t=>t.id===e?{...t,assignedRooms:n}:t)),u(c.map(e=>e.roomNumber===t?{...e,assigned:!1}:e)),D(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:n}},patients:{...t.patients,[a.id]:{assigned:!1}}})),await Promise.all([k(e,{assignedRooms:n}),v(a.id,{assigned:!1})]),D(t=>{let{[e]:s,...n}=t.nurses,{[a.id]:r,...i}=t.patients;return{...t,nurses:n,patients:i}})}catch(e){console.error("Error unassigning patient:",e),(0,U.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[m,c]),J=(0,n.useCallback)(async(e,t)=>{try{p(m.map(s=>s.id===e?{...s,...t}:s)),D(s=>({...s,nurses:{...s.nurses,[e]:{...s.nurses[e],...t}}})),await k(e,t),D(t=>{let{[e]:s,...a}=t.nurses;return{...t,nurses:a}}),(0,U.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,U.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[m]),H=(0,n.useCallback)(async(e,t)=>{try{g(f.map(s=>s.id===e?{...s,...t}:s)),D(s=>({...s,pcts:{...s.pcts,[e]:{...s.pcts[e],...t}}})),await R(e,t),D(t=>{let{[e]:s,...a}=t.pcts;return{...t,pcts:a}}),(0,U.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,U.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[f]),F=(0,n.useCallback)(async e=>{try{if(!x)return;h({...x,...e}),D(t=>({...t,staff:{...t.staff,[x.id]:{...t.staff[x.id],...e}}})),await E(x.id,e),D(e=>{let{[x.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,U.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,U.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[x]),z=(0,n.useCallback)(async e=>{try{if(!b)return;y({...b,...e}),D(t=>({...t,staff:{...t.staff,[b.id]:{...t.staff[b.id],...e}}})),await E(b.id,e),D(e=>{let{[b.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,U.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,U.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[b]),B=(0,n.useCallback)(async()=>{try{let e=Object.entries(M.patients).map(e=>{let[t,s]=e;return{id:t,data:s}});e.length>0&&await j(e),await Promise.all([...Object.entries(M.nurses).map(e=>{let[t,s]=e;return k(t,s)}),...Object.entries(M.pcts).map(e=>{let[t,s]=e;return R(t,s)}),...Object.entries(M.staff).map(e=>{let[t,s]=e;return E(t,s)})]),D({patients:{},nurses:{},pcts:{},staff:{}}),w(!1),(0,U.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,U.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[M]),L=(0,n.useMemo)(()=>Object.keys(M.patients).length>0||Object.keys(M.nurses).length>0||Object.keys(M.pcts).length>0||Object.keys(M.staff).length>0,[M]);return C||I?(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,a.jsx)("p",{className:"text-gray-600",children:I?"Initializing unit data...":"Loading..."})]})}):s?(0,a.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,a.jsxs)("h3",{className:"text-xl font-semibold",children:[s.designation," Patient Grid"]}),(0,a.jsxs)("div",{className:"flex gap-2",children:[L&&(0,a.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,a.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,a.jsx)(r.$,{variant:N?"default":"outline",onClick:()=>N?B():w(!0),children:N?"Save Layout":"Edit Layout"})]})]}),(0,a.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,a.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,a.jsxs)("div",{className:"space-y-2",children:[O.map(e=>(0,a.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,a.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,a.jsxs)("span",{className:"px-2 py-1 rounded-full text-xs ".concat(e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"),children:["Acuity ",e.acuity]})]},e.id)),0===O.length&&(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),m.map(e=>(0,a.jsx)(i,{nurse:e,patients:c,onAssign:t=>_(e.id,t),onUnassign:t=>G(e.id,t),onUpdate:t=>J(e.id,t),editMode:N},e.id)),f.map(e=>(0,a.jsx)(l,{pct:e,onUpdate:t=>H(e.id,t),editMode:N},e.id)),x&&(0,a.jsx)(d,{title:"Charge Nurse",staffMember:x,onUpdate:F,editMode:N,size:"small"}),b&&(0,a.jsx)(d,{title:"Unit Clerk",staffMember:b,onUpdate:z,editMode:N,size:"small"})]})]}):(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,a.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}}}]);
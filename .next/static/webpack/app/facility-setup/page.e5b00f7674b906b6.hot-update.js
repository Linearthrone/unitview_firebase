"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/facility-setup/page",{

/***/ "(app-pages-browser)/./src/lib/firebase.ts":
/*!*****************************!*\
  !*** ./src/lib/firebase.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: function() { return /* reexport safe */ _firebase_config__WEBPACK_IMPORTED_MODULE_0__.app; },\n/* harmony export */   auth: function() { return /* reexport safe */ _firebase_config__WEBPACK_IMPORTED_MODULE_0__.auth; },\n/* harmony export */   batchCreateNurses: function() { return /* binding */ batchCreateNurses; },\n/* harmony export */   batchCreatePCTs: function() { return /* binding */ batchCreatePCTs; },\n/* harmony export */   batchCreatePatients: function() { return /* binding */ batchCreatePatients; },\n/* harmony export */   batchCreateStaffMembers: function() { return /* binding */ batchCreateStaffMembers; },\n/* harmony export */   batchUpdatePatients: function() { return /* binding */ batchUpdatePatients; },\n/* harmony export */   createFacility: function() { return /* binding */ createFacility; },\n/* harmony export */   createNurse: function() { return /* binding */ createNurse; },\n/* harmony export */   createPCT: function() { return /* binding */ createPCT; },\n/* harmony export */   createPatient: function() { return /* binding */ createPatient; },\n/* harmony export */   createStaffMember: function() { return /* binding */ createStaffMember; },\n/* harmony export */   createUnit: function() { return /* binding */ createUnit; },\n/* harmony export */   db: function() { return /* reexport safe */ _firebase_config__WEBPACK_IMPORTED_MODULE_0__.db; },\n/* harmony export */   deleteNurse: function() { return /* binding */ deleteNurse; },\n/* harmony export */   deletePCT: function() { return /* binding */ deletePCT; },\n/* harmony export */   deletePatient: function() { return /* binding */ deletePatient; },\n/* harmony export */   deleteStaffMember: function() { return /* binding */ deleteStaffMember; },\n/* harmony export */   deleteUnit: function() { return /* binding */ deleteUnit; },\n/* harmony export */   deleteUnitNurses: function() { return /* binding */ deleteUnitNurses; },\n/* harmony export */   deleteUnitPCTs: function() { return /* binding */ deleteUnitPCTs; },\n/* harmony export */   deleteUnitPatients: function() { return /* binding */ deleteUnitPatients; },\n/* harmony export */   deleteUnitStaff: function() { return /* binding */ deleteUnitStaff; },\n/* harmony export */   getFacilities: function() { return /* binding */ getFacilities; },\n/* harmony export */   getModules: function() { return /* binding */ getModules; },\n/* harmony export */   getNursesByUnit: function() { return /* binding */ getNursesByUnit; },\n/* harmony export */   getPCTsByUnit: function() { return /* binding */ getPCTsByUnit; },\n/* harmony export */   getPatientsByUnit: function() { return /* binding */ getPatientsByUnit; },\n/* harmony export */   getStaffByUnit: function() { return /* binding */ getStaffByUnit; },\n/* harmony export */   getStaffByUnitAndRole: function() { return /* binding */ getStaffByUnitAndRole; },\n/* harmony export */   getUnit: function() { return /* binding */ getUnit; },\n/* harmony export */   getUnits: function() { return /* binding */ getUnits; },\n/* harmony export */   initializeModules: function() { return /* binding */ initializeModules; },\n/* harmony export */   initializeUnitData: function() { return /* binding */ initializeUnitData; },\n/* harmony export */   loadUnitData: function() { return /* binding */ loadUnitData; },\n/* harmony export */   setupDefaultModules: function() { return /* binding */ setupDefaultModules; },\n/* harmony export */   storage: function() { return /* reexport safe */ _firebase_config__WEBPACK_IMPORTED_MODULE_0__.storage; },\n/* harmony export */   updateModule: function() { return /* binding */ updateModule; },\n/* harmony export */   updateNurse: function() { return /* binding */ updateNurse; },\n/* harmony export */   updatePCT: function() { return /* binding */ updatePCT; },\n/* harmony export */   updatePatient: function() { return /* binding */ updatePatient; },\n/* harmony export */   updateStaffMember: function() { return /* binding */ updateStaffMember; },\n/* harmony export */   updateUnit: function() { return /* binding */ updateUnit; }\n/* harmony export */ });\n/* harmony import */ var _firebase_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebase-config */ \"(app-pages-browser)/./src/lib/firebase-config.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\n\n// Firebase Collection References\nconst facilitiesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"facilities\");\nconst unitsCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"units\");\nconst patientsCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"patients\");\nconst nursesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"nurses\");\nconst pctsCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"pcts\");\nconst staffCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"staff\");\nconst modulesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, \"modules\");\n// Cache\nlet facilitiesCache = null;\nlet unitsCache = new Map();\nlet unitDataCache = new Map();\n// Facility Functions\nasync function createFacility(facilityData) {\n    const timestamp = Date.now();\n    const facilityRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(facilitiesCollection);\n    const newFacility = {\n        id: facilityRef.id,\n        ...facilityData,\n        createdAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(facilityRef, newFacility);\n    if (facilitiesCache) {\n        facilitiesCache.push(newFacility);\n    } else {\n        // If cache wasn't initialized, fetch it again to include the new one.\n        // This is a simple way to ensure consistency.\n        facilitiesCache = null;\n        await getFacilities();\n    }\n    return newFacility;\n}\nasync function getFacilities() {\n    if (facilitiesCache) {\n        return facilitiesCache;\n    }\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(facilitiesCollection);\n    const facilities = snapshot.docs.map((doc)=>({\n            id: doc.id,\n            ...doc.data()\n        }));\n    facilitiesCache = facilities;\n    return facilities;\n}\n// Unit Functions\nasync function createUnit(unitData) {\n    const timestamp = Date.now();\n    const unitRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(unitsCollection);\n    const newUnit = {\n        ...unitData,\n        id: unitRef.id,\n        createdAt: timestamp,\n        updatedAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(unitRef, newUnit);\n    // Safely update cache\n    const facilityUnits = unitsCache.get(newUnit.facilityId) || [];\n    unitsCache.set(newUnit.facilityId, [\n        ...facilityUnits,\n        newUnit\n    ]);\n    return newUnit;\n}\nasync function getUnits(facilityId) {\n    if (!facilityId) return [];\n    // Return from cache if available\n    if (unitsCache.has(facilityId)) {\n        return unitsCache.get(facilityId);\n    }\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(unitsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"facilityId\", \"==\", facilityId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const units = snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n    unitsCache.set(facilityId, units);\n    return units;\n}\nasync function getUnit(unitId) {\n    // Check cache first: iterate through all facilities in unitsCache\n    for (const facilityUnits of unitsCache.values()){\n        const found = facilityUnits.find((u)=>u.id === unitId);\n        if (found) {\n            return found;\n        }\n    }\n    const unitRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(unitsCollection, unitId);\n    const unitSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(unitRef);\n    if (unitSnap.exists()) {\n        const unit = {\n            id: unitSnap.id,\n            ...unitSnap.data()\n        };\n        // Pre-warm the cache if it doesn't exist for that facility\n        if (!unitsCache.has(unit.facilityId)) {\n            await getUnits(unit.facilityId);\n        }\n        return unit;\n    }\n    return null;\n}\nasync function updateUnit(unitId, data) {\n    const unitRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(unitsCollection, unitId);\n    const updateData = {\n        ...data,\n        updatedAt: Date.now()\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(unitRef, updateData);\n    // Update cache\n    unitsCache.forEach((units, facilityId)=>{\n        const index = units.findIndex((u)=>u.id === unitId);\n        if (index !== -1) {\n            const updatedUnits = [\n                ...units\n            ];\n            updatedUnits[index] = {\n                ...updatedUnits[index],\n                ...updateData\n            };\n            unitsCache.set(facilityId, updatedUnits);\n        }\n    });\n    if (unitDataCache.has(unitId) && unitDataCache.get(unitId).unit) {\n        unitDataCache.get(unitId).unit = {\n            ...unitDataCache.get(unitId).unit,\n            ...updateData\n        };\n    }\n}\nasync function deleteUnit(unitId, facilityId) {\n    const unitRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(unitsCollection, unitId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(unitRef);\n    // Delete related data\n    await deleteUnitPatients(unitId);\n    await deleteUnitNurses(unitId);\n    await deleteUnitPCTs(unitId);\n    await deleteUnitStaff(unitId);\n    // Update cache\n    const facilityUnits = unitsCache.get(facilityId) || [];\n    unitsCache.set(facilityId, facilityUnits.filter((u)=>u.id !== unitId));\n    unitDataCache.delete(unitId);\n}\n// Patient Functions\nasync function createPatient(patientData) {\n    const timestamp = Date.now();\n    const patientRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(patientsCollection);\n    const newPatient = {\n        ...patientData,\n        id: patientRef.id,\n        createdAt: timestamp,\n        updatedAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(patientRef, newPatient);\n    // Update cache\n    if (unitDataCache.has(patientData.unitId)) {\n        unitDataCache.get(patientData.unitId).patients.push(newPatient);\n    }\n    return newPatient;\n}\n// Batch create patients for better performance\nasync function batchCreatePatients(patientsData) {\n    if (patientsData.length === 0) {\n        return [];\n    }\n    const timestamp = Date.now();\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    const newPatients = [];\n    for (const patientData of patientsData){\n        const patientRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(patientsCollection);\n        const newPatient = {\n            ...patientData,\n            id: patientRef.id,\n            createdAt: timestamp,\n            updatedAt: timestamp\n        };\n        batch.set(patientRef, newPatient);\n        newPatients.push(newPatient);\n    }\n    await batch.commit();\n    return newPatients;\n}\nasync function getPatientsByUnit(unitId) {\n    if (!unitId) return [];\n    // Check cache first\n    const cachedData = unitDataCache.get(unitId);\n    if ((cachedData === null || cachedData === void 0 ? void 0 : cachedData.patients.length) > 0) {\n        return cachedData.patients;\n    }\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(patientsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const patients = snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n    if (unitDataCache.has(unitId)) {\n        unitDataCache.get(unitId).patients = patients;\n    } else {\n        unitDataCache.set(unitId, {\n            unit: null,\n            patients,\n            nurses: [],\n            pcts: [],\n            chargeNurse: null,\n            unitClerk: null\n        });\n    }\n    return patients;\n}\nasync function updatePatient(patientId, data) {\n    const patientRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(patientsCollection, patientId);\n    const updateData = {\n        ...data,\n        updatedAt: Date.now()\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(patientRef, updateData);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        const index = cachedData.patients.findIndex((p)=>p.id === patientId);\n        if (index !== -1) {\n            cachedData.patients[index] = {\n                ...cachedData.patients[index],\n                ...updateData\n            };\n            break;\n        }\n    }\n}\n// Batch update patients for better performance\nasync function batchUpdatePatients(updates) {\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    const timestamp = Date.now();\n    for (const { id, data } of updates){\n        const patientRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(patientsCollection, id);\n        batch.update(patientRef, {\n            ...data,\n            updatedAt: timestamp\n        });\n        // Update cache\n        for (const [unitId, cachedData] of unitDataCache.entries()){\n            const index = cachedData.patients.findIndex((p)=>p.id === id);\n            if (index !== -1) {\n                cachedData.patients[index] = {\n                    ...cachedData.patients[index],\n                    ...data,\n                    updatedAt: timestamp\n                };\n                break;\n            }\n        }\n    }\n    await batch.commit();\n}\nasync function deletePatient(patientId) {\n    const patientRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(patientsCollection, patientId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(patientRef);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        cachedData.patients = cachedData.patients.filter((p)=>p.id !== patientId);\n    }\n}\nasync function deleteUnitPatients(unitId) {\n    if (!unitId) return;\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(patientsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    if (snapshot.empty) {\n        return;\n    }\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    snapshot.docs.forEach((doc)=>{\n        batch.delete(doc.ref);\n    });\n    await batch.commit();\n}\n// Nurse Functions\nasync function createNurse(nurseData) {\n    const timestamp = Date.now();\n    const nurseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(nursesCollection);\n    const newNurse = {\n        ...nurseData,\n        id: nurseRef.id,\n        createdAt: timestamp,\n        updatedAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(nurseRef, newNurse);\n    // Update cache\n    if (unitDataCache.has(nurseData.unitId)) {\n        unitDataCache.get(nurseData.unitId).nurses.push(newNurse);\n    }\n    return newNurse;\n}\n// Batch create nurses for better performance\nasync function batchCreateNurses(nursesData) {\n    if (nursesData.length === 0) {\n        return [];\n    }\n    const timestamp = Date.now();\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    const newNurses = [];\n    for (const nurseData of nursesData){\n        const nurseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(nursesCollection);\n        const newNurse = {\n            ...nurseData,\n            id: nurseRef.id,\n            createdAt: timestamp,\n            updatedAt: timestamp\n        };\n        batch.set(nurseRef, newNurse);\n        newNurses.push(newNurse);\n    }\n    await batch.commit();\n    return newNurses;\n}\nasync function getNursesByUnit(unitId) {\n    if (!unitId) return [];\n    // Check cache first\n    const cachedData = unitDataCache.get(unitId);\n    if ((cachedData === null || cachedData === void 0 ? void 0 : cachedData.nurses.length) > 0) {\n        return cachedData.nurses;\n    }\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(nursesCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const nurses = snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n    if (unitDataCache.has(unitId)) {\n        unitDataCache.get(unitId).nurses = nurses;\n    } else {\n        unitDataCache.set(unitId, {\n            unit: null,\n            patients: [],\n            nurses,\n            pcts: [],\n            chargeNurse: null,\n            unitClerk: null\n        });\n    }\n    return nurses;\n}\nasync function updateNurse(nurseId, data) {\n    const nurseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(nursesCollection, nurseId);\n    const updateData = {\n        ...data,\n        updatedAt: Date.now()\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(nurseRef, updateData);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        const index = cachedData.nurses.findIndex((n)=>n.id === nurseId);\n        if (index !== -1) {\n            cachedData.nurses[index] = {\n                ...cachedData.nurses[index],\n                ...updateData\n            };\n            break;\n        }\n    }\n}\nasync function deleteNurse(nurseId) {\n    const nurseRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(nursesCollection, nurseId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(nurseRef);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        cachedData.nurses = cachedData.nurses.filter((n)=>n.id !== nurseId);\n    }\n}\nasync function deleteUnitNurses(unitId) {\n    if (!unitId) return;\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(nursesCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    if (snapshot.empty) {\n        return;\n    }\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    snapshot.docs.forEach((doc)=>{\n        batch.delete(doc.ref);\n    });\n    await batch.commit();\n}\n// PCT Functions\nasync function createPCT(pctData) {\n    const timestamp = Date.now();\n    const pctRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(pctsCollection);\n    const newPCT = {\n        ...pctData,\n        id: pctRef.id,\n        createdAt: timestamp,\n        updatedAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(pctRef, newPCT);\n    // Update cache\n    if (unitDataCache.has(pctData.unitId)) {\n        unitDataCache.get(pctData.unitId).pcts.push(newPCT);\n    }\n    return newPCT;\n}\n// Batch create PCTs for better performance\nasync function batchCreatePCTs(pctsData) {\n    if (pctsData.length === 0) {\n        return [];\n    }\n    const timestamp = Date.now();\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    const newPCTs = [];\n    for (const pctData of pctsData){\n        const pctRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(pctsCollection);\n        const newPCT = {\n            ...pctData,\n            id: pctRef.id,\n            createdAt: timestamp,\n            updatedAt: timestamp\n        };\n        batch.set(pctRef, newPCT);\n        newPCTs.push(newPCT);\n    }\n    await batch.commit();\n    return newPCTs;\n}\nasync function getPCTsByUnit(unitId) {\n    if (!unitId) return [];\n    // Check cache first\n    const cachedData = unitDataCache.get(unitId);\n    if ((cachedData === null || cachedData === void 0 ? void 0 : cachedData.pcts.length) > 0) {\n        return cachedData.pcts;\n    }\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(pctsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const pcts = snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n    if (unitDataCache.has(unitId)) {\n        unitDataCache.get(unitId).pcts = pcts;\n    } else {\n        unitDataCache.set(unitId, {\n            unit: null,\n            patients: [],\n            nurses: [],\n            pcts,\n            chargeNurse: null,\n            unitClerk: null\n        });\n    }\n    return pcts;\n}\nasync function updatePCT(pctId, data) {\n    const pctRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(pctsCollection, pctId);\n    const updateData = {\n        ...data,\n        updatedAt: Date.now()\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(pctRef, updateData);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        const index = cachedData.pcts.findIndex((p)=>p.id === pctId);\n        if (index !== -1) {\n            cachedData.pcts[index] = {\n                ...cachedData.pcts[index],\n                ...updateData\n            };\n            break;\n        }\n    }\n}\nasync function deletePCT(pctId) {\n    const pctRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(pctsCollection, pctId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(pctRef);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        cachedData.pcts = cachedData.pcts.filter((p)=>p.id !== pctId);\n    }\n}\nasync function deleteUnitPCTs(unitId) {\n    if (!unitId) return;\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(pctsCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    if (snapshot.empty) {\n        return;\n    }\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    snapshot.docs.forEach((doc)=>{\n        batch.delete(doc.ref);\n    });\n    await batch.commit();\n}\n// Staff Functions\nasync function createStaffMember(staffData) {\n    const timestamp = Date.now();\n    const staffRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(staffCollection);\n    const newStaff = {\n        ...staffData,\n        id: staffRef.id,\n        createdAt: timestamp,\n        updatedAt: timestamp\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(staffRef, newStaff);\n    // Update cache\n    if (unitDataCache.has(staffData.unitId)) {\n        if (staffData.role === \"chargeNurse\") {\n            unitDataCache.get(staffData.unitId).chargeNurse = newStaff;\n        } else if (staffData.role === \"unitClerk\") {\n            unitDataCache.get(staffData.unitId).unitClerk = newStaff;\n        }\n    }\n    return newStaff;\n}\n// Batch create staff members for better performance\nasync function batchCreateStaffMembers(staffData) {\n    if (staffData.length === 0) {\n        return [];\n    }\n    const timestamp = Date.now();\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    const newStaffMembers = [];\n    for (const staffMemberData of staffData){\n        const staffRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(staffCollection);\n        const newStaff = {\n            ...staffMemberData,\n            id: staffRef.id,\n            createdAt: timestamp,\n            updatedAt: timestamp\n        };\n        batch.set(staffRef, newStaff);\n        newStaffMembers.push(newStaff);\n    }\n    await batch.commit();\n    return newStaffMembers;\n}\nasync function getStaffByUnit(unitId) {\n    if (!unitId) return [];\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(staffCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    return snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n}\nasync function getStaffByUnitAndRole(unitId, role) {\n    if (!unitId) return null;\n    // Check cache first\n    const cachedData = unitDataCache.get(unitId);\n    if (role === \"chargeNurse\" && (cachedData === null || cachedData === void 0 ? void 0 : cachedData.chargeNurse)) {\n        return cachedData.chargeNurse;\n    } else if (role === \"unitClerk\" && (cachedData === null || cachedData === void 0 ? void 0 : cachedData.unitClerk)) {\n        return cachedData.unitClerk;\n    }\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(staffCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"role\", \"==\", role));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    if (snapshot.empty) {\n        return null;\n    }\n    const staffData = snapshot.docs[0].data();\n    const staffMember = {\n        id: snapshot.docs[0].id,\n        ...staffData\n    };\n    if (unitDataCache.has(unitId)) {\n        if (role === \"chargeNurse\") {\n            unitDataCache.get(unitId).chargeNurse = staffMember;\n        } else if (role === \"unitClerk\") {\n            unitDataCache.get(unitId).unitClerk = staffMember;\n        }\n    } else {\n        unitDataCache.set(unitId, {\n            unit: null,\n            patients: [],\n            nurses: [],\n            pcts: [],\n            chargeNurse: role === \"chargeNurse\" ? staffMember : null,\n            unitClerk: role === \"unitClerk\" ? staffMember : null\n        });\n    }\n    return staffMember;\n}\nasync function updateStaffMember(staffId, data) {\n    const staffRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(staffCollection, staffId);\n    const updateData = {\n        ...data,\n        updatedAt: Date.now()\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(staffRef, updateData);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        var _cachedData_chargeNurse, _cachedData_unitClerk;\n        if (((_cachedData_chargeNurse = cachedData.chargeNurse) === null || _cachedData_chargeNurse === void 0 ? void 0 : _cachedData_chargeNurse.id) === staffId) {\n            cachedData.chargeNurse = {\n                ...cachedData.chargeNurse,\n                ...updateData\n            };\n        } else if (((_cachedData_unitClerk = cachedData.unitClerk) === null || _cachedData_unitClerk === void 0 ? void 0 : _cachedData_unitClerk.id) === staffId) {\n            cachedData.unitClerk = {\n                ...cachedData.unitClerk,\n                ...updateData\n            };\n        }\n    }\n}\nasync function deleteStaffMember(staffId) {\n    const staffRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(staffCollection, staffId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(staffRef);\n    // Update cache\n    for (const [unitId, cachedData] of unitDataCache.entries()){\n        var _cachedData_chargeNurse, _cachedData_unitClerk;\n        if (((_cachedData_chargeNurse = cachedData.chargeNurse) === null || _cachedData_chargeNurse === void 0 ? void 0 : _cachedData_chargeNurse.id) === staffId) {\n            cachedData.chargeNurse = null;\n        } else if (((_cachedData_unitClerk = cachedData.unitClerk) === null || _cachedData_unitClerk === void 0 ? void 0 : _cachedData_unitClerk.id) === staffId) {\n            cachedData.unitClerk = null;\n        }\n    }\n}\nasync function deleteUnitStaff(unitId) {\n    if (!unitId) return;\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(staffCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"unitId\", \"==\", unitId));\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    if (snapshot.empty) {\n        return;\n    }\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    snapshot.docs.forEach((doc)=>{\n        batch.delete(doc.ref);\n    });\n    await batch.commit();\n}\n// Module Functions\nasync function getModules() {\n    const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(modulesCollection);\n    return snapshot.docs.map((doc)=>{\n        return {\n            id: doc.id,\n            ...doc.data()\n        };\n    });\n}\nasync function updateModule(moduleId, enabled) {\n    const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(modulesCollection, moduleId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(moduleRef, {\n        enabled,\n        updatedAt: Date.now()\n    });\n}\nasync function initializeModules(modules) {\n    const timestamp = Date.now();\n    const batch = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.writeBatch)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db);\n    for (const module of modules){\n        const moduleRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(modulesCollection, module.id);\n        const moduleSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(moduleRef);\n        if (!moduleSnap.exists()) {\n            batch.set(moduleRef, {\n                ...module,\n                updatedAt: timestamp\n            });\n        }\n    }\n    await batch.commit();\n}\n// Initialize default modules if they don't exist\nasync function setupDefaultModules() {\n    const defaultModules = [\n        {\n            id: \"mock-patient\",\n            name: \"Mock Patient Data\",\n            description: \"Generate mock patient data for testing\",\n            enabled: true\n        },\n        {\n            id: \"spectra-pool\",\n            name: \"Spectra Pool Management\",\n            description: \"Manage spectra pool assignments\",\n            enabled: false\n        },\n        {\n            id: \"acuity-tracking\",\n            name: \"Acuity Tracking\",\n            description: \"Track and manage patient acuity levels\",\n            enabled: true\n        },\n        {\n            id: \"bed-management\",\n            name: \"Bed Management\",\n            description: \"Track bed availability and assignments\",\n            enabled: true\n        },\n        {\n            id: \"staff-messaging\",\n            name: \"Staff Messaging\",\n            description: \"Internal messaging system for staff\",\n            enabled: false\n        }\n    ];\n    await initializeModules(defaultModules);\n}\n// Optimized function to load all unit data at once\nasync function loadUnitData(unitId) {\n    if (!unitId) {\n        return {\n            unit: null,\n            patients: [],\n            nurses: [],\n            pcts: [],\n            chargeNurse: null,\n            unitClerk: null\n        };\n    }\n    // Check cache first\n    const cached = unitDataCache.get(unitId);\n    if ((cached === null || cached === void 0 ? void 0 : cached.unit) && cached.patients.length > 0) {\n        return cached;\n    }\n    // Fetch the unit first, as we need it for context.\n    const unit = await getUnit(unitId);\n    // If no unit, there's nothing to load.\n    if (!unit) {\n        return {\n            unit: null,\n            patients: [],\n            nurses: [],\n            pcts: [],\n            chargeNurse: null,\n            unitClerk: null\n        };\n    }\n    // Now, fetch all related data in parallel.\n    const [patients, nurses, pcts, chargeNurse, unitClerk] = await Promise.all([\n        getPatientsByUnit(unitId),\n        getNursesByUnit(unitId),\n        getPCTsByUnit(unitId),\n        getStaffByUnitAndRole(unitId, \"chargeNurse\"),\n        getStaffByUnitAndRole(unitId, \"unitClerk\")\n    ]);\n    const data = {\n        unit,\n        patients,\n        nurses,\n        pcts,\n        chargeNurse,\n        unitClerk\n    };\n    // Store the fully loaded data in the cache.\n    unitDataCache.set(unitId, data);\n    return data;\n}\nasync function initializeUnitData(unit) {\n    // Generate all the data first\n    const patientsData = [];\n    const nursesData = [];\n    const pctsData = [];\n    const staffData = [];\n    // Generate patient data\n    for (const range of unit.roomRanges){\n        const [start, end] = range.split(\"-\").map((num)=>parseInt(num, 10));\n        for(let roomNum = start; roomNum <= end; roomNum++){\n            patientsData.push({\n                unitId: unit.id,\n                roomNumber: roomNum.toString(),\n                name: \"\",\n                acuity: Math.floor(Math.random() * 5) + 1,\n                assigned: false\n            });\n        }\n    }\n    // Generate nurse data\n    for(let i = 0; i < unit.nurseCardCount; i++){\n        nursesData.push({\n            unitId: unit.id,\n            name: \"Nurse \".concat(i + 1),\n            spectraNumber: \"SN\".concat(10000 + i),\n            reliefName: \"\",\n            assignedRooms: [],\n            acuityCapacity: 12\n        });\n    }\n    // Generate PCT data\n    for(let i = 0; i < unit.pctCardCount; i++){\n        // Divide room ranges among PCTs\n        const rangeIndex = i % unit.roomRanges.length;\n        const [start, end] = unit.roomRanges[rangeIndex].split(\"-\").map((num)=>parseInt(num, 10));\n        const rangeSize = end - start + 1;\n        const pctRangeSize = Math.ceil(rangeSize / unit.pctCardCount);\n        const pctStart = start + i * pctRangeSize;\n        const pctEnd = Math.min(pctStart + pctRangeSize - 1, end);\n        pctsData.push({\n            unitId: unit.id,\n            name: \"PCT \".concat(i + 1),\n            spectraNumber: \"PCT\".concat(10000 + i),\n            reliefName: \"\",\n            roomRange: \"\".concat(pctStart, \"-\").concat(pctEnd)\n        });\n    }\n    // Generate staff data\n    if (unit.hasChargeNurse) {\n        staffData.push({\n            unitId: unit.id,\n            name: \"\",\n            spectraNumber: \"\",\n            role: \"chargeNurse\"\n        });\n    }\n    if (unit.hasUnitClerk) {\n        staffData.push({\n            unitId: unit.id,\n            name: \"\",\n            spectraNumber: \"\",\n            role: \"unitClerk\"\n        });\n    }\n    const [patients, nurses, pcts, staffMembers] = await Promise.all([\n        batchCreatePatients(patientsData),\n        batchCreateNurses(nursesData),\n        batchCreatePCTs(pctsData),\n        batchCreateStaffMembers(staffData)\n    ]);\n    // Process staff members\n    let chargeNurse = null;\n    let unitClerk = null;\n    for (const staff of staffMembers){\n        if (staff.role === \"chargeNurse\") {\n            chargeNurse = staff;\n        } else if (staff.role === \"unitClerk\") {\n            unitClerk = staff;\n        }\n    }\n    return {\n        patients,\n        nurses,\n        pcts,\n        chargeNurse,\n        unitClerk\n    };\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase.ts\n"));

/***/ })

});
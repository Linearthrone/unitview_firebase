"use strict";exports.id=607,exports.ids=[607],exports.modules={1568:(e,s,t)=>{t.d(s,{I:()=>u});var a=t(687),i=t(3210),r=t(9523),n=t(2158),d=t(9048),o=t(7777),l=t(6660),c=t(140);function u({unitId:e}){let[s,t]=(0,i.useState)(null),[u,m]=(0,i.useState)([]),[p,g]=(0,i.useState)([]),[f,h]=(0,i.useState)([]),[b,x]=(0,i.useState)(null),[v,y]=(0,i.useState)(null),[j,N]=(0,i.useState)(!1),[w,C]=(0,i.useState)(!0),[R,k]=(0,i.useState)(!1),[E,U]=(0,i.useState)({patients:{},nurses:{},pcts:{},staff:{}}),S=(0,i.useMemo)(()=>u.filter(e=>!e.assigned),[u]),P=(0,i.useCallback)(async(e,s)=>{try{let t=p.find(s=>s.id===e),a=u.find(e=>e.id===s);if(!t||!a)return;let i=[...t.assignedRooms];i.includes(a.roomNumber)||(i.push(a.roomNumber),i.sort((e,s)=>parseInt(e)-parseInt(s))),g(p.map(s=>s.id===e?{...s,assignedRooms:i}:s)),m(u.map(e=>e.id===s?{...e,assigned:!0}:e)),U(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:i}},patients:{...t.patients,[s]:{assigned:!0}}})),await Promise.all([(0,l.Dr)(e,{assignedRooms:i}),(0,l.Z6)(s,{assigned:!0})]),U(t=>{let{[e]:a,...i}=t.nurses,{[s]:r,...n}=t.patients;return{...t,nurses:i,patients:n}})}catch(e){console.error("Error assigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[p,u]),M=(0,i.useCallback)(async(e,s)=>{try{let t=p.find(s=>s.id===e),a=u.find(e=>e.roomNumber===s);if(!t||!a)return;let i=t.assignedRooms.filter(e=>e!==s);g(p.map(s=>s.id===e?{...s,assignedRooms:i}:s)),m(u.map(e=>e.roomNumber===s?{...e,assigned:!1}:e)),U(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:i}},patients:{...s.patients,[a.id]:{assigned:!1}}})),await Promise.all([(0,l.Dr)(e,{assignedRooms:i}),(0,l.Z6)(a.id,{assigned:!1})]),U(s=>{let{[e]:t,...i}=s.nurses,{[a.id]:r,...n}=s.patients;return{...s,nurses:i,patients:n}})}catch(e){console.error("Error unassigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[p,u]),O=(0,i.useCallback)(async(e,s)=>{try{g(p.map(t=>t.id===e?{...t,...s}:t)),U(t=>({...t,nurses:{...t.nurses,[e]:{...t.nurses[e],...s}}})),await (0,l.Dr)(e,s),U(s=>{let{[e]:t,...a}=s.nurses;return{...s,nurses:a}}),(0,c.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[p]),F=(0,i.useCallback)(async(e,s)=>{try{h(f.map(t=>t.id===e?{...t,...s}:t)),U(t=>({...t,pcts:{...t.pcts,[e]:{...t.pcts[e],...s}}})),await (0,l.B5)(e,s),U(s=>{let{[e]:t,...a}=s.pcts;return{...s,pcts:a}}),(0,c.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,c.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[f]),I=(0,i.useCallback)(async e=>{try{if(!b)return;x({...b,...e}),U(s=>({...s,staff:{...s.staff,[b.id]:{...s.staff[b.id],...e}}})),await (0,l.e4)(b.id,e),U(e=>{let{[b.id]:s,...t}=e.staff;return{...e,staff:t}}),(0,c.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[b]),T=(0,i.useCallback)(async e=>{try{if(!v)return;y({...v,...e}),U(s=>({...s,staff:{...s.staff,[v.id]:{...s.staff[v.id],...e}}})),await (0,l.e4)(v.id,e),U(e=>{let{[v.id]:s,...t}=e.staff;return{...e,staff:t}}),(0,c.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,c.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[v]),D=(0,i.useCallback)(async()=>{try{let e=Object.entries(E.patients).map(([e,s])=>({id:e,data:s}));e.length>0&&await (0,l.cT)(e),await Promise.all([...Object.entries(E.nurses).map(([e,s])=>(0,l.Dr)(e,s)),...Object.entries(E.pcts).map(([e,s])=>(0,l.B5)(e,s)),...Object.entries(E.staff).map(([e,s])=>(0,l.e4)(e,s))]),U({patients:{},nurses:{},pcts:{},staff:{}}),N(!1),(0,c.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,c.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[E]),L=(0,i.useMemo)(()=>Object.keys(E.patients).length>0||Object.keys(E.nurses).length>0||Object.keys(E.pcts).length>0||Object.keys(E.staff).length>0,[E]);return w||R?(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,a.jsx)("p",{className:"text-gray-600",children:R?"Initializing unit data...":"Loading..."})]})}):s?(0,a.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,a.jsxs)("h3",{className:"text-xl font-semibold",children:[s.designation," Patient Grid"]}),(0,a.jsxs)("div",{className:"flex gap-2",children:[L&&(0,a.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,a.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,a.jsx)(r.$,{variant:j?"default":"outline",onClick:()=>j?D():N(!0),children:j?"Save Layout":"Edit Layout"})]})]}),(0,a.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,a.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,a.jsxs)("div",{className:"space-y-2",children:[S.map(e=>(0,a.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,a.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,a.jsxs)("span",{className:`px-2 py-1 rounded-full text-xs ${e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"}`,children:["Acuity ",e.acuity]})]},e.id)),0===S.length&&(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),p.map(e=>(0,a.jsx)(n.c,{nurse:e,patients:u,onAssign:s=>P(e.id,s),onUnassign:s=>M(e.id,s),onUpdate:s=>O(e.id,s),editMode:j},e.id)),f.map(e=>(0,a.jsx)(d.I,{pct:e,onUpdate:s=>F(e.id,s),editMode:j},e.id)),b&&(0,a.jsx)(o.v,{title:"Charge Nurse",staffMember:b,onUpdate:I,editMode:j,size:"small"}),v&&(0,a.jsx)(o.v,{title:"Unit Clerk",staffMember:v,onUpdate:T,editMode:j,size:"small"})]})]}):(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,a.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}},5726:(e,s,t)=>{t.d(s,{E:()=>r});var a=t(687),i=t(4780);function r({className:e,...s}){return(0,a.jsx)("div",{className:(0,i.cn)("animate-pulse rounded-md bg-gray-200",e),...s})}}};
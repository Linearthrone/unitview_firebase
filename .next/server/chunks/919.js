"use strict";exports.id=919,exports.ids=[919],exports.modules={3784:(e,t,s)=>{s.d(t,{Dq:()=>b,QC:()=>x,WM:()=>N,YB:()=>w,YU:()=>y,eI:()=>v});var a=s(7989),n=s(5535),i=s(146),r=s(7150);let d=0===(0,a.Dk)().length?(0,a.Wp)({apiKey:"AIzaSyARvbAJtv-NBJnJQ3EdZNU3WsMnXThFzhM",authDomain:"unitview.firebaseapp.com",databaseURL:"https://unitview-default-rtdb.firebaseio.com",projectId:"unitview",storageBucket:"unitview.firebasestorage.app",messagingSenderId:"185648925766",appId:"1:185648925766:web:5ae6271dd4977f6e158e47"}):(0,a.Dk)()[0],o=(0,n._A)(d,{localCache:(0,n.vK)({cacheSizeBytes:n.H6,tabManager:(0,n.cY)()})});try{(0,n.ol)(o).catch(e=>{console.error("Firestore persistence error:",e)})}catch(e){console.warn("Firestore persistence already enabled or not supported")}(0,i.c7)(d),(0,r.xI)(d);let l=(0,n.rJ)(o,"units"),c=(0,n.rJ)(o,"patients"),u=(0,n.rJ)(o,"nurses"),p=(0,n.rJ)(o,"pcts"),m=(0,n.rJ)(o,"staff"),g=(0,n.rJ)(o,"modules"),f=null,h=new Map;async function b(e){let t=Date.now(),s=(0,n.H9)(l),a={...e,id:s.id,createdAt:t,updatedAt:t};return await (0,n.BN)(s,a),f&&f.push(a),a}async function y(){if(f)return f;let e=(await (0,n.GG)(l)).docs.map(e=>e.data());return f=e,e}async function x(e){let t=h.get(e);if(t?.patients.length>0)return t.patients;let s=(0,n.P)(c,(0,n._M)("unitId","==",e)),a=(await (0,n.GG)(s)).docs.map(e=>e.data());return h.has(e)?h.get(e).patients=a:h.set(e,{unit:null,patients:a,nurses:[],pcts:[],chargeNurse:null,unitClerk:null}),a}async function v(){return(await (0,n.GG)(g)).docs.map(e=>e.data())}async function w(e,t){let s=(0,n.H9)(g,e);await (0,n.mZ)(s,{enabled:t,updatedAt:Date.now()})}async function j(e){let t=Date.now(),s=(0,n.wP)(o);for(let a of e){let e=(0,n.H9)(g,a.id);(await (0,n.x7)(e)).exists()||s.set(e,{...a,updatedAt:t})}await s.commit()}async function N(){await j([{id:"mock-patient",name:"Mock Patient Data",description:"Generate mock patient data for testing",enabled:!0},{id:"spectra-pool",name:"Spectra Pool Management",description:"Manage spectra pool assignments",enabled:!1},{id:"acuity-tracking",name:"Acuity Tracking",description:"Track and manage patient acuity levels",enabled:!0},{id:"bed-management",name:"Bed Management",description:"Track bed availability and assignments",enabled:!0},{id:"staff-messaging",name:"Staff Messaging",description:"Internal messaging system for staff",enabled:!1}])}},7916:(e,t,s)=>{s.d(t,{I:()=>u});var a=s(687),n=s(3210),i=s(9523),r=s(2158),d=s(9048),o=s(7777),l=s(6660),c=s(140);function u({unitId:e}){let[t,s]=(0,n.useState)(null),[u,p]=(0,n.useState)([]),[m,g]=(0,n.useState)([]),[f,h]=(0,n.useState)([]),[b,y]=(0,n.useState)(null),[x,v]=(0,n.useState)(null),[w,j]=(0,n.useState)(!1),[N,k]=(0,n.useState)(!0),[C,R]=(0,n.useState)(!1),[M,U]=(0,n.useState)({patients:{},nurses:{},pcts:{},staff:{}}),S=(0,n.useMemo)(()=>u.filter(e=>!e.assigned),[u]),E=(0,n.useCallback)(async(e,t)=>{try{let s=m.find(t=>t.id===e),a=u.find(e=>e.id===t);if(!s||!a)return;let n=[...s.assignedRooms];n.includes(a.roomNumber)||(n.push(a.roomNumber),n.sort((e,t)=>parseInt(e)-parseInt(t))),g(m.map(t=>t.id===e?{...t,assignedRooms:n}:t)),p(u.map(e=>e.id===t?{...e,assigned:!0}:e)),U(s=>({...s,nurses:{...s.nurses,[e]:{assignedRooms:n}},patients:{...s.patients,[t]:{assigned:!0}}})),await Promise.all([(0,l.Dr)(e,{assignedRooms:n}),(0,l.Z6)(t,{assigned:!0})]),U(s=>{let{[e]:a,...n}=s.nurses,{[t]:i,...r}=s.patients;return{...s,nurses:n,patients:r}})}catch(e){console.error("Error assigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to assign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[m,u]),P=(0,n.useCallback)(async(e,t)=>{try{let s=m.find(t=>t.id===e),a=u.find(e=>e.roomNumber===t);if(!s||!a)return;let n=s.assignedRooms.filter(e=>e!==t);g(m.map(t=>t.id===e?{...t,assignedRooms:n}:t)),p(u.map(e=>e.roomNumber===t?{...e,assigned:!1}:e)),U(t=>({...t,nurses:{...t.nurses,[e]:{assignedRooms:n}},patients:{...t.patients,[a.id]:{assigned:!1}}})),await Promise.all([(0,l.Dr)(e,{assignedRooms:n}),(0,l.Z6)(a.id,{assigned:!1})]),U(t=>{let{[e]:s,...n}=t.nurses,{[a.id]:i,...r}=t.patients;return{...t,nurses:n,patients:r}})}catch(e){console.error("Error unassigning patient:",e),(0,c.oR)({title:"Error",description:"Failed to unassign patient. Changes will be saved when connection is restored.",variant:"destructive"})}},[m,u]),I=(0,n.useCallback)(async(e,t)=>{try{g(m.map(s=>s.id===e?{...s,...t}:s)),U(s=>({...s,nurses:{...s.nurses,[e]:{...s.nurses[e],...t}}})),await (0,l.Dr)(e,t),U(t=>{let{[e]:s,...a}=t.nurses;return{...t,nurses:a}}),(0,c.oR)({title:"Nurse Updated",description:"Nurse information has been updated"})}catch(e){console.error("Error updating nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[m]),A=(0,n.useCallback)(async(e,t)=>{try{h(f.map(s=>s.id===e?{...s,...t}:s)),U(s=>({...s,pcts:{...s.pcts,[e]:{...s.pcts[e],...t}}})),await (0,l.B5)(e,t),U(t=>{let{[e]:s,...a}=t.pcts;return{...t,pcts:a}}),(0,c.oR)({title:"PCT Updated",description:"PCT information has been updated"})}catch(e){console.error("Error updating PCT:",e),(0,c.oR)({title:"Error",description:"Failed to update PCT information. Changes will be saved when connection is restored.",variant:"destructive"})}},[f]),D=(0,n.useCallback)(async e=>{try{if(!b)return;y({...b,...e}),U(t=>({...t,staff:{...t.staff,[b.id]:{...t.staff[b.id],...e}}})),await (0,l.e4)(b.id,e),U(e=>{let{[b.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Charge Nurse Updated",description:"Charge nurse information has been updated"})}catch(e){console.error("Error updating charge nurse:",e),(0,c.oR)({title:"Error",description:"Failed to update charge nurse information. Changes will be saved when connection is restored.",variant:"destructive"})}},[b]),F=(0,n.useCallback)(async e=>{try{if(!x)return;v({...x,...e}),U(t=>({...t,staff:{...t.staff,[x.id]:{...t.staff[x.id],...e}}})),await (0,l.e4)(x.id,e),U(e=>{let{[x.id]:t,...s}=e.staff;return{...e,staff:s}}),(0,c.oR)({title:"Unit Clerk Updated",description:"Unit clerk information has been updated"})}catch(e){console.error("Error updating unit clerk:",e),(0,c.oR)({title:"Error",description:"Failed to update unit clerk information. Changes will be saved when connection is restored.",variant:"destructive"})}},[x]),J=(0,n.useCallback)(async()=>{try{let e=Object.entries(M.patients).map(([e,t])=>({id:e,data:t}));e.length>0&&await (0,l.cT)(e),await Promise.all([...Object.entries(M.nurses).map(([e,t])=>(0,l.Dr)(e,t)),...Object.entries(M.pcts).map(([e,t])=>(0,l.B5)(e,t)),...Object.entries(M.staff).map(([e,t])=>(0,l.e4)(e,t))]),U({patients:{},nurses:{},pcts:{},staff:{}}),j(!1),(0,c.oR)({title:"Layout Saved",description:"Unit layout has been saved successfully"})}catch(e){console.error("Error saving layout:",e),(0,c.oR)({title:"Error",description:"Failed to save some changes. Please try again.",variant:"destructive"})}},[M]),T=(0,n.useMemo)(()=>Object.keys(M.patients).length>0||Object.keys(M.nurses).length>0||Object.keys(M.pcts).length>0||Object.keys(M.staff).length>0,[M]);return N||C?(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4 flex items-center justify-center h-64",children:(0,a.jsxs)("div",{className:"text-center",children:[(0,a.jsx)("div",{className:"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3"}),(0,a.jsx)("p",{className:"text-gray-600",children:C?"Initializing unit data...":"Loading..."})]})}):t?(0,a.jsxs)("div",{className:"bg-white rounded-lg border p-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center mb-6",children:[(0,a.jsxs)("h3",{className:"text-xl font-semibold",children:[t.designation," Patient Grid"]}),(0,a.jsxs)("div",{className:"flex gap-2",children:[T&&(0,a.jsxs)("div",{className:"text-amber-600 text-sm flex items-center",children:[(0,a.jsx)("span",{className:"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1"}),"Unsaved changes"]}),(0,a.jsx)(i.$,{variant:w?"default":"outline",onClick:()=>w?J():j(!0),children:w?"Save Layout":"Edit Layout"})]})]}),(0,a.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",children:[(0,a.jsxs)("div",{className:"border rounded-lg p-4",children:[(0,a.jsx)("h4",{className:"font-medium mb-3",children:"Unassigned Patients"}),(0,a.jsxs)("div",{className:"space-y-2",children:[S.map(e=>(0,a.jsxs)("div",{className:"flex justify-between items-center p-2 border rounded bg-gray-50",children:[(0,a.jsxs)("div",{children:[(0,a.jsxs)("span",{className:"font-medium",children:["Room ",e.roomNumber]}),e.name&&(0,a.jsx)("span",{className:"ml-2 text-sm",children:e.name})]}),(0,a.jsxs)("span",{className:`px-2 py-1 rounded-full text-xs ${e.acuity>=4?"bg-red-100 text-red-800":e.acuity>=3?"bg-yellow-100 text-yellow-800":"bg-green-100 text-green-800"}`,children:["Acuity ",e.acuity]})]},e.id)),0===S.length&&(0,a.jsx)("p",{className:"text-sm text-gray-500 italic",children:"All patients assigned"})]})]}),m.map(e=>(0,a.jsx)(r.c,{nurse:e,patients:u,onAssign:t=>E(e.id,t),onUnassign:t=>P(e.id,t),onUpdate:t=>I(e.id,t),editMode:w},e.id)),f.map(e=>(0,a.jsx)(d.I,{pct:e,onUpdate:t=>A(e.id,t),editMode:w},e.id)),b&&(0,a.jsx)(o.v,{title:"Charge Nurse",staffMember:b,onUpdate:D,editMode:w,size:"small"}),x&&(0,a.jsx)(o.v,{title:"Unit Clerk",staffMember:x,onUpdate:F,editMode:w,size:"small"})]})]}):(0,a.jsx)("div",{className:"bg-white rounded-lg border p-4",children:(0,a.jsx)("p",{className:"text-center text-gray-500",children:"Unit not found"})})}}};
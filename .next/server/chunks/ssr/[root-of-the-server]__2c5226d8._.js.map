{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(buttonVariants({ variant, size }), className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonVariants };"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,wQACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SAAS;YACT,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;QAAK,IAAI;QACjD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/facility/create-unit-dialog.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport * as React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Unit } from '@/lib/firebase';\r\n\r\ninterface CreateUnitDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onCreateUnit: (unitData: Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>) => void;\r\n}\r\n\r\nexport function CreateUnitDialog({ open, onClose, onCreateUnit }: CreateUnitDialogProps) {\r\n  const [formData, setFormData] = useState<Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>>({\r\n    designation: '',\r\n    roomCount: 0,\r\n    roomRanges: [''],\r\n    nurseCardCount: 2,\r\n    pctCardCount: 1,\r\n    hasChargeNurse: true,\r\n    hasUnitClerk: true\r\n  });\r\n  \r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    \r\n    if (!formData.designation.trim()) {\r\n      newErrors.designation = 'Unit designation is required';\r\n    }\r\n    \r\n    if (formData.roomCount <= 0) {\r\n      newErrors.roomCount = 'Number of rooms must be greater than 0';\r\n    }\r\n    \r\n    if (formData.roomRanges.length === 0 || !formData.roomRanges[0]) {\r\n      newErrors.roomRanges = 'At least one room range is required';\r\n    } else {\r\n      // Validate room range format (e.g., 401-412)\r\n      const invalidRanges = formData.roomRanges.filter(range => {\r\n        if (!range) return true;\r\n        const parts = range.split('-');\r\n        if (parts.length !== 2) return true;\r\n        const [start, end] = parts.map(p => parseInt(p.trim(), 10));\r\n        return isNaN(start) || isNaN(end) || start >= end;\r\n      });\r\n      \r\n      if (invalidRanges.length > 0) {\r\n        newErrors.roomRanges = 'Room ranges must be in format \"start-end\" (e.g., 401-412)';\r\n      }\r\n    }\r\n    \r\n    if (formData.nurseCardCount <= 0) {\r\n      newErrors.nurseCardCount = 'Number of nurse cards must be greater than 0';\r\n    }\r\n    \r\n    if (formData.pctCardCount < 0) {\r\n      newErrors.pctCardCount = 'Number of PCT cards cannot be negative';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value, type } = e.target as HTMLInputElement;\r\n    \r\n    if (type === 'checkbox') {\r\n      const { checked } = e.target as HTMLInputElement;\r\n      setFormData({ ...formData, [name]: checked });\r\n    } else if (name === 'roomRanges') {\r\n      // Handle room ranges as comma-separated values\r\n      setFormData({ ...formData, roomRanges: value.split(',').map(range => range.trim()).filter(Boolean) });\r\n    } else if (name === 'roomCount' || name === 'nurseCardCount' || name === 'pctCardCount') {\r\n      // Convert string to number for numeric fields\r\n      setFormData({ ...formData, [name]: parseInt(value, 10) || 0 });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n    \r\n    // Clear error for this field if it exists\r\n    if (errors[name]) {\r\n      setErrors({ ...errors, [name]: '' });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (validateForm()) {\r\n      onCreateUnit(formData);\r\n      // Reset form\r\n      setFormData({\r\n        designation: '',\r\n        roomCount: 0,\r\n        roomRanges: [''],\r\n        nurseCardCount: 2,\r\n        pctCardCount: 1,\r\n        hasChargeNurse: true,\r\n        hasUnitClerk: true\r\n      });\r\n      setErrors({});\r\n    }\r\n  };\r\n\r\n  if (!open) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n        <h2 className=\"text-2xl font-bold mb-4\">Create New Unit</h2>\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"space-y-4\">\r\n            {/* Unit Designation */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">\r\n                Unit Designation\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"designation\"\r\n                value={formData.designation}\r\n                onChange={handleChange}\r\n                className={`w-full p-2 border rounded ${errors.designation ? 'border-red-500' : ''}`}\r\n                placeholder=\"e.g., 4 West\"\r\n              />\r\n              {errors.designation && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.designation}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Number of Patient Rooms */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">\r\n                Number of Patient Rooms\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"roomCount\"\r\n                value={formData.roomCount}\r\n                onChange={handleChange}\r\n                className={`w-full p-2 border rounded ${errors.roomCount ? 'border-red-500' : ''}`}\r\n                min=\"1\"\r\n              />\r\n              {errors.roomCount && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.roomCount}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Room Number Ranges */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">\r\n                Room Number Range(s)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"roomRanges\"\r\n                value={formData.roomRanges.join(', ')}\r\n                onChange={handleChange}\r\n                className={`w-full p-2 border rounded ${errors.roomRanges ? 'border-red-500' : ''}`}\r\n                placeholder=\"e.g., 401-412, 450-455\"\r\n              />\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                Enter ranges separated by commas (e.g., 401-412, 450-455)\r\n              </p>\r\n              {errors.roomRanges && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.roomRanges}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Nurse Cards */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">\r\n                Standard Number of Nurse Cards\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"nurseCardCount\"\r\n                value={formData.nurseCardCount}\r\n                onChange={handleChange}\r\n                className={`w-full p-2 border rounded ${errors.nurseCardCount ? 'border-red-500' : ''}`}\r\n                min=\"1\"\r\n              />\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                1x3 cards with nurse name, spectra number, relief nurse, and patient assignments\r\n              </p>\r\n              {errors.nurseCardCount && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.nurseCardCount}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* PCT Cards */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium mb-1\">\r\n                Number of PCT Cards\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"pctCardCount\"\r\n                value={formData.pctCardCount}\r\n                onChange={handleChange}\r\n                className={`w-full p-2 border rounded ${errors.pctCardCount ? 'border-red-500' : ''}`}\r\n                min=\"0\"\r\n              />\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                2x2 cards for patient care techs with name, spectra number, relief tech, and room assignments\r\n              </p>\r\n              {errors.pctCardCount && (\r\n                <p className=\"text-red-500 text-xs mt-1\">{errors.pctCardCount}</p>\r\n              )}\r\n            </div>\r\n            \r\n            {/* Charge Nurse */}\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"hasChargeNurse\"\r\n                checked={formData.hasChargeNurse}\r\n                onChange={handleChange}\r\n                className=\"mr-2\"\r\n                id=\"hasChargeNurse\"\r\n              />\r\n              <label className=\"text-sm font-medium\" htmlFor=\"hasChargeNurse\">\r\n                Include Charge Nurse Card (2x1)\r\n              </label>\r\n            </div>\r\n            \r\n            {/* Unit Clerk */}\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"hasUnitClerk\"\r\n                checked={formData.hasUnitClerk}\r\n                onChange={handleChange}\r\n                className=\"mr-2\"\r\n                id=\"hasUnitClerk\"\r\n              />\r\n              <label className=\"text-sm font-medium\" htmlFor=\"hasUnitClerk\">\r\n                Include Unit Clerk Card (2x1)\r\n              </label>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-end space-x-3 mt-6\">\r\n            <Button variant=\"outline\" type=\"button\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\">\r\n              Create Unit\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;;;;AAaO,SAAS,iBAAiB,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAyB;IACrF,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgD;QACrF,aAAa;QACb,WAAW;QACX,YAAY;YAAC;SAAG;QAChB,gBAAgB;QAChB,cAAc;QACd,gBAAgB;QAChB,cAAc;IAChB;IAEA,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA0B,CAAC;IAE9D,MAAM,eAAe;QACnB,MAAM,YAAoC,CAAC;QAE3C,IAAI,CAAC,SAAS,WAAW,CAAC,IAAI,IAAI;YAChC,UAAU,WAAW,GAAG;QAC1B;QAEA,IAAI,SAAS,SAAS,IAAI,GAAG;YAC3B,UAAU,SAAS,GAAG;QACxB;QAEA,IAAI,SAAS,UAAU,CAAC,MAAM,KAAK,KAAK,CAAC,SAAS,UAAU,CAAC,EAAE,EAAE;YAC/D,UAAU,UAAU,GAAG;QACzB,OAAO;YACL,6CAA6C;YAC7C,MAAM,gBAAgB,SAAS,UAAU,CAAC,MAAM,CAAC,CAAA;gBAC/C,IAAI,CAAC,OAAO,OAAO;gBACnB,MAAM,QAAQ,MAAM,KAAK,CAAC;gBAC1B,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;gBAC/B,MAAM,CAAC,OAAO,IAAI,GAAG,MAAM,GAAG,CAAC,CAAA,IAAK,SAAS,EAAE,IAAI,IAAI;gBACvD,OAAO,MAAM,UAAU,MAAM,QAAQ,SAAS;YAChD;YAEA,IAAI,cAAc,MAAM,GAAG,GAAG;gBAC5B,UAAU,UAAU,GAAG;YACzB;QACF;QAEA,IAAI,SAAS,cAAc,IAAI,GAAG;YAChC,UAAU,cAAc,GAAG;QAC7B;QAEA,IAAI,SAAS,YAAY,GAAG,GAAG;YAC7B,UAAU,YAAY,GAAG;QAC3B;QAEA,UAAU;QACV,OAAO,OAAO,IAAI,CAAC,WAAW,MAAM,KAAK;IAC3C;IAEA,MAAM,eAAe,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM;QAEtC,IAAI,SAAS,YAAY;YACvB,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM;YAC5B,YAAY;gBAAE,GAAG,QAAQ;gBAAE,CAAC,KAAK,EAAE;YAAQ;QAC7C,OAAO,IAAI,SAAS,cAAc;YAChC,+CAA+C;YAC/C,YAAY;gBAAE,GAAG,QAAQ;gBAAE,YAAY,MAAM,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,QAAS,MAAM,IAAI,IAAI,MAAM,CAAC;YAAS;QACrG,OAAO,IAAI,SAAS,eAAe,SAAS,oBAAoB,SAAS,gBAAgB;YACvF,8CAA8C;YAC9C,YAAY;gBAAE,GAAG,QAAQ;gBAAE,CAAC,KAAK,EAAE,SAAS,OAAO,OAAO;YAAE;QAC9D,OAAO;YACL,YAAY;gBAAE,GAAG,QAAQ;gBAAE,CAAC,KAAK,EAAE;YAAM;QAC3C;QAEA,0CAA0C;QAC1C,IAAI,MAAM,CAAC,KAAK,EAAE;YAChB,UAAU;gBAAE,GAAG,MAAM;gBAAE,CAAC,KAAK,EAAE;YAAG;QACpC;IACF;IAEA,MAAM,eAAe,CAAC;QACpB,EAAE,cAAc;QAEhB,IAAI,gBAAgB;YAClB,aAAa;YACb,aAAa;YACb,YAAY;gBACV,aAAa;gBACb,WAAW;gBACX,YAAY;oBAAC;iBAAG;gBAChB,gBAAgB;gBAChB,cAAc;gBACd,gBAAgB;gBAChB,cAAc;YAChB;YACA,UAAU,CAAC;QACb;IACF;IAEA,IAAI,CAAC,MAAM,OAAO;IAElB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAA0B;;;;;;8BAExC,8OAAC;oBAAK,UAAU;;sCACd,8OAAC;4BAAI,WAAU;;8CAEb,8OAAC;;sDACC,8OAAC;4CAAM,WAAU;sDAAiC;;;;;;sDAGlD,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,OAAO,SAAS,WAAW;4CAC3B,UAAU;4CACV,WAAW,CAAC,0BAA0B,EAAE,OAAO,WAAW,GAAG,mBAAmB,IAAI;4CACpF,aAAY;;;;;;wCAEb,OAAO,WAAW,kBACjB,8OAAC;4CAAE,WAAU;sDAA6B,OAAO,WAAW;;;;;;;;;;;;8CAKhE,8OAAC;;sDACC,8OAAC;4CAAM,WAAU;sDAAiC;;;;;;sDAGlD,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,OAAO,SAAS,SAAS;4CACzB,UAAU;4CACV,WAAW,CAAC,0BAA0B,EAAE,OAAO,SAAS,GAAG,mBAAmB,IAAI;4CAClF,KAAI;;;;;;wCAEL,OAAO,SAAS,kBACf,8OAAC;4CAAE,WAAU;sDAA6B,OAAO,SAAS;;;;;;;;;;;;8CAK9D,8OAAC;;sDACC,8OAAC;4CAAM,WAAU;sDAAiC;;;;;;sDAGlD,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,OAAO,SAAS,UAAU,CAAC,IAAI,CAAC;4CAChC,UAAU;4CACV,WAAW,CAAC,0BAA0B,EAAE,OAAO,UAAU,GAAG,mBAAmB,IAAI;4CACnF,aAAY;;;;;;sDAEd,8OAAC;4CAAE,WAAU;sDAA6B;;;;;;wCAGzC,OAAO,UAAU,kBAChB,8OAAC;4CAAE,WAAU;sDAA6B,OAAO,UAAU;;;;;;;;;;;;8CAK/D,8OAAC;;sDACC,8OAAC;4CAAM,WAAU;sDAAiC;;;;;;sDAGlD,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,OAAO,SAAS,cAAc;4CAC9B,UAAU;4CACV,WAAW,CAAC,0BAA0B,EAAE,OAAO,cAAc,GAAG,mBAAmB,IAAI;4CACvF,KAAI;;;;;;sDAEN,8OAAC;4CAAE,WAAU;sDAA6B;;;;;;wCAGzC,OAAO,cAAc,kBACpB,8OAAC;4CAAE,WAAU;sDAA6B,OAAO,cAAc;;;;;;;;;;;;8CAKnE,8OAAC;;sDACC,8OAAC;4CAAM,WAAU;sDAAiC;;;;;;sDAGlD,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,OAAO,SAAS,YAAY;4CAC5B,UAAU;4CACV,WAAW,CAAC,0BAA0B,EAAE,OAAO,YAAY,GAAG,mBAAmB,IAAI;4CACrF,KAAI;;;;;;sDAEN,8OAAC;4CAAE,WAAU;sDAA6B;;;;;;wCAGzC,OAAO,YAAY,kBAClB,8OAAC;4CAAE,WAAU;sDAA6B,OAAO,YAAY;;;;;;;;;;;;8CAKjE,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,SAAS,SAAS,cAAc;4CAChC,UAAU;4CACV,WAAU;4CACV,IAAG;;;;;;sDAEL,8OAAC;4CAAM,WAAU;4CAAsB,SAAQ;sDAAiB;;;;;;;;;;;;8CAMlE,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CACC,MAAK;4CACL,MAAK;4CACL,SAAS,SAAS,YAAY;4CAC9B,UAAU;4CACV,WAAU;4CACV,IAAG;;;;;;sDAEL,8OAAC;4CAAM,WAAU;4CAAsB,SAAQ;sDAAe;;;;;;;;;;;;;;;;;;sCAMlE,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,kIAAA,CAAA,SAAM;oCAAC,SAAQ;oCAAU,MAAK;oCAAS,SAAS;8CAAS;;;;;;8CAG1D,8OAAC,kIAAA,CAAA,SAAM;oCAAC,MAAK;8CAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQlC","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/ui/switch.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Switch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SwitchPrimitives.Root\r\n    className={cn(\r\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  >\r\n    <SwitchPrimitives.Thumb\r\n      className={cn(\r\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\r\n      )}\r\n    />\r\n  </SwitchPrimitives.Root>\r\n));\r\nSwitch.displayName = SwitchPrimitives.Root.displayName;\r\n\r\nexport { Switch };"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,OAAqB;QACpB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sXACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,8OAAC,kKAAA,CAAA,QAAsB;YACrB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,kKAAA,CAAA,OAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/facility/module-toggle-card.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Module } from '@/lib/firebase';\r\n\r\ninterface ModuleToggleCardProps {\r\n  module: Module;\r\n  onToggle: () => void;\r\n}\r\n\r\nexport function ModuleToggleCard({ module, onToggle }: ModuleToggleCardProps) {\r\n  return (\r\n    <div className={`border rounded-lg p-4 ${module.enabled ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}>\r\n      <div className=\"flex justify-between items-start mb-2\">\r\n        <h3 className=\"font-medium text-lg\">{module.name}</h3>\r\n        <Switch \r\n          checked={module.enabled} \r\n          onCheckedChange={onToggle}\r\n          className=\"data-[state=checked]:bg-blue-600\"\r\n        />\r\n      </div>\r\n      <p className=\"text-sm text-gray-600\">{module.description}</p>\r\n      <div className=\"mt-3\">\r\n        <span className={`text-xs px-2 py-1 rounded-full ${\r\n          module.enabled ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\r\n        }`}>\r\n          {module.enabled ? 'Enabled' : 'Disabled'}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAUO,SAAS,iBAAiB,EAAE,MAAM,EAAE,QAAQ,EAAyB;IAC1E,qBACE,8OAAC;QAAI,WAAW,CAAC,sBAAsB,EAAE,OAAO,OAAO,GAAG,+BAA+B,mBAAmB;;0BAC1G,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAuB,OAAO,IAAI;;;;;;kCAChD,8OAAC,kIAAA,CAAA,SAAM;wBACL,SAAS,OAAO,OAAO;wBACvB,iBAAiB;wBACjB,WAAU;;;;;;;;;;;;0BAGd,8OAAC;gBAAE,WAAU;0BAAyB,OAAO,WAAW;;;;;;0BACxD,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAK,WAAW,CAAC,+BAA+B,EAC/C,OAAO,OAAO,GAAG,8BAA8B,6BAC/C;8BACC,OAAO,OAAO,GAAG,YAAY;;;;;;;;;;;;;;;;;AAKxC","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/shared/nurse-card.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Nurse, Patient } from '@/lib/firebase';\r\n\r\ninterface NurseCardProps {\r\n  nurse: Nurse;\r\n  patients: Patient[];\r\n  onAssign: (patientId: string) => void;\r\n  onUnassign: (roomNumber: string) => void;\r\n  onUpdate: (data: Partial<Nurse>) => void;\r\n  editMode: boolean;\r\n}\r\n\r\nexport function NurseCard({ nurse, patients, onAssign, onUnassign, onUpdate, editMode }: NurseCardProps) {\r\n  const [isAssigning, setIsAssigning] = useState(false);\r\n  \r\n  // Calculate total acuity for this nurse\r\n  const totalAcuity = nurse.assignedRooms.reduce((sum, roomNumber) => {\r\n    const patient = patients.find(p => p.roomNumber === roomNumber);\r\n    return sum + (patient ? patient.acuity : 0);\r\n  }, 0);\r\n  \r\n  // Determine if nurse is overloaded\r\n  const isOverloaded = totalAcuity > nurse.acuityCapacity;\r\n  \r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ name: e.target.value });\r\n  };\r\n  \r\n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ spectraNumber: e.target.value });\r\n  };\r\n  \r\n  const handleReliefChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ reliefName: e.target.value });\r\n  };\r\n  \r\n  const handleAcuityCapacityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ acuityCapacity: parseInt(e.target.value, 10) || 0 });\r\n  };\r\n  \r\n  return (\r\n    <div className={`border rounded-lg p-4 ${isOverloaded ? 'border-red-500 bg-red-50' : 'border-blue-200'}`}>\r\n      <div className=\"flex justify-between items-start mb-3\">\r\n        <h4 className=\"font-medium\">Nurse Assignment</h4>\r\n        {isOverloaded && (\r\n          <span className=\"bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full\">\r\n            Acuity Alert\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Nurse Information */}\r\n      <div className=\"space-y-2 mb-4\">\r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Name</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={nurse.name}\r\n              onChange={handleNameChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"font-medium\">{nurse.name || 'Unassigned'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={nurse.spectraNumber}\r\n              onChange={handleSpectraChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"text-sm\">{nurse.spectraNumber || 'N/A'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Relief</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={nurse.reliefName}\r\n              onChange={handleReliefChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"text-sm\">{nurse.reliefName || 'None'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Acuity Capacity</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"number\"\r\n              value={nurse.acuityCapacity}\r\n              onChange={handleAcuityCapacityChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n              min=\"1\"\r\n            />\r\n          ) : (\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                <div \r\n                  className={`h-2.5 rounded-full ${\r\n                    isOverloaded ? 'bg-red-600' : 'bg-blue-600'\r\n                  }`}\r\n                  style={{ width: `${Math.min(100, (totalAcuity / nurse.acuityCapacity) * 100)}%` }}\r\n                ></div>\r\n              </div>\r\n              <span className=\"ml-2 text-xs font-medium\">\r\n                {totalAcuity}/{nurse.acuityCapacity}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Patient Assignments */}\r\n      <div>\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <label className=\"text-xs text-gray-500\">Patient Assignments</label>\r\n          {!editMode && (\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\" \r\n              className=\"text-xs py-1 h-auto\"\r\n              onClick={() => setIsAssigning(!isAssigning)}\r\n            >\r\n              {isAssigning ? 'Done' : 'Assign'}\r\n            </Button>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Assigned Rooms */}\r\n        <div className=\"space-y-1 mb-3\">\r\n          {nurse.assignedRooms.length > 0 ? (\r\n            nurse.assignedRooms.map(roomNumber => {\r\n              const patient = patients.find(p => p.roomNumber === roomNumber);\r\n              return (\r\n                <div key={roomNumber} className=\"flex justify-between items-center p-1.5 bg-gray-50 rounded border\">\r\n                  <div className=\"flex items-center\">\r\n                    <span className=\"font-medium text-sm\">Room {roomNumber}</span>\r\n                    {patient?.name && <span className=\"ml-2 text-xs\">{patient.name}</span>}\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    {patient && (\r\n                      <span className={`px-1.5 py-0.5 rounded-full text-xs mr-2 ${\r\n                        patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\r\n                        patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\r\n                        'bg-green-100 text-green-800'\r\n                      }`}>\r\n                        {patient.acuity}\r\n                      </span>\r\n                    )}\r\n                    {!editMode && (\r\n                      <button\r\n                        onClick={() => onUnassign(roomNumber)}\r\n                        className=\"text-red-500 text-xs hover:text-red-700\"\r\n                        aria-label=\"Remove patient assignment\"\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p className=\"text-sm text-gray-500 italic\">No patients assigned</p>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Assignment Selector */}\r\n        {isAssigning && !editMode && (\r\n          <div className=\"mt-3 border-t pt-2\">\r\n            <p className=\"text-xs font-medium mb-2\">Select a patient to assign:</p>\r\n            <div className=\"grid grid-cols-2 gap-1\">\r\n              {patients\r\n                .filter(patient => !patient.assigned)\r\n                .map(patient => (\r\n                  <button\r\n                    key={patient.id}\r\n                    onClick={() => {\r\n                      onAssign(patient.id);\r\n                      if (nurse.assignedRooms.length >= 5) {\r\n                        setIsAssigning(false);\r\n                      }\r\n                    }}\r\n                    className=\"text-xs p-1 border rounded hover:bg-blue-50 flex justify-between items-center\"\r\n                  >\r\n                    <span>Room {patient.roomNumber}</span>\r\n                    <span className={`px-1.5 py-0.5 rounded-full text-xs ${\r\n                      patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\r\n                      patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-green-100 text-green-800'\r\n                    }`}>\r\n                      {patient.acuity}\r\n                    </span>\r\n                  </button>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1048, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/shared/pct-card.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { PCT } from '@/lib/firebase';\r\n\r\ninterface PCTCardProps {\r\n  pct: PCT;\r\n  onUpdate: (data: Partial<PCT>) => void;\r\n  editMode: boolean;\r\n}\r\n\r\nexport function PCTCard({ pct, onUpdate, editMode }: PCTCardProps) {\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ name: e.target.value });\r\n  };\r\n  \r\n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ spectraNumber: e.target.value });\r\n  };\r\n  \r\n  const handleReliefChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ reliefName: e.target.value });\r\n  };\r\n  \r\n  const handleRoomRangeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ roomRange: e.target.value });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"border border-green-200 rounded-lg p-4\">\r\n      <h4 className=\"font-medium mb-3\">Patient Care Tech</h4>\r\n      \r\n      {/* PCT Information */}\r\n      <div className=\"space-y-2 mb-4\">\r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Name</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={pct.name}\r\n              onChange={handleNameChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"font-medium\">{pct.name || 'Unassigned'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={pct.spectraNumber}\r\n              onChange={handleSpectraChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"text-sm\">{pct.spectraNumber || 'N/A'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Relief</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={pct.reliefName}\r\n              onChange={handleReliefChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"text-sm\">{pct.reliefName || 'None'}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Room Range Assignment */}\r\n      <div>\r\n        <label className=\"block text-xs text-gray-500 mb-1\">Room Assignment</label>\r\n        {editMode ? (\r\n          <input\r\n            type=\"text\"\r\n            value={pct.roomRange}\r\n            onChange={handleRoomRangeChange}\r\n            className=\"w-full p-1 border rounded text-sm\"\r\n            placeholder=\"e.g., 401-412\"\r\n          />\r\n        ) : (\r\n          <div className=\"bg-green-50 border border-green-200 rounded p-2 text-center\">\r\n            <span className=\"font-medium\">Rooms {pct.roomRange}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;;AAUO,SAAS,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAgB;IAC/D,MAAM,mBAAmB,CAAC;QACxB,SAAS;YAAE,MAAM,EAAE,MAAM,CAAC,KAAK;QAAC;IAClC;IAEA,MAAM,sBAAsB,CAAC;QAC3B,SAAS;YAAE,eAAe,EAAE,MAAM,CAAC,KAAK;QAAC;IAC3C;IAEA,MAAM,qBAAqB,CAAC;QAC1B,SAAS;YAAE,YAAY,EAAE,MAAM,CAAC,KAAK;QAAC;IACxC;IAEA,MAAM,wBAAwB,CAAC;QAC7B,SAAS;YAAE,WAAW,EAAE,MAAM,CAAC,KAAK;QAAC;IACvC;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAmB;;;;;;0BAGjC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,8OAAC;gCACC,MAAK;gCACL,OAAO,IAAI,IAAI;gCACf,UAAU;gCACV,WAAU;;;;;qDAGZ,8OAAC;gCAAE,WAAU;0CAAe,IAAI,IAAI,IAAI;;;;;;;;;;;;kCAI5C,8OAAC;;0CACC,8OAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,8OAAC;gCACC,MAAK;gCACL,OAAO,IAAI,aAAa;gCACxB,UAAU;gCACV,WAAU;;;;;qDAGZ,8OAAC;gCAAE,WAAU;0CAAW,IAAI,aAAa,IAAI;;;;;;;;;;;;kCAIjD,8OAAC;;0CACC,8OAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,8OAAC;gCACC,MAAK;gCACL,OAAO,IAAI,UAAU;gCACrB,UAAU;gCACV,WAAU;;;;;qDAGZ,8OAAC;gCAAE,WAAU;0CAAW,IAAI,UAAU,IAAI;;;;;;;;;;;;;;;;;;0BAMhD,8OAAC;;kCACC,8OAAC;wBAAM,WAAU;kCAAmC;;;;;;oBACnD,yBACC,8OAAC;wBACC,MAAK;wBACL,OAAO,IAAI,SAAS;wBACpB,UAAU;wBACV,WAAU;wBACV,aAAY;;;;;6CAGd,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAK,WAAU;;gCAAc;gCAAO,IAAI,SAAS;;;;;;;;;;;;;;;;;;;;;;;;AAM9D","debugId":null}},
    {"offset": {"line": 1251, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/shared/staff-card.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { StaffMember } from '@/lib/firebase';\r\n\r\ninterface StaffCardProps {\r\n  title: string;\r\n  staffMember: StaffMember;\r\n  onUpdate: (data: Partial<StaffMember>) => void;\r\n  editMode: boolean;\r\n  size?: 'small' | 'normal';\r\n}\r\n\r\nexport function StaffCard({ \r\n  title, \r\n  staffMember, \r\n  onUpdate, \r\n  editMode,\r\n  size = 'normal'\r\n}: StaffCardProps) {\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ name: e.target.value });\r\n  };\r\n  \r\n  const handleSpectraChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onUpdate({ spectraNumber: e.target.value });\r\n  };\r\n  \r\n  return (\r\n    <div className={`border ${\r\n      title === 'Charge Nurse' ? 'border-purple-200' : 'border-yellow-200'\r\n    } rounded-lg p-4 ${\r\n      size === 'small' ? 'col-span-1' : 'col-span-1 md:col-span-2'\r\n    }`}>\r\n      <h4 className=\"font-medium mb-3\">{title}</h4>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Name</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={staffMember.name}\r\n              onChange={handleNameChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"font-medium\">{staffMember.name || 'Unassigned'}</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-xs text-gray-500\">Spectra #</label>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              value={staffMember.spectraNumber}\r\n              onChange={handleSpectraChange}\r\n              className=\"w-full p-1 border rounded text-sm\"\r\n            />\r\n          ) : (\r\n            <p className=\"text-sm\">{staffMember.spectraNumber || 'N/A'}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {staffMember.role === 'chargeNurse' && (\r\n        <div className=\"mt-3 pt-2 border-t border-purple-100\">\r\n          <span className=\"text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full\">\r\n            Unit Supervisor\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;;AAYO,SAAS,UAAU,EACxB,KAAK,EACL,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,QAAQ,EACA;IACf,MAAM,mBAAmB,CAAC;QACxB,SAAS;YAAE,MAAM,EAAE,MAAM,CAAC,KAAK;QAAC;IAClC;IAEA,MAAM,sBAAsB,CAAC;QAC3B,SAAS;YAAE,eAAe,EAAE,MAAM,CAAC,KAAK;QAAC;IAC3C;IAEA,qBACE,8OAAC;QAAI,WAAW,CAAC,OAAO,EACtB,UAAU,iBAAiB,sBAAsB,oBAClD,gBAAgB,EACf,SAAS,UAAU,eAAe,4BAClC;;0BACA,8OAAC;gBAAG,WAAU;0BAAoB;;;;;;0BAElC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,8OAAC;gCACC,MAAK;gCACL,OAAO,YAAY,IAAI;gCACvB,UAAU;gCACV,WAAU;;;;;qDAGZ,8OAAC;gCAAE,WAAU;0CAAe,YAAY,IAAI,IAAI;;;;;;;;;;;;kCAIpD,8OAAC;;0CACC,8OAAC;gCAAM,WAAU;0CAA8B;;;;;;4BAC9C,yBACC,8OAAC;gCACC,MAAK;gCACL,OAAO,YAAY,aAAa;gCAChC,UAAU;gCACV,WAAU;;;;;qDAGZ,8OAAC;gCAAE,WAAU;0CAAW,YAAY,aAAa,IAAI;;;;;;;;;;;;;;;;;;YAK1D,YAAY,IAAI,KAAK,+BACpB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAK,WAAU;8BAA+D;;;;;;;;;;;;;;;;;AAOzF","debugId":null}},
    {"offset": {"line": 1502, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/lib/firebase-config.ts"],"sourcesContent":["import { initializeApp, getApps } from 'firebase/app';\r\nimport {\r\n  getFirestore,\r\n  enableIndexedDbPersistence,\r\n  CACHE_SIZE_UNLIMITED,\r\n  persistentLocalCache,\r\n  persistentSingleTabManager\r\n} from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\n// Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyARvbAJtv-NBJnJQ3EdZNU3WsMnXThFzhM\",\r\n  authDomain: \"unitview.firebaseapp.com\",\r\n  databaseURL: \"https://unitview-default-rtdb.firebaseio.com\",\r\n  projectId: \"unitview\",\r\n  storageBucket: \"unitview.firebasestorage.app\",\r\n  messagingSenderId: \"185648925766\",\r\n  appId: \"1:185648925766:web:5ae6271dd4977f6e158e47\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\r\n\r\n// Initialize Firestore\r\nconst db = getFirestore(app);\r\n\r\n// Enable offline persistence (will use the cache when offline)\r\ntry {\r\n  enableIndexedDbPersistence(db).catch((err) => {\r\n    console.error(\"Firestore persistence error:\", err);\r\n  });\r\n} catch (error) {\r\n  console.warn(\"Firestore persistence already enabled or not supported\");\r\n}\r\n\r\nconst storage = getStorage(app);\r\nconst auth = getAuth(app);\r\n\r\nexport { app, db, storage, auth };\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;;;;;AAEA,yBAAyB;AACzB,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,gLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,IAAI,CAAA,GAAA,gLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,gLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;AAEjF,uBAAuB;AACvB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;AAExB,+DAA+D;AAC/D,IAAI;IACF,CAAA,GAAA,iKAAA,CAAA,6BAA0B,AAAD,EAAE,IAAI,KAAK,CAAC,CAAC;QACpC,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF,EAAE,OAAO,OAAO;IACd,QAAQ,IAAI,CAAC;AACf;AAEA,MAAM,UAAU,CAAA,GAAA,oLAAA,CAAA,aAAU,AAAD,EAAE;AAC3B,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 1551, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/lib/firebase-optimized.ts"],"sourcesContent":["import { app, db, storage, auth } from './firebase-config';\r\nimport { collection, doc, setDoc, getDoc, getDocs, updateDoc, deleteDoc, query, where, DocumentData, writeBatch } from 'firebase/firestore';\r\n\r\n// Unit Types\r\nexport interface Unit {\r\n  id: string;\r\n  designation: string;\r\n  roomCount: number;\r\n  roomRanges: string[];\r\n  nurseCardCount: number;\r\n  pctCardCount: number;\r\n  hasChargeNurse: boolean;\r\n  hasUnitClerk: boolean;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Patient Types\r\nexport interface Patient {\r\n  id: string;\r\n  unitId: string;\r\n  roomNumber: string;\r\n  name: string;\r\n  acuity: number;\r\n  assigned: boolean;\r\n  notes?: string;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Staff Types\r\nexport interface Nurse {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  reliefName: string;\r\n  assignedRooms: string[];\r\n  acuityCapacity: number;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface PCT {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  reliefName: string;\r\n  roomRange: string;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface StaffMember {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  role: 'chargeNurse' | 'unitClerk';\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface Module {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  enabled: boolean;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Firebase Collection References\r\nconst unitsCollection = collection(db, 'units');\r\nconst patientsCollection = collection(db, 'patients');\r\nconst nursesCollection = collection(db, 'nurses');\r\nconst pctsCollection = collection(db, 'pcts');\r\nconst staffCollection = collection(db, 'staff');\r\nconst modulesCollection = collection(db, 'modules');\r\n\r\n// Cache for units data\r\nlet unitsCache: Unit[] | null = null;\r\nlet unitDataCache: Map<string, {\r\n  unit: Unit | null,\r\n  patients: Patient[],\r\n  nurses: Nurse[],\r\n  pcts: PCT[],\r\n  chargeNurse: StaffMember | null,\r\n  unitClerk: StaffMember | null\r\n}> = new Map();\r\n\r\n// Unit Functions\r\nexport async function createUnit(unitData: Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>): Promise<Unit> {\r\n  const timestamp = Date.now();\r\n  const unitRef = doc(unitsCollection);\r\n  const newUnit: Unit = {\r\n    ...unitData,\r\n    id: unitRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(unitRef, newUnit);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    unitsCache.push(newUnit);\r\n  }\r\n  \r\n  return newUnit;\r\n}\r\n\r\nexport async function getUnits(): Promise<Unit[]> {\r\n  // Return from cache if available\r\n  if (unitsCache) {\r\n    return unitsCache;\r\n  }\r\n  \r\n  const snapshot = await getDocs(unitsCollection);\r\n  const units = snapshot.docs.map(doc => doc.data() as Unit);\r\n  \r\n  // Update cache\r\n  unitsCache = units;\r\n  \r\n  return units;\r\n}\r\n\r\nexport async function getUnit(unitId: string): Promise<Unit | null> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.unit) {\r\n    return cachedData.unit;\r\n  }\r\n  \r\n  const unitRef = doc(unitsCollection, unitId);\r\n  const unitSnap = await getDoc(unitRef);\r\n  \r\n  if (unitSnap.exists()) {\r\n    const unit = unitSnap.data() as Unit;\r\n    \r\n    // Update cache\r\n    if (!unitDataCache.has(unitId)) {\r\n      unitDataCache.set(unitId, {\r\n        unit,\r\n        patients: [],\r\n        nurses: [],\r\n        pcts: [],\r\n        chargeNurse: null,\r\n        unitClerk: null\r\n      });\r\n    } else {\r\n      unitDataCache.get(unitId)!.unit = unit;\r\n    }\r\n    \r\n    return unit;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\nexport async function updateUnit(unitId: string, data: Partial<Unit>): Promise<void> {\r\n  const unitRef = doc(unitsCollection, unitId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(unitRef, updateData);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    const index = unitsCache.findIndex(u => u.id === unitId);\r\n    if (index !== -1) {\r\n      unitsCache[index] = { ...unitsCache[index], ...updateData };\r\n    }\r\n  }\r\n  \r\n  if (unitDataCache.has(unitId) && unitDataCache.get(unitId)!.unit) {\r\n    unitDataCache.get(unitId)!.unit = { \r\n      ...unitDataCache.get(unitId)!.unit!, \r\n      ...updateData \r\n    };\r\n  }\r\n}\r\n\r\nexport async function deleteUnit(unitId: string): Promise<void> {\r\n  const unitRef = doc(unitsCollection, unitId);\r\n  await deleteDoc(unitRef);\r\n  \r\n  // Delete related data\r\n  await deleteUnitPatients(unitId);\r\n  await deleteUnitNurses(unitId);\r\n  await deleteUnitPCTs(unitId);\r\n  await deleteUnitStaff(unitId);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    unitsCache = unitsCache.filter(u => u.id !== unitId);\r\n  }\r\n  \r\n  unitDataCache.delete(unitId);\r\n}\r\n\r\n// Patient Functions\r\nexport async function createPatient(patientData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {\r\n  const timestamp = Date.now();\r\n  const patientRef = doc(patientsCollection);\r\n  const newPatient: Patient = {\r\n    ...patientData,\r\n    id: patientRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(patientRef, newPatient);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(patientData.unitId)) {\r\n    unitDataCache.get(patientData.unitId)!.patients.push(newPatient);\r\n  }\r\n  \r\n  return newPatient;\r\n}\r\n\r\n// Batch create patients for better performance\r\nexport async function batchCreatePatients(patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Patient[]> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newPatients: Patient[] = [];\r\n  \r\n  for (const patientData of patientsData) {\r\n    const patientRef = doc(patientsCollection);\r\n    const newPatient: Patient = {\r\n      ...patientData,\r\n      id: patientRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(patientRef, newPatient);\r\n    newPatients.push(newPatient);\r\n    \r\n    // Update cache\r\n    if (unitDataCache.has(patientData.unitId)) {\r\n      unitDataCache.get(patientData.unitId)!.patients.push(newPatient);\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newPatients;\r\n}\r\n\r\nexport async function getPatientsByUnit(unitId: string): Promise<Patient[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.patients.length > 0) {\r\n    return cachedData.patients;\r\n  }\r\n  \r\n  const q = query(patientsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  const patients = snapshot.docs.map(doc => doc.data() as Patient);\r\n  \r\n  // Update cache\r\n  if (!unitDataCache.has(unitId)) {\r\n    unitDataCache.set(unitId, {\r\n      unit: null,\r\n      patients,\r\n      nurses: [],\r\n      pcts: [],\r\n      chargeNurse: null,\r\n      unitClerk: null\r\n    });\r\n  } else {\r\n    unitDataCache.get(unitId)!.patients = patients;\r\n  }\r\n  \r\n  return patients;\r\n}\r\n\r\nexport async function updatePatient(patientId: string, data: Partial<Patient>): Promise<void> {\r\n  const patientRef = doc(patientsCollection, patientId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(patientRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.patients.findIndex(p => p.id === patientId);\r\n    if (index !== -1) {\r\n      cachedData.patients[index] = { ...cachedData.patients[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n// Batch update patients for better performance\r\nexport async function batchUpdatePatients(updates: { id: string, data: Partial<Patient> }[]): Promise<void> {\r\n  const batch = writeBatch(db);\r\n  const timestamp = Date.now();\r\n  \r\n  for (const { id, data } of updates) {\r\n    const patientRef = doc(patientsCollection, id);\r\n    batch.update(patientRef, { ...data, updatedAt: timestamp });\r\n    \r\n    // Update cache\r\n    for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n      const index = cachedData.patients.findIndex(p => p.id === id);\r\n      if (index !== -1) {\r\n        cachedData.patients[index] = { \r\n          ...cachedData.patients[index], \r\n          ...data,\r\n          updatedAt: timestamp\r\n        };\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n}\r\n\r\nexport async function deletePatient(patientId: string): Promise<void> {\r\n  const patientRef = doc(patientsCollection, patientId);\r\n  await deleteDoc(patientRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.patients = cachedData.patients.filter(p => p.id !== patientId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitPatients(unitId: string): Promise<void> {\r\n  const q = query(patientsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(unitId)) {\r\n    unitDataCache.get(unitId)!.patients = [];\r\n  }\r\n}\r\n\r\n// Nurse Functions\r\nexport async function createNurse(nurseData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>): Promise<Nurse> {\r\n  const timestamp = Date.now();\r\n  const nurseRef = doc(nursesCollection);\r\n  const newNurse: Nurse = {\r\n    ...nurseData,\r\n    id: nurseRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(nurseRef, newNurse);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(nurseData.unitId)) {\r\n    unitDataCache.get(nurseData.unitId)!.nurses.push(newNurse);\r\n  }\r\n  \r\n  return newNurse;\r\n}\r\n\r\n// Batch create nurses for better performance\r\nexport async function batchCreateNurses(nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Nurse[]> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newNurses: Nurse[] = [];\r\n  \r\n  for (const nurseData of nursesData) {\r\n    const nurseRef = doc(nursesCollection);\r\n    const newNurse: Nurse = {\r\n      ...nurseData,\r\n      id: nurseRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(nurseRef, newNurse);\r\n    newNurses.push(newNurse);\r\n    \r\n    // Update cache\r\n    if (unitDataCache.has(nurseData.unitId)) {\r\n      unitDataCache.get(nurseData.unitId)!.nurses.push(newNurse);\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newNurses;\r\n}\r\n\r\nexport async function getNursesByUnit(unitId: string): Promise<Nurse[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.nurses.length > 0) {\r\n    return cachedData.nurses;\r\n  }\r\n  \r\n  const q = query(nursesCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  const nurses = snapshot.docs.map(doc => doc.data() as Nurse);\r\n  \r\n  // Update cache\r\n  if (!unitDataCache.has(unitId)) {\r\n    unitDataCache.set(unitId, {\r\n      unit: null,\r\n      patients: [],\r\n      nurses,\r\n      pcts: [],\r\n      chargeNurse: null,\r\n      unitClerk: null\r\n    });\r\n  } else {\r\n    unitDataCache.get(unitId)!.nurses = nurses;\r\n  }\r\n  \r\n  return nurses;\r\n}\r\n\r\nexport async function updateNurse(nurseId: string, data: Partial<Nurse>): Promise<void> {\r\n  const nurseRef = doc(nursesCollection, nurseId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(nurseRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.nurses.findIndex(n => n.id === nurseId);\r\n    if (index !== -1) {\r\n      cachedData.nurses[index] = { ...cachedData.nurses[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteNurse(nurseId: string): Promise<void> {\r\n  const nurseRef = doc(nursesCollection, nurseId);\r\n  await deleteDoc(nurseRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.nurses = cachedData.nurses.filter(n => n.id !== nurseId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitNurses(unitId: string): Promise<void> {\r\n  const q = query(nursesCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(unitId)) {\r\n    unitDataCache.get(unitId)!.nurses = [];\r\n  }\r\n}\r\n\r\n// PCT Functions\r\nexport async function createPCT(pctData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>): Promise<PCT> {\r\n  const timestamp = Date.now();\r\n  const pctRef = doc(pctsCollection);\r\n  const newPCT: PCT = {\r\n    ...pctData,\r\n    id: pctRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(pctRef, newPCT);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(pctData.unitId)) {\r\n    unitDataCache.get(pctData.unitId)!.pcts.push(newPCT);\r\n  }\r\n  \r\n  return newPCT;\r\n}\r\n\r\n// Batch create PCTs for better performance\r\nexport async function batchCreatePCTs(pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<PCT[]> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newPCTs: PCT[] = [];\r\n  \r\n  for (const pctData of pctsData) {\r\n    const pctRef = doc(pctsCollection);\r\n    const newPCT: PCT = {\r\n      ...pctData,\r\n      id: pctRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(pctRef, newPCT);\r\n    newPCTs.push(newPCT);\r\n    \r\n    // Update cache\r\n    if (unitDataCache.has(pctData.unitId)) {\r\n      unitDataCache.get(pctData.unitId)!.pcts.push(newPCT);\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newPCTs;\r\n}\r\n\r\nexport async function getPCTsByUnit(unitId: string): Promise<PCT[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.pcts.length > 0) {\r\n    return cachedData.pcts;\r\n  }\r\n  \r\n  const q = query(pctsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  const pcts = snapshot.docs.map(doc => doc.data() as PCT);\r\n  \r\n  // Update cache\r\n  if (!unitDataCache.has(unitId)) {\r\n    unitDataCache.set(unitId, {\r\n      unit: null,\r\n      patients: [],\r\n      nurses: [],\r\n      pcts,\r\n      chargeNurse: null,\r\n      unitClerk: null\r\n    });\r\n  } else {\r\n    unitDataCache.get(unitId)!.pcts = pcts;\r\n  }\r\n  \r\n  return pcts;\r\n}\r\n\r\nexport async function updatePCT(pctId: string, data: Partial<PCT>): Promise<void> {\r\n  const pctRef = doc(pctsCollection, pctId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(pctRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.pcts.findIndex(p => p.id === pctId);\r\n    if (index !== -1) {\r\n      cachedData.pcts[index] = { ...cachedData.pcts[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deletePCT(pctId: string): Promise<void> {\r\n  const pctRef = doc(pctsCollection, pctId);\r\n  await deleteDoc(pctRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.pcts = cachedData.pcts.filter(p => p.id !== pctId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitPCTs(unitId: string): Promise<void> {\r\n  const q = query(pctsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(unitId)) {\r\n    unitDataCache.get(unitId)!.pcts = [];\r\n  }\r\n}\r\n\r\n// Staff Functions\r\nexport async function createStaffMember(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>): Promise<StaffMember> {\r\n  const timestamp = Date.now();\r\n  const staffRef = doc(staffCollection);\r\n  const newStaff: StaffMember = {\r\n    ...staffData,\r\n    id: staffRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(staffRef, newStaff);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(staffData.unitId)) {\r\n    if (staffData.role === 'chargeNurse') {\r\n      unitDataCache.get(staffData.unitId)!.chargeNurse = newStaff;\r\n    } else if (staffData.role === 'unitClerk') {\r\n      unitDataCache.get(staffData.unitId)!.unitClerk = newStaff;\r\n    }\r\n  }\r\n  \r\n  return newStaff;\r\n}\r\n\r\n// Batch create staff members for better performance\r\nexport async function batchCreateStaffMembers(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<StaffMember[]> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newStaffMembers: StaffMember[] = [];\r\n  \r\n  for (const staffMemberData of staffData) {\r\n    const staffRef = doc(staffCollection);\r\n    const newStaff: StaffMember = {\r\n      ...staffMemberData,\r\n      id: staffRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(staffRef, newStaff);\r\n    newStaffMembers.push(newStaff);\r\n    \r\n    // Update cache\r\n    if (unitDataCache.has(staffMemberData.unitId)) {\r\n      if (staffMemberData.role === 'chargeNurse') {\r\n        unitDataCache.get(staffMemberData.unitId)!.chargeNurse = newStaff;\r\n      } else if (staffMemberData.role === 'unitClerk') {\r\n        unitDataCache.get(staffMemberData.unitId)!.unitClerk = newStaff;\r\n      }\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newStaffMembers;\r\n}\r\n\r\nexport async function getStaffByUnit(unitId: string): Promise<StaffMember[]> {\r\n  const q = query(staffCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  return snapshot.docs.map(doc => doc.data() as StaffMember);\r\n}\r\n\r\nexport async function getStaffByUnitAndRole(unitId: string, role: 'chargeNurse' | 'unitClerk'): Promise<StaffMember | null> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (role === 'chargeNurse' && cachedData?.chargeNurse) {\r\n    return cachedData.chargeNurse;\r\n  } else if (role === 'unitClerk' && cachedData?.unitClerk) {\r\n    return cachedData.unitClerk;\r\n  }\r\n  \r\n  const q = query(staffCollection, where('unitId', '==', unitId), where('role', '==', role));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  if (snapshot.empty) {\r\n    return null;\r\n  }\r\n  \r\n  const staffMember = snapshot.docs[0].data() as StaffMember;\r\n  \r\n  // Update cache\r\n  if (!unitDataCache.has(unitId)) {\r\n    unitDataCache.set(unitId, {\r\n      unit: null,\r\n      patients: [],\r\n      nurses: [],\r\n      pcts: [],\r\n      chargeNurse: role === 'chargeNurse' ? staffMember : null,\r\n      unitClerk: role === 'unitClerk' ? staffMember : null\r\n    });\r\n  } else {\r\n    if (role === 'chargeNurse') {\r\n      unitDataCache.get(unitId)!.chargeNurse = staffMember;\r\n    } else if (role === 'unitClerk') {\r\n      unitDataCache.get(unitId)!.unitClerk = staffMember;\r\n    }\r\n  }\r\n  \r\n  return staffMember;\r\n}\r\n\r\nexport async function updateStaffMember(staffId: string, data: Partial<StaffMember>): Promise<void> {\r\n  const staffRef = doc(staffCollection, staffId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(staffRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    if (cachedData.chargeNurse?.id === staffId) {\r\n      cachedData.chargeNurse = { ...cachedData.chargeNurse, ...updateData };\r\n    } else if (cachedData.unitClerk?.id === staffId) {\r\n      cachedData.unitClerk = { ...cachedData.unitClerk, ...updateData };\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteStaffMember(staffId: string): Promise<void> {\r\n  const staffRef = doc(staffCollection, staffId);\r\n  await deleteDoc(staffRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    if (cachedData.chargeNurse?.id === staffId) {\r\n      cachedData.chargeNurse = null;\r\n    } else if (cachedData.unitClerk?.id === staffId) {\r\n      cachedData.unitClerk = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteUnitStaff(unitId: string): Promise<void> {\r\n  const q = query(staffCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(unitId)) {\r\n    unitDataCache.get(unitId)!.chargeNurse = null;\r\n    unitDataCache.get(unitId)!.unitClerk = null;\r\n  }\r\n}\r\n\r\n// Module Functions\r\nexport async function getModules(): Promise<Module[]> {\r\n  const snapshot = await getDocs(modulesCollection);\r\n  return snapshot.docs.map(doc => doc.data() as Module);\r\n}\r\n\r\nexport async function updateModule(moduleId: string, enabled: boolean): Promise<void> {\r\n  const moduleRef = doc(modulesCollection, moduleId);\r\n  await updateDoc(moduleRef, {\r\n    enabled,\r\n    updatedAt: Date.now()\r\n  });\r\n}\r\n\r\nexport async function initializeModules(modules: Omit<Module, 'updatedAt'>[]): Promise<void> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  \r\n  for (const module of modules) {\r\n    const moduleRef = doc(modulesCollection, module.id);\r\n    const moduleSnap = await getDoc(moduleRef);\r\n    \r\n    if (!moduleSnap.exists()) {\r\n      batch.set(moduleRef, {\r\n        ...module,\r\n        updatedAt: timestamp\r\n      });\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n}\r\n\r\n// Initialize default modules if they don't exist\r\nexport async function setupDefaultModules(): Promise<void> {\r\n  const defaultModules: Omit<Module, 'updatedAt'>[] = [\r\n    { id: 'mock-patient', name: 'Mock Patient Data', description: 'Generate mock patient data for testing', enabled: true },\r\n    { id: 'spectra-pool', name: 'Spectra Pool Management', description: 'Manage spectra pool assignments', enabled: false },\r\n    { id: 'acuity-tracking', name: 'Acuity Tracking', description: 'Track and manage patient acuity levels', enabled: true },\r\n    { id: 'bed-management', name: 'Bed Management', description: 'Track bed availability and assignments', enabled: true },\r\n    { id: 'staff-messaging', name: 'Staff Messaging', description: 'Internal messaging system for staff', enabled: false }\r\n  ];\r\n  \r\n  await initializeModules(defaultModules);\r\n}\r\n\r\n// Optimized function to load all unit data at once\r\nexport async function loadUnitData(unitId: string): Promise<{\r\n  unit: Unit | null,\r\n  patients: Patient[],\r\n  nurses: Nurse[],\r\n  pcts: PCT[],\r\n  chargeNurse: StaffMember | null,\r\n  unitClerk: StaffMember | null\r\n}> {\r\n  // Check cache first\r\n  if (unitDataCache.has(unitId)) {\r\n    const cachedData = unitDataCache.get(unitId)!;\r\n    \r\n    // If we have complete data in cache, return it\r\n    if (cachedData.unit && \r\n        (cachedData.patients.length > 0 || \r\n         cachedData.nurses.length > 0 || \r\n         cachedData.pcts.length > 0)) {\r\n      return cachedData;\r\n    }\r\n  }\r\n  \r\n  // Load all data in parallel\r\n  const [unit, patients, nurses, pcts, staffMembers] = await Promise.all([\r\n    getUnit(unitId),\r\n    getPatientsByUnit(unitId),\r\n    getNursesByUnit(unitId),\r\n    getPCTsByUnit(unitId),\r\n    getStaffByUnit(unitId)\r\n  ]);\r\n  \r\n  // Process staff members\r\n  let chargeNurse: StaffMember | null = null;\r\n  let unitClerk: StaffMember | null = null;\r\n  \r\n  for (const staff of staffMembers) {\r\n    if (staff.role === 'chargeNurse') {\r\n      chargeNurse = staff;\r\n    } else if (staff.role === 'unitClerk') {\r\n      unitClerk = staff;\r\n    }\r\n  }\r\n  \r\n  // Update cache\r\n  const unitData = {\r\n    unit,\r\n    patients,\r\n    nurses,\r\n    pcts,\r\n    chargeNurse,\r\n    unitClerk\r\n  };\r\n  \r\n  unitDataCache.set(unitId, unitData);\r\n  \r\n  return unitData;\r\n}\r\n\r\n// Optimized function to initialize unit data with batch operations\r\nexport async function initializeUnitData(unit: Unit): Promise<{\r\n  patients: Patient[],\r\n  nurses: Nurse[],\r\n  pcts: PCT[],\r\n  chargeNurse: StaffMember | null,\r\n  unitClerk: StaffMember | null\r\n}> {\r\n  // Generate all the data first\r\n  const patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  \r\n  // Generate patient data\r\n  for (const range of unit.roomRanges) {\r\n    const [start, end] = range.split('-').map(num => parseInt(num, 10));\r\n    for (let roomNum = start; roomNum <= end; roomNum++) {\r\n      patientsData.push({\r\n        unitId: unit.id,\r\n        roomNumber: roomNum.toString(),\r\n        name: '',\r\n        acuity: Math.floor(Math.random() * 5) + 1, // Random acuity 1-5\r\n        assigned: false\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Generate nurse data\r\n  for (let i = 0; i < unit.nurseCardCount; i++) {\r\n    nursesData.push({\r\n      unitId: unit.id,\r\n      name: `Nurse ${i + 1}`,\r\n      spectraNumber: `SN${10000 + i}`,\r\n      reliefName: '',\r\n      assignedRooms: [],\r\n      acuityCapacity: 12\r\n    });\r\n  }\r\n  \r\n  // Generate PCT data\r\n  for (let i = 0; i < unit.pctCardCount; i++) {\r\n    // Divide room ranges among PCTs\r\n    const rangeIndex = i % unit.roomRanges.length;\r\n    const [start, end] = unit.roomRanges[rangeIndex].split('-').map(num => parseInt(num, 10));\r\n    const rangeSize = end - start + 1;\r\n    const pctRangeSize = Math.ceil(rangeSize / unit.pctCardCount);\r\n    \r\n    const pctStart = start + (i * pctRangeSize);\r\n    const pctEnd = Math.min(pctStart + pctRangeSize - 1, end);\r\n    \r\n    pctsData.push({\r\n      unitId: unit.id,\r\n      name: `PCT ${i + 1}`,\r\n      spectraNumber: `PCT${10000 + i}`,\r\n      reliefName: '',\r\n      roomRange: `${pctStart}-${pctEnd}`\r\n    });\r\n  }\r\n  \r\n  // Generate staff data\r\n  if (unit.hasChargeNurse) {\r\n    staffData.push({\r\n      unitId: unit.id,\r\n      name: '',\r\n      spectraNumber: '',\r\n      role: 'chargeNurse'\r\n    });\r\n  }\r\n  \r\n  if (unit.hasUnitClerk) {\r\n    staffData.push({\r\n      unitId: unit.id,\r\n      name: '',\r\n      spectraNumber: '',\r\n      role: 'unitClerk'\r\n    });\r\n  }\r\n  \r\n  // Create all data in parallel using batch operations\r\n  const [patients, nurses, pcts, staffMembers] = await Promise.all([\r\n    batchCreatePatients(patientsData),\r\n    batchCreateNurses(nursesData),\r\n    batchCreatePCTs(pctsData),\r\n    batchCreateStaffMembers(staffData)\r\n  ]);\r\n  \r\n  // Process staff members\r\n  let chargeNurse: StaffMember | null = null;\r\n  let unitClerk: StaffMember | null = null;\r\n  \r\n  for (const staff of staffMembers) {\r\n    if (staff.role === 'chargeNurse') {\r\n      chargeNurse = staff;\r\n    } else if (staff.role === 'unitClerk') {\r\n      unitClerk = staff;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    patients,\r\n    nurses,\r\n    pcts,\r\n    chargeNurse,\r\n    unitClerk\r\n  };\r\n}\r\n\r\n// Clear cache (useful for testing or when user logs out)\r\nexport function clearCache(): void {\r\n  unitsCache = null;\r\n  unitDataCache.clear();\r\n}\r\n\r\nexport { app, db, storage, auth };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2370, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/shared/patient-grid-optimized.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { NurseCard } from '@/components/shared/nurse-card';\r\nimport { PCTCard } from '@/components/shared/pct-card';\r\nimport { StaffCard } from '@/components/shared/staff-card';\r\nimport { \r\n  loadUnitData,\r\n  initializeUnitData,\r\n  updatePatient,\r\n  updateNurse,\r\n  updatePCT,\r\n  updateStaffMember,\r\n  batchUpdatePatients,\r\n  Unit,\r\n  Patient,\r\n  Nurse,\r\n  PCT,\r\n  StaffMember\r\n} from '@/lib/firebase-optimized';\r\nimport { toast } from '@/components/ui/use-toast';\r\n\r\ninterface PatientGridProps {\r\n  unitId: string;\r\n}\r\n\r\nexport function PatientGrid({ unitId }: PatientGridProps) {\r\n  const [unit, setUnit] = useState<Unit | null>(null);\r\n  const [patients, setPatients] = useState<Patient[]>([]);\r\n  const [nurses, setNurses] = useState<Nurse[]>([]);\r\n  const [pcts, setPCTs] = useState<PCT[]>([]);\r\n  const [chargeNurse, setChargeNurse] = useState<StaffMember | null>(null);\r\n  const [unitClerk, setUnitClerk] = useState<StaffMember | null>(null);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [initializing, setInitializing] = useState(false);\r\n  const [pendingChanges, setPendingChanges] = useState<{\r\n    patients: { [id: string]: Partial<Patient> },\r\n    nurses: { [id: string]: Partial<Nurse> },\r\n    pcts: { [id: string]: Partial<PCT> },\r\n    staff: { [id: string]: Partial<StaffMember> }\r\n  }>({\r\n    patients: {},\r\n    nurses: {},\r\n    pcts: {},\r\n    staff: {}\r\n  });\r\n  \r\n  // Load unit data and associated staff/patients\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      if (!unitId) return;\r\n      \r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Load all unit data at once using the optimized function\r\n        const unitData = await loadUnitData(unitId);\r\n        \r\n        if (!unitData.unit) {\r\n          toast({\r\n            title: 'Error',\r\n            description: 'Unit not found',\r\n            variant: 'destructive',\r\n          });\r\n          return;\r\n        }\r\n        \r\n        setUnit(unitData.unit);\r\n        setPatients(unitData.patients);\r\n        setNurses(unitData.nurses);\r\n        setPCTs(unitData.pcts);\r\n        setChargeNurse(unitData.chargeNurse);\r\n        setUnitClerk(unitData.unitClerk);\r\n        \r\n        // If no data exists yet, we need to initialize the unit\r\n        if (unitData.patients.length === 0 && unitData.nurses.length === 0) {\r\n          setInitializing(true);\r\n          const initializedData = await initializeUnitData(unitData.unit);\r\n          setPatients(initializedData.patients);\r\n          setNurses(initializedData.nurses);\r\n          setPCTs(initializedData.pcts);\r\n          setChargeNurse(initializedData.chargeNurse);\r\n          setUnitClerk(initializedData.unitClerk);\r\n          setInitializing(false);\r\n          \r\n          toast({\r\n            title: 'Unit Initialized',\r\n            description: 'Unit data has been created successfully',\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading unit data:', error);\r\n        toast({\r\n          title: 'Error',\r\n          description: 'Failed to load unit data',\r\n          variant: 'destructive',\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, [unitId]);\r\n  \r\n  // Memoized list of unassigned patients for better performance\r\n  const unassignedPatients = useMemo(() => {\r\n    return patients.filter(p => !p.assigned);\r\n  }, [patients]);\r\n  \r\n  // Optimistic UI update for patient assignment\r\n  const handleAssignPatient = useCallback(async (nurseId: string, patientId: string) => {\r\n    try {\r\n      // Find the nurse and patient\r\n      const nurse = nurses.find(n => n.id === nurseId);\r\n      const patient = patients.find(p => p.id === patientId);\r\n      \r\n      if (!nurse || !patient) return;\r\n      \r\n      // Update nurse assignments (optimistic update)\r\n      const updatedAssignedRooms = [...nurse.assignedRooms];\r\n      if (!updatedAssignedRooms.includes(patient.roomNumber)) {\r\n        updatedAssignedRooms.push(patient.roomNumber);\r\n        updatedAssignedRooms.sort((a, b) => parseInt(a) - parseInt(b));\r\n      }\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setNurses(nurses.map(n => \r\n        n.id === nurseId ? { ...n, assignedRooms: updatedAssignedRooms } : n\r\n      ));\r\n      \r\n      setPatients(patients.map(p => \r\n        p.id === patientId ? { ...p, assigned: true } : p\r\n      ));\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        nurses: {\r\n          ...prev.nurses,\r\n          [nurseId]: { assignedRooms: updatedAssignedRooms }\r\n        },\r\n        patients: {\r\n          ...prev.patients,\r\n          [patientId]: { assigned: true }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await Promise.all([\r\n        updateNurse(nurseId, { assignedRooms: updatedAssignedRooms }),\r\n        updatePatient(patientId, { assigned: true })\r\n      ]);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\r\n        const { [patientId]: __, ...remainingPatients } = prev.patients;\r\n        return {\r\n          ...prev,\r\n          nurses: remainingNurses,\r\n          patients: remainingPatients\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error('Error assigning patient:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to assign patient. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [nurses, patients]);\r\n  \r\n  // Optimistic UI update for patient unassignment\r\n  const handleUnassignPatient = useCallback(async (nurseId: string, roomNumber: string) => {\r\n    try {\r\n      // Find the nurse and patient\r\n      const nurse = nurses.find(n => n.id === nurseId);\r\n      const patient = patients.find(p => p.roomNumber === roomNumber);\r\n      \r\n      if (!nurse || !patient) return;\r\n      \r\n      // Update nurse assignments (optimistic update)\r\n      const updatedAssignedRooms = nurse.assignedRooms.filter(room => room !== roomNumber);\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setNurses(nurses.map(n => \r\n        n.id === nurseId ? { ...n, assignedRooms: updatedAssignedRooms } : n\r\n      ));\r\n      \r\n      setPatients(patients.map(p => \r\n        p.roomNumber === roomNumber ? { ...p, assigned: false } : p\r\n      ));\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        nurses: {\r\n          ...prev.nurses,\r\n          [nurseId]: { assignedRooms: updatedAssignedRooms }\r\n        },\r\n        patients: {\r\n          ...prev.patients,\r\n          [patient.id]: { assigned: false }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await Promise.all([\r\n        updateNurse(nurseId, { assignedRooms: updatedAssignedRooms }),\r\n        updatePatient(patient.id, { assigned: false })\r\n      ]);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\r\n        const { [patient.id]: __, ...remainingPatients } = prev.patients;\r\n        return {\r\n          ...prev,\r\n          nurses: remainingNurses,\r\n          patients: remainingPatients\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error('Error unassigning patient:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to unassign patient. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [nurses, patients]);\r\n  \r\n  // Optimistic UI update for nurse information\r\n  const handleUpdateNurse = useCallback(async (nurseId: string, data: Partial<Nurse>) => {\r\n    try {\r\n      // Update local state immediately (optimistic update)\r\n      setNurses(nurses.map(nurse => \r\n        nurse.id === nurseId ? { ...nurse, ...data } : nurse\r\n      ));\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        nurses: {\r\n          ...prev.nurses,\r\n          [nurseId]: { ...prev.nurses[nurseId], ...data }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await updateNurse(nurseId, data);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [nurseId]: _, ...remainingNurses } = prev.nurses;\r\n        return {\r\n          ...prev,\r\n          nurses: remainingNurses\r\n        };\r\n      });\r\n      \r\n      toast({\r\n        title: 'Nurse Updated',\r\n        description: 'Nurse information has been updated',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating nurse:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update nurse information. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [nurses]);\r\n  \r\n  // Optimistic UI update for PCT information\r\n  const handleUpdatePCT = useCallback(async (pctId: string, data: Partial<PCT>) => {\r\n    try {\r\n      // Update local state immediately (optimistic update)\r\n      setPCTs(pcts.map(pct => \r\n        pct.id === pctId ? { ...pct, ...data } : pct\r\n      ));\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        pcts: {\r\n          ...prev.pcts,\r\n          [pctId]: { ...prev.pcts[pctId], ...data }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await updatePCT(pctId, data);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [pctId]: _, ...remainingPCTs } = prev.pcts;\r\n        return {\r\n          ...prev,\r\n          pcts: remainingPCTs\r\n        };\r\n      });\r\n      \r\n      toast({\r\n        title: 'PCT Updated',\r\n        description: 'PCT information has been updated',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating PCT:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update PCT information. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [pcts]);\r\n  \r\n  // Optimistic UI update for charge nurse information\r\n  const handleUpdateChargeNurse = useCallback(async (data: Partial<StaffMember>) => {\r\n    try {\r\n      if (!chargeNurse) return;\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setChargeNurse({ ...chargeNurse, ...data });\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        staff: {\r\n          ...prev.staff,\r\n          [chargeNurse.id]: { ...prev.staff[chargeNurse.id], ...data }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await updateStaffMember(chargeNurse.id, data);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [chargeNurse.id]: _, ...remainingStaff } = prev.staff;\r\n        return {\r\n          ...prev,\r\n          staff: remainingStaff\r\n        };\r\n      });\r\n      \r\n      toast({\r\n        title: 'Charge Nurse Updated',\r\n        description: 'Charge nurse information has been updated',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating charge nurse:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update charge nurse information. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [chargeNurse]);\r\n  \r\n  // Optimistic UI update for unit clerk information\r\n  const handleUpdateUnitClerk = useCallback(async (data: Partial<StaffMember>) => {\r\n    try {\r\n      if (!unitClerk) return;\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setUnitClerk({ ...unitClerk, ...data });\r\n      \r\n      // Add to pending changes\r\n      setPendingChanges(prev => ({\r\n        ...prev,\r\n        staff: {\r\n          ...prev.staff,\r\n          [unitClerk.id]: { ...prev.staff[unitClerk.id], ...data }\r\n        }\r\n      }));\r\n      \r\n      // Update in database\r\n      await updateStaffMember(unitClerk.id, data);\r\n      \r\n      // Clear from pending changes after successful update\r\n      setPendingChanges(prev => {\r\n        const { [unitClerk.id]: _, ...remainingStaff } = prev.staff;\r\n        return {\r\n          ...prev,\r\n          staff: remainingStaff\r\n        };\r\n      });\r\n      \r\n      toast({\r\n        title: 'Unit Clerk Updated',\r\n        description: 'Unit clerk information has been updated',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating unit clerk:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update unit clerk information. Changes will be saved when connection is restored.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [unitClerk]);\r\n  \r\n  // Save all pending changes at once\r\n  const handleSaveLayout = useCallback(async () => {\r\n    try {\r\n      // Prepare batch updates\r\n      const patientUpdates = Object.entries(pendingChanges.patients).map(([id, data]) => ({\r\n        id,\r\n        data\r\n      }));\r\n      \r\n      // Apply all pending changes\r\n      if (patientUpdates.length > 0) {\r\n        await batchUpdatePatients(patientUpdates);\r\n      }\r\n      \r\n      // Apply individual updates for nurses, PCTs, and staff\r\n      await Promise.all([\r\n        ...Object.entries(pendingChanges.nurses).map(([id, data]) => \r\n          updateNurse(id, data)\r\n        ),\r\n        ...Object.entries(pendingChanges.pcts).map(([id, data]) => \r\n          updatePCT(id, data)\r\n        ),\r\n        ...Object.entries(pendingChanges.staff).map(([id, data]) => \r\n          updateStaffMember(id, data)\r\n        )\r\n      ]);\r\n      \r\n      // Clear all pending changes\r\n      setPendingChanges({\r\n        patients: {},\r\n        nurses: {},\r\n        pcts: {},\r\n        staff: {}\r\n      });\r\n      \r\n      setEditMode(false);\r\n      toast({\r\n        title: 'Layout Saved',\r\n        description: 'Unit layout has been saved successfully',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving layout:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to save some changes. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [pendingChanges]);\r\n  \r\n  // Check if there are any pending changes\r\n  const hasPendingChanges = useMemo(() => {\r\n    return Object.keys(pendingChanges.patients).length > 0 ||\r\n           Object.keys(pendingChanges.nurses).length > 0 ||\r\n           Object.keys(pendingChanges.pcts).length > 0 ||\r\n           Object.keys(pendingChanges.staff).length > 0;\r\n  }, [pendingChanges]);\r\n  \r\n  if (loading || initializing) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg border p-4 flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <div className=\"w-12 h-12 border-4 border-t-blue-600 border-blue-200 rounded-full animate-spin mx-auto mb-3\"></div>\r\n          <p className=\"text-gray-600\">{initializing ? 'Initializing unit data...' : 'Loading...'}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!unit) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg border p-4\">\r\n        <p className=\"text-center text-gray-500\">Unit not found</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"bg-white rounded-lg border p-4\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h3 className=\"text-xl font-semibold\">{unit.designation} Patient Grid</h3>\r\n        <div className=\"flex gap-2\">\r\n          {hasPendingChanges && (\r\n            <div className=\"text-amber-600 text-sm flex items-center\">\r\n              <span className=\"inline-block w-2 h-2 bg-amber-600 rounded-full mr-1\"></span>\r\n              Unsaved changes\r\n            </div>\r\n          )}\r\n          <Button \r\n            variant={editMode ? \"default\" : \"outline\"} \r\n            onClick={() => editMode ? handleSaveLayout() : setEditMode(true)}\r\n          >\r\n            {editMode ? \"Save Layout\" : \"Edit Layout\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {/* Unassigned Patients */}\r\n        <div className=\"border rounded-lg p-4\">\r\n          <h4 className=\"font-medium mb-3\">Unassigned Patients</h4>\r\n          <div className=\"space-y-2\">\r\n            {unassignedPatients.map(patient => (\r\n              <div key={patient.id} className=\"flex justify-between items-center p-2 border rounded bg-gray-50\">\r\n                <div>\r\n                  <span className=\"font-medium\">Room {patient.roomNumber}</span>\r\n                  {patient.name && <span className=\"ml-2 text-sm\">{patient.name}</span>}\r\n                </div>\r\n                <span className={`px-2 py-1 rounded-full text-xs ${\r\n                  patient.acuity >= 4 ? 'bg-red-100 text-red-800' :\r\n                  patient.acuity >= 3 ? 'bg-yellow-100 text-yellow-800' :\r\n                  'bg-green-100 text-green-800'\r\n                }`}>\r\n                  Acuity {patient.acuity}\r\n                </span>\r\n              </div>\r\n            ))}\r\n            {unassignedPatients.length === 0 && (\r\n              <p className=\"text-sm text-gray-500 italic\">All patients assigned</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Nurse Cards */}\r\n        {nurses.map(nurse => (\r\n          <NurseCard\r\n            key={nurse.id}\r\n            nurse={nurse}\r\n            patients={patients}\r\n            onAssign={(patientId) => handleAssignPatient(nurse.id, patientId)}\r\n            onUnassign={(roomNumber) => handleUnassignPatient(nurse.id, roomNumber)}\r\n            onUpdate={(data) => handleUpdateNurse(nurse.id, data)}\r\n            editMode={editMode}\r\n          />\r\n        ))}\r\n        \r\n        {/* PCT Cards */}\r\n        {pcts.map(pct => (\r\n          <PCTCard\r\n            key={pct.id}\r\n            pct={pct}\r\n            onUpdate={(data) => handleUpdatePCT(pct.id, data)}\r\n            editMode={editMode}\r\n          />\r\n        ))}\r\n        \r\n        {/* Charge Nurse Card */}\r\n        {chargeNurse && (\r\n          <StaffCard\r\n            title=\"Charge Nurse\"\r\n            staffMember={chargeNurse}\r\n            onUpdate={handleUpdateChargeNurse}\r\n            editMode={editMode}\r\n            size=\"small\"\r\n          />\r\n        )}\r\n        \r\n        {/* Unit Clerk Card */}\r\n        {unitClerk && (\r\n          <StaffCard\r\n            title=\"Unit Clerk\"\r\n            staffMember={unitClerk}\r\n            onUpdate={handleUpdateUnitClerk}\r\n            editMode={editMode}\r\n            size=\"small\"\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3080, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/facility/unit-card.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { Unit } from '@/lib/firebase';\r\n\r\ninterface UnitCardProps {\r\n  unit: Unit;\r\n  isSelected: boolean;\r\n  onSelect: () => void;\r\n}\r\n\r\nexport function UnitCard({ unit, isSelected, onSelect }: UnitCardProps) {\r\n  return (\r\n    <div \r\n      className={`border rounded-lg p-4 cursor-pointer transition-all ${\r\n        isSelected \r\n          ? 'border-blue-500 bg-blue-50 shadow-md' \r\n          : 'border-gray-200 hover:border-blue-300 hover:bg-gray-50'\r\n      }`}\r\n      onClick={onSelect}\r\n    >\r\n      <h3 className=\"font-medium text-lg\">{unit.designation}</h3>\r\n      \r\n      <div className=\"mt-2 space-y-1 text-sm text-gray-600\">\r\n        <p>Rooms: {unit.roomCount}</p>\r\n        <p>Room Range: {unit.roomRanges.join(', ')}</p>\r\n        <div className=\"flex flex-wrap gap-2 mt-2\">\r\n          <span className=\"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full\">\r\n            {unit.nurseCardCount} Nurse Cards\r\n          </span>\r\n          <span className=\"bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\r\n            {unit.pctCardCount} PCT Cards\r\n          </span>\r\n          {unit.hasChargeNurse && (\r\n            <span className=\"bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full\">\r\n              Charge Nurse\r\n            </span>\r\n          )}\r\n          {unit.hasUnitClerk && (\r\n            <span className=\"bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full\">\r\n              Unit Clerk\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {isSelected && (\r\n        <div className=\"mt-3 text-blue-600 text-sm font-medium\">\r\n          Currently Selected\r\n        </div>\r\n      )}\r\n      \r\n      {unit.createdAt && (\r\n        <div className=\"mt-2 text-xs text-gray-400\">\r\n          Created: {new Date(unit.createdAt).toLocaleDateString()}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;;AAUO,SAAS,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAiB;IACpE,qBACE,8OAAC;QACC,WAAW,CAAC,oDAAoD,EAC9D,aACI,yCACA,0DACJ;QACF,SAAS;;0BAET,8OAAC;gBAAG,WAAU;0BAAuB,KAAK,WAAW;;;;;;0BAErD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;4BAAE;4BAAQ,KAAK,SAAS;;;;;;;kCACzB,8OAAC;;4BAAE;4BAAa,KAAK,UAAU,CAAC,IAAI,CAAC;;;;;;;kCACrC,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;;oCACb,KAAK,cAAc;oCAAC;;;;;;;0CAEvB,8OAAC;gCAAK,WAAU;;oCACb,KAAK,YAAY;oCAAC;;;;;;;4BAEpB,KAAK,cAAc,kBAClB,8OAAC;gCAAK,WAAU;0CAA+D;;;;;;4BAIhF,KAAK,YAAY,kBAChB,8OAAC;gCAAK,WAAU;0CAA+D;;;;;;;;;;;;;;;;;;YAOpF,4BACC,8OAAC;gBAAI,WAAU;0BAAyC;;;;;;YAKzD,KAAK,SAAS,kBACb,8OAAC;gBAAI,WAAU;;oBAA6B;oBAChC,IAAI,KAAK,KAAK,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;AAK/D","debugId":null}},
    {"offset": {"line": 3207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/lib/firebase.ts"],"sourcesContent":["\r\nimport { app, db, storage, auth } from './firebase-config';\r\nimport { collection, doc, setDoc, getDoc, getDocs, updateDoc, deleteDoc, query, where, DocumentData, writeBatch } from 'firebase/firestore';\r\n\r\n// Unit Types\r\nexport interface Unit {\r\n    id: string;\r\n    designation: string;\r\n    roomCount: number;\r\n    roomRanges: string[];\r\n    nurseCardCount: number;\r\n    pctCardCount: number;\r\n    hasChargeNurse: boolean;\r\n    hasUnitClerk: boolean;\r\n    createdAt?: number;\r\n    updatedAt?: number;\r\n}\r\nimport { getStorage } from 'firebase/storage';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nconst storage = getStorage(app);\r\nconst auth = getAuth(app);\r\n\r\n\r\n// Unit Types\r\nexport interface Unit {\r\n  id: string;\r\n  designation: string;\r\n  roomCount: number;\r\n  roomRanges: string[];\r\n  nurseCardCount: number;\r\n  pctCardCount: number;\r\n  hasChargeNurse: boolean;\r\n  hasUnitClerk: boolean;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Patient Types\r\nexport interface Patient {\r\n  id: string;\r\n  unitId: string;\r\n  roomNumber: string;\r\n  name: string;\r\n  acuity: number;\r\n  assigned: boolean;\r\n  notes?: string;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Staff Types\r\nexport interface Nurse {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  reliefName: string;\r\n  assignedRooms: string[];\r\n  acuityCapacity: number;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface PCT {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  reliefName: string;\r\n  roomRange: string;\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface StaffMember {\r\n  id: string;\r\n  unitId: string;\r\n  name: string;\r\n  spectraNumber: string;\r\n  role: 'chargeNurse' | 'unitClerk';\r\n  createdAt?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface Module {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  enabled: boolean;\r\n  updatedAt?: number;\r\n}\r\n\r\n// Firebase Collection References\r\nconst unitsCollection = collection(db, 'units');\r\nconst patientsCollection = collection(db, 'patients');\r\nconst nursesCollection = collection(db, 'nurses');\r\nconst pctsCollection = collection(db, 'pcts');\r\nconst staffCollection = collection(db, 'staff');\r\nconst modulesCollection = collection(db, 'modules');\r\n\r\n// Cache for units data\r\nlet unitsCache: Unit[] | null = null;\r\nlet unitDataCache: Map<string, {\r\n  unit: Unit | null,\r\n  patients: Patient[],\r\n  nurses: Nurse[],\r\n  pcts: PCT[],\r\n  chargeNurse: StaffMember | null,\r\n  unitClerk: StaffMember | null\r\n}> = new Map();\r\n\r\n// Unit Functions\r\nexport async function createUnit(unitData: Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>): Promise<Unit> {\r\n  const timestamp = Date.now();\r\n  const unitRef = doc(unitsCollection);\r\n  const newUnit: Unit = {\r\n    ...unitData,\r\n    id: unitRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(unitRef, newUnit);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    unitsCache.push(newUnit);\r\n  }\r\n  \r\n  return newUnit;\r\n}\r\n\r\nexport async function getUnits(): Promise<Unit[]> {\r\n  // Return from cache if available\r\n  if (unitsCache) {\r\n    return unitsCache;\r\n  }\r\n  \r\n  const snapshot = await getDocs(unitsCollection);\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as Unit;\r\n  });\r\n\r\n}\r\n\r\nexport async function getUnit(unitId: string): Promise<Unit | null> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.unit) {\r\n    return cachedData.unit;\r\n  }\r\n  \r\n  const unitRef = doc(unitsCollection, unitId);\r\n  const unitSnap = await getDoc(unitRef);\r\n  \r\n  if (unitSnap.exists()) {\r\n\r\n    return { id: unitSnap.id, ...unitSnap.data() } as Unit;\r\n\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\nexport async function updateUnit(unitId: string, data: Partial<Unit>): Promise<void> {\r\n  const unitRef = doc(unitsCollection, unitId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(unitRef, updateData);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    const index = unitsCache.findIndex(u => u.id === unitId);\r\n    if (index !== -1) {\r\n      unitsCache[index] = { ...unitsCache[index], ...updateData };\r\n    }\r\n  }\r\n  \r\n  if (unitDataCache.has(unitId) && unitDataCache.get(unitId)!.unit) {\r\n    unitDataCache.get(unitId)!.unit = { \r\n      ...unitDataCache.get(unitId)!.unit!, \r\n      ...updateData \r\n    };\r\n  }\r\n}\r\n\r\nexport async function deleteUnit(unitId: string): Promise<void> {\r\n  const unitRef = doc(unitsCollection, unitId);\r\n  await deleteDoc(unitRef);\r\n  \r\n  // Delete related data\r\n  await deleteUnitPatients(unitId);\r\n  await deleteUnitNurses(unitId);\r\n  await deleteUnitPCTs(unitId);\r\n  await deleteUnitStaff(unitId);\r\n  \r\n  // Update cache\r\n  if (unitsCache) {\r\n    unitsCache = unitsCache.filter(u => u.id !== unitId);\r\n  }\r\n  \r\n  unitDataCache.delete(unitId);\r\n}\r\n\r\n// Patient Functions\r\nexport async function createPatient(patientData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {\r\n  const timestamp = Date.now();\r\n  const patientRef = doc(patientsCollection);\r\n  const newPatient: Patient = {\r\n    ...patientData,\r\n    id: patientRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(patientRef, newPatient);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(patientData.unitId)) {\r\n    unitDataCache.get(patientData.unitId)!.patients.push(newPatient);\r\n  }\r\n  \r\n  return newPatient;\r\n}\r\n\r\n// Batch create patients for better performance\r\nexport async function batchCreatePatients(patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Patient[]> {\r\n\r\n  if (patientsData.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newPatients: Patient[] = [];\r\n  \r\n  for (const patientData of patientsData) {\r\n    const patientRef = doc(patientsCollection);\r\n    const newPatient: Patient = {\r\n      ...patientData,\r\n      id: patientRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(patientRef, newPatient);\r\n    newPatients.push(newPatient);\r\n\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newPatients;\r\n}\r\n\r\nexport async function getPatientsByUnit(unitId: string): Promise<Patient[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.patients.length > 0) {\r\n    return cachedData.patients;\r\n  }\r\n  \r\n  const q = query(patientsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as Patient;\r\n  });\r\n\r\n}\r\n\r\nexport async function updatePatient(patientId: string, data: Partial<Patient>): Promise<void> {\r\n  const patientRef = doc(patientsCollection, patientId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(patientRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.patients.findIndex(p => p.id === patientId);\r\n    if (index !== -1) {\r\n      cachedData.patients[index] = { ...cachedData.patients[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n// Batch update patients for better performance\r\nexport async function batchUpdatePatients(updates: { id: string, data: Partial<Patient> }[]): Promise<void> {\r\n  const batch = writeBatch(db);\r\n  const timestamp = Date.now();\r\n  \r\n  for (const { id, data } of updates) {\r\n    const patientRef = doc(patientsCollection, id);\r\n    batch.update(patientRef, { ...data, updatedAt: timestamp });\r\n    \r\n    // Update cache\r\n    for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n      const index = cachedData.patients.findIndex(p => p.id === id);\r\n      if (index !== -1) {\r\n        cachedData.patients[index] = { \r\n          ...cachedData.patients[index], \r\n          ...data,\r\n          updatedAt: timestamp\r\n        };\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n}\r\n\r\nexport async function deletePatient(patientId: string): Promise<void> {\r\n  const patientRef = doc(patientsCollection, patientId);\r\n  await deleteDoc(patientRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.patients = cachedData.patients.filter(p => p.id !== patientId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitPatients(unitId: string): Promise<void> {\r\n  const q = query(patientsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  if (snapshot.empty) {\r\n    return;\r\n  }\r\n  \r\n\r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n}\r\n\r\n// Nurse Functions\r\nexport async function createNurse(nurseData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>): Promise<Nurse> {\r\n  const timestamp = Date.now();\r\n  const nurseRef = doc(nursesCollection);\r\n  const newNurse: Nurse = {\r\n    ...nurseData,\r\n    id: nurseRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(nurseRef, newNurse);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(nurseData.unitId)) {\r\n    unitDataCache.get(nurseData.unitId)!.nurses.push(newNurse);\r\n  }\r\n  \r\n  return newNurse;\r\n}\r\n\r\n// Batch create nurses for better performance\r\nexport async function batchCreateNurses(nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<Nurse[]> {\r\n  if (nursesData.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newNurses: Nurse[] = [];\r\n  \r\n  for (const nurseData of nursesData) {\r\n    const nurseRef = doc(nursesCollection);\r\n    const newNurse: Nurse = {\r\n      ...nurseData,\r\n      id: nurseRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(nurseRef, newNurse);\r\n    newNurses.push(newNurse);\r\n\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newNurses;\r\n}\r\n\r\nexport async function getNursesByUnit(unitId: string): Promise<Nurse[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.nurses.length > 0) {\r\n    return cachedData.nurses;\r\n  }\r\n  \r\n  const q = query(nursesCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as Nurse;\r\n  });\r\n\r\n}\r\n\r\nexport async function updateNurse(nurseId: string, data: Partial<Nurse>): Promise<void> {\r\n  const nurseRef = doc(nursesCollection, nurseId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(nurseRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.nurses.findIndex(n => n.id === nurseId);\r\n    if (index !== -1) {\r\n      cachedData.nurses[index] = { ...cachedData.nurses[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteNurse(nurseId: string): Promise<void> {\r\n  const nurseRef = doc(nursesCollection, nurseId);\r\n  await deleteDoc(nurseRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.nurses = cachedData.nurses.filter(n => n.id !== nurseId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitNurses(unitId: string): Promise<void> {\r\n  const  q = query(nursesCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);    \r\n  if (snapshot.empty) {\r\n    return;\r\n  }\r\n  \r\n\r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n\r\n\r\n}\r\n\r\n\r\n// PCT Functions\r\nexport async function createPCT(pctData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>): Promise<PCT> {\r\n  const timestamp = Date.now();\r\n  const pctRef = doc(pctsCollection);\r\n  const newPCT: PCT = {\r\n    ...pctData,\r\n    id: pctRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(pctRef, newPCT);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(pctData.unitId)) {\r\n    unitDataCache.get(pctData.unitId)!.pcts.push(newPCT);\r\n  }\r\n  \r\n  return newPCT;\r\n}\r\n\r\n// Batch create PCTs for better performance\r\nexport async function batchCreatePCTs(pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<PCT[]> {\r\n\r\n  if (pctsData.length === 0) {\r\n    return [];\r\n  }\r\n  \r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newPCTs: PCT[] = [];\r\n  \r\n  for (const pctData of pctsData) {\r\n    const pctRef = doc(pctsCollection);\r\n    const newPCT: PCT = {\r\n      ...pctData,\r\n      id: pctRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(pctRef, newPCT);\r\n    newPCTs.push(newPCT);\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newPCTs;\r\n}\r\n\r\nexport async function getPCTsByUnit(unitId: string): Promise<PCT[]> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (cachedData?.pcts.length > 0) {\r\n    return cachedData.pcts;\r\n  }\r\n  \r\n  const q = query(pctsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as PCT;\r\n  });\r\n}\r\n\r\nexport async function updatePCT(pctId: string, data: Partial<PCT>): Promise<void> {\r\n  const pctRef = doc(pctsCollection, pctId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(pctRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    const index = cachedData.pcts.findIndex(p => p.id === pctId);\r\n    if (index !== -1) {\r\n      cachedData.pcts[index] = { ...cachedData.pcts[index], ...updateData };\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deletePCT(pctId: string): Promise<void> {\r\n  const pctRef = doc(pctsCollection, pctId);\r\n  await deleteDoc(pctRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    cachedData.pcts = cachedData.pcts.filter(p => p.id !== pctId);\r\n  }\r\n}\r\n\r\nexport async function deleteUnitPCTs(unitId: string): Promise<void> {\r\n  const q = query(pctsCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n\r\n  if (snapshot.empty) {\r\n    return;\r\n  }\r\n\r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n}\r\n\r\n// Staff Functions\r\nexport async function createStaffMember(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>): Promise<StaffMember> {\r\n  const timestamp = Date.now();\r\n  const staffRef = doc(staffCollection);\r\n  const newStaff: StaffMember = {\r\n    ...staffData,\r\n    id: staffRef.id,\r\n    createdAt: timestamp,\r\n    updatedAt: timestamp\r\n  };\r\n  \r\n  await setDoc(staffRef, newStaff);\r\n  \r\n  // Update cache\r\n  if (unitDataCache.has(staffData.unitId)) {\r\n    if (staffData.role === 'chargeNurse') {\r\n      unitDataCache.get(staffData.unitId)!.chargeNurse = newStaff;\r\n    } else if (staffData.role === 'unitClerk') {\r\n      unitDataCache.get(staffData.unitId)!.unitClerk = newStaff;\r\n    }\r\n  }\r\n  \r\n  return newStaff;\r\n}\r\n\r\n// Batch create staff members for better performance\r\nexport async function batchCreateStaffMembers(staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[]): Promise<StaffMember[]> {\r\n\r\n  if (staffData.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  const newStaffMembers: StaffMember[] = [];\r\n  \r\n  for (const staffMemberData of staffData) {\r\n    const staffRef = doc(staffCollection);\r\n    const newStaff: StaffMember = {\r\n      ...staffMemberData,\r\n      id: staffRef.id,\r\n      createdAt: timestamp,\r\n      updatedAt: timestamp\r\n    };\r\n    \r\n    batch.set(staffRef, newStaff);\r\n    newStaffMembers.push(newStaff);\r\n\r\n  }\r\n  \r\n  await batch.commit();\r\n  return newStaffMembers;\r\n}\r\n\r\nexport async function getStaffByUnit(unitId: string): Promise<StaffMember[]> {\r\n  const q = query(staffCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as StaffMember;\r\n  });\r\n}\r\n\r\nexport async function getStaffByUnitAndRole(unitId: string, role: 'chargeNurse' | 'unitClerk'): Promise<StaffMember | null> {\r\n  // Check cache first\r\n  const cachedData = unitDataCache.get(unitId);\r\n  if (role === 'chargeNurse' && cachedData?.chargeNurse) {\r\n    return cachedData.chargeNurse;\r\n  } else if (role === 'unitClerk' && cachedData?.unitClerk) {\r\n    return cachedData.unitClerk;\r\n  }\r\n  \r\n  const q = query(staffCollection, where('unitId', '==', unitId), where('role', '==', role));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  if (snapshot.empty) {\r\n    return null;\r\n  }\r\n  \r\n\r\n  const staffData = snapshot.docs[0].data();\r\n  return { id: snapshot.docs[0].id, ...staffData } as StaffMember;\r\n\r\n}\r\n\r\nexport async function updateStaffMember(staffId: string, data: Partial<StaffMember>): Promise<void> {\r\n  const staffRef = doc(staffCollection, staffId);\r\n  const updateData = {\r\n    ...data,\r\n    updatedAt: Date.now()\r\n  };\r\n  \r\n  await updateDoc(staffRef, updateData);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    if (cachedData.chargeNurse?.id === staffId) {\r\n      cachedData.chargeNurse = { ...cachedData.chargeNurse, ...updateData };\r\n    } else if (cachedData.unitClerk?.id === staffId) {\r\n      cachedData.unitClerk = { ...cachedData.unitClerk, ...updateData };\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteStaffMember(staffId: string): Promise<void> {\r\n  const staffRef = doc(staffCollection, staffId);\r\n  await deleteDoc(staffRef);\r\n  \r\n  // Update cache\r\n  for (const [unitId, cachedData] of unitDataCache.entries()) {\r\n    if (cachedData.chargeNurse?.id === staffId) {\r\n      cachedData.chargeNurse = null;\r\n    } else if (cachedData.unitClerk?.id === staffId) {\r\n      cachedData.unitClerk = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport async function deleteUnitStaff(unitId: string): Promise<void> {\r\n  const q = query(staffCollection, where('unitId', '==', unitId));\r\n  const snapshot = await getDocs(q);\r\n  \r\n  if (snapshot.empty) {\r\n    return;\r\n  }\r\n  \r\n\r\n  const batch = writeBatch(db);\r\n  snapshot.docs.forEach(doc => {\r\n    batch.delete(doc.ref);\r\n  });\r\n  \r\n  await batch.commit();\r\n\r\n}\r\n\r\n// Module Functions\r\nexport async function getModules(): Promise<Module[]> {\r\n  const snapshot = await getDocs(modulesCollection);\r\n  return snapshot.docs.map(doc => {\r\n    return { id: doc.id, ...doc.data() } as Module;\r\n  });\r\n}\r\n\r\nexport async function updateModule(moduleId: string, enabled: boolean): Promise<void> {\r\n  const moduleRef = doc(modulesCollection, moduleId);\r\n  await updateDoc(moduleRef, {\r\n    enabled,\r\n    updatedAt: Date.now()\r\n  });\r\n}\r\n\r\nexport async function initializeModules(modules: Omit<Module, 'updatedAt'>[]): Promise<void> {\r\n  const timestamp = Date.now();\r\n  const batch = writeBatch(db);\r\n  \r\n  for (const module of modules) {\r\n    const moduleRef = doc(modulesCollection, module.id);\r\n    const moduleSnap = await getDoc(moduleRef);\r\n    \r\n    if (!moduleSnap.exists()) {\r\n      batch.set(moduleRef, {\r\n        ...module,\r\n        updatedAt: timestamp\r\n      });\r\n    }\r\n  }\r\n  \r\n  await batch.commit();\r\n}\r\n\r\n// Initialize default modules if they don't exist\r\nexport async function setupDefaultModules(): Promise<void> {\r\n  const defaultModules: Omit<Module, 'updatedAt'>[] = [\r\n    { id: 'mock-patient', name: 'Mock Patient Data', description: 'Generate mock patient data for testing', enabled: true },\r\n    { id: 'spectra-pool', name: 'Spectra Pool Management', description: 'Manage spectra pool assignments', enabled: false },\r\n    { id: 'acuity-tracking', name: 'Acuity Tracking', description: 'Track and manage patient acuity levels', enabled: true },\r\n    { id: 'bed-management', name: 'Bed Management', description: 'Track bed availability and assignments', enabled: true },\r\n    { id: 'staff-messaging', name: 'Staff Messaging', description: 'Internal messaging system for staff', enabled: false }\r\n  ];\r\n  \r\n  await initializeModules(defaultModules);\r\n}\r\n\r\nexport async function initializeUnitData(unit: Unit): Promise<{\r\n  patients: Patient[],\r\n  nurses: Nurse[],\r\n  pcts: PCT[],\r\n  chargeNurse: StaffMember | null,\r\n  unitClerk: StaffMember | null\r\n}> {\r\n  // Generate all the data first\r\n  const patientsData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const nursesData: Omit<Nurse, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const pctsData: Omit<PCT, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  const staffData: Omit<StaffMember, 'id' | 'createdAt' | 'updatedAt'>[] = [];\r\n  \r\n  // Generate patient data\r\n  for (const range of unit.roomRanges) {\r\n    const [start, end] = range.split('-').map(num => parseInt(num, 10));\r\n    for (let roomNum = start; roomNum <= end; roomNum++) {\r\n      patientsData.push({\r\n        unitId: unit.id,\r\n        roomNumber: roomNum.toString(),\r\n        name: '',\r\n        acuity: Math.floor(Math.random() * 5) + 1, // Random acuity 1-5\r\n        assigned: false\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Generate nurse data\r\n  for (let i = 0; i < unit.nurseCardCount; i++) {\r\n    nursesData.push({\r\n      unitId: unit.id,\r\n      name: `Nurse ${i + 1}`,\r\n      spectraNumber: `SN${10000 + i}`,\r\n      reliefName: '',\r\n      assignedRooms: [],\r\n      acuityCapacity: 12\r\n    });\r\n  }\r\n  \r\n  // Generate PCT data\r\n  for (let i = 0; i < unit.pctCardCount; i++) {\r\n    // Divide room ranges among PCTs\r\n    const rangeIndex = i % unit.roomRanges.length;\r\n    const [start, end] = unit.roomRanges[rangeIndex].split('-').map(num => parseInt(num, 10));\r\n    const rangeSize = end - start + 1;\r\n    const pctRangeSize = Math.ceil(rangeSize / unit.pctCardCount);\r\n    \r\n    const pctStart = start + (i * pctRangeSize);\r\n    const pctEnd = Math.min(pctStart + pctRangeSize - 1, end);\r\n    \r\n    pctsData.push({\r\n      unitId: unit.id,\r\n      name: `PCT ${i + 1}`,\r\n      spectraNumber: `PCT${10000 + i}`,\r\n      reliefName: '',\r\n      roomRange: `${pctStart}-${pctEnd}`\r\n    });\r\n  }\r\n  \r\n  // Generate staff data\r\n  if (unit.hasChargeNurse) {\r\n    staffData.push({\r\n      unitId: unit.id,\r\n      name: '',\r\n      spectraNumber: '',\r\n      role: 'chargeNurse'\r\n    });\r\n  }\r\n  \r\n  if (unit.hasUnitClerk) {\r\n    staffData.push({\r\n      unitId: unit.id,\r\n      name: '',\r\n      spectraNumber: '',\r\n      role: 'unitClerk'\r\n    });\r\n  }\r\n  \r\n\r\n  const [patients, nurses, pcts, staffMembers] = await Promise.all([\r\n    batchCreatePatients(patientsData),\r\n    batchCreateNurses(nursesData),\r\n    batchCreatePCTs(pctsData),\r\n    batchCreateStaffMembers(staffData)\r\n  ]);\r\n  \r\n  // Process staff members\r\n  let chargeNurse: StaffMember | null = null;\r\n  let unitClerk: StaffMember | null = null;\r\n  \r\n  for (const staff of staffMembers) {\r\n    if (staff.role === 'chargeNurse') {\r\n      chargeNurse = staff;\r\n    } else if (staff.role === 'unitClerk') {\r\n      unitClerk = staff;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    patients,\r\n    nurses,\r\n    pcts,\r\n    chargeNurse,\r\n    unitClerk\r\n  };\r\n}\r\nexport { app, db, storage, auth };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3939, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\r\n\r\nfunction Skeleton({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\"animate-pulse rounded-md bg-gray-200\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Skeleton }"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,wCAAwC;QACrD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 3963, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/kurtw/source/repos/Linearthrone/unitview_firebase/src/app/facility-setup/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { CreateUnitDialog } from '@/components/facility/create-unit-dialog';\r\nimport { ModuleToggleCard } from '@/components/facility/module-toggle-card';\r\nimport { PatientGrid } from '@/components/shared/patient-grid-optimized';\r\nimport { UnitCard } from '@/components/facility/unit-card';\r\nimport { getUnits, createUnit, getModules, updateModule, setupDefaultModules, initializeUnitData, Unit, Module } from '@/lib/firebase';\r\nimport { toast } from '@/components/ui/use-toast';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\n\r\nexport default function FacilitySetupPage() {\r\n  const [units, setUnits] = useState<Unit[]>([]);\r\n  const [modules, setModules] = useState<Module[]>([]);\r\n  const [isCreateUnitOpen, setIsCreateUnitOpen] = useState(false);\r\n  const [selectedUnit, setSelectedUnit] = useState<Unit | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load units and modules on component mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Initialize default modules if they don't exist\r\n        await setupDefaultModules();\r\n        \r\n        // Load units and modules in parallel for better performance\r\n        const [unitData, moduleData] = await Promise.all([\r\n          getUnits(),\r\n          getModules()\r\n        ]);\r\n        \r\n        setUnits(unitData);\r\n        setModules(moduleData);\r\n        \r\n        // Set selected unit to the first unit if available\r\n        if (unitData.length > 0 && !selectedUnit) {\r\n          setSelectedUnit(unitData[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading data:', error);\r\n        toast({\r\n          title: 'Error',\r\n          description: 'Failed to load data. Please try again.',\r\n          variant: 'destructive',\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, []);\r\n\r\n  const handleCreateUnit = async (unitData: Omit<Unit, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    try {\r\n      // Show loading toast\r\n      toast({\r\n        title: 'Creating Unit',\r\n        description: 'Please wait while we set up your unit...',\r\n      });\r\n      \r\n      const newUnit = await createUnit(unitData);\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setUnits(prevUnits => [...prevUnits, newUnit]);\r\n      setSelectedUnit(newUnit);\r\n      setIsCreateUnitOpen(false);\r\n      \r\n      toast({\r\n        title: 'Success',\r\n        description: `Unit \"${newUnit.designation}\" has been created.`,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating unit:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to create unit. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleModuleToggle = async (moduleId: string) => {\r\n    try {\r\n      // Find the module and toggle its state\r\n      const moduleToUpdate = modules.find(m => m.id === moduleId);\r\n      if (!moduleToUpdate) return;\r\n      \r\n      // Update local state immediately (optimistic update)\r\n      setModules(modules.map(module => \r\n        module.id === moduleId \r\n          ? { ...module, enabled: !module.enabled } \r\n          : module\r\n      ));\r\n      \r\n      // Update in Firestore\r\n      await updateModule(moduleId, !moduleToUpdate.enabled);\r\n      \r\n      toast({\r\n        title: 'Module Updated',\r\n        description: `${moduleToUpdate.name} has been ${!moduleToUpdate.enabled ? 'enabled' : 'disabled'}.`,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error toggling module:', error);\r\n      \r\n      // Revert the optimistic update if there was an error\r\n      setModules(prevModules => [...prevModules]);\r\n      \r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update module. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSelectUnit = (unit: Unit) => {\r\n    setSelectedUnit(unit);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container mx-auto p-6\">\r\n        <div className=\"flex justify-between items-center mb-8\">\r\n          <Skeleton className=\"h-10 w-48\" />\r\n          <Skeleton className=\"h-10 w-32\" />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          {/* Left sidebar skeleton */}\r\n          <div className=\"space-y-4\">\r\n            <Skeleton className=\"h-8 w-24 mb-4\" />\r\n            {[1, 2, 3].map(i => (\r\n              <Skeleton key={i} className=\"h-24 w-full rounded-lg\" />\r\n            ))}\r\n          </div>\r\n\r\n          {/* Main content skeleton */}\r\n          <div className=\"lg:col-span-2\">\r\n            <Skeleton className=\"h-8 w-48 mb-4\" />\r\n            <Skeleton className=\"h-64 w-full rounded-lg\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6\">\r\n      <div className=\"flex justify-between items-center mb-8\">\r\n        <h1 className=\"text-3xl font-bold\">Facility Setup</h1>\r\n        <Button onClick={() => setIsCreateUnitOpen(true)}>Create New Unit</Button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Left sidebar - Units list */}\r\n        <div className=\"space-y-4\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Units</h2>\r\n          {units.length > 0 ? (\r\n            units.map(unit => (\r\n              <UnitCard \r\n                key={unit.id} \r\n                unit={unit} \r\n                isSelected={selectedUnit?.id === unit.id}\r\n                onSelect={() => handleSelectUnit(unit)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"bg-gray-50 border rounded-lg p-6 text-center\">\r\n              <p className=\"text-gray-500 mb-4\">No units have been created yet.</p>\r\n              <Button variant=\"outline\" onClick={() => setIsCreateUnitOpen(true)}>\r\n                Create Your First Unit\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Main content - Patient Grid */}\r\n        <div className=\"lg:col-span-2\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">\r\n            {selectedUnit ? `${selectedUnit.designation} Layout` : 'Select a Unit'}\r\n          </h2>\r\n          {selectedUnit ? (\r\n            <PatientGrid unitId={selectedUnit.id} />\r\n          ) : (\r\n            <div className=\"bg-gray-50 border rounded-lg p-12 text-center\">\r\n              <p className=\"text-gray-500 mb-2\">Select a unit from the sidebar or create a new unit to view the layout.</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modules Section */}\r\n      <div className=\"mt-12\">\r\n        <h2 className=\"text-2xl font-semibold mb-6\">Module Configuration</h2>\r\n        {modules.length > 0 ? (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {modules.map(module => (\r\n              <ModuleToggleCard\r\n                key={module.id}\r\n                module={module}\r\n                onToggle={() => handleModuleToggle(module.id)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-gray-50 border rounded-lg p-6 text-center\">\r\n            <p className=\"text-gray-500\">No modules available.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Create Unit Dialog */}\r\n      <CreateUnitDialog\r\n        open={isCreateUnitOpen}\r\n        onClose={() => setIsCreateUnitOpen(false)}\r\n        onCreateUnit={handleCreateUnit}\r\n      />\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}